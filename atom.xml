<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱学兮</title>
  
  
  <link href="https://better-jiang.github.io/atom.xml" rel="self"/>
  
  <link href="https://better-jiang.github.io/"/>
  <updated>2024-01-24T08:10:50.579Z</updated>
  <id>https://better-jiang.github.io/</id>
  
  <author>
    <name>刘振江</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;毛选&gt;读后感</title>
    <link href="https://better-jiang.github.io/2023/09/13/%E6%AF%9B%E9%80%89-%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>https://better-jiang.github.io/2023/09/13/%E6%AF%9B%E9%80%89-%E8%AF%BB%E5%90%8E%E6%84%9F/</id>
    <published>2023-09-13T01:48:36.000Z</published>
    <updated>2024-01-24T08:10:50.579Z</updated>
    
    <content type="html"><![CDATA[<p>花了近4个月读完《毛选》1-4部，且多是在上下班地铁上，以一种休闲随性之态，草草翻过，并非细细阅读。即使如此，也深有感触，极是推荐大家去看一看。<br>    首先我要叠些甲：<br>    1、我是教员的“诗词粉”，对政治无感，谈不上喜欢，也不并不讨厌。<br>    2、本人非党员，也非公务员，读此书，写此文，纯是好奇、自愿，绝非任务。<br>    3、此文所述，仅是读《毛选》后有感而言，对于教员的功过是非，毁誉得失，均未掺杂，也不做讨论，因为我对此不甚了解，知之甚少。<br>    4、对无脑嘴臭的喷子，呵呵，反弹。</p><p>一、刚开始读时，很是迷惑，深感矛盾，人民民主专政，能既民主又专政？社会主义与民族/国家资本主义能共存？左倾不行，右倾也不行？敌人与朋友可相互转换？冒险主义与保守主义，教条主义与经验主义也都不对？这就是”中庸“吗？折中+妥协。<br>其实不然，事物是多样的，是动态变化的，要着眼实际情况、实事求是看待、分析问题。生活中并非只有黑与白，也有彩与灰。放下对黑白分明的执念，世界是复杂的，要去好好体会、理解。这难道就是《毛选》的底色，辩证唯物主义吗？我不确定，还需好心大佬给指点一二。<br>二、纲举目张，抓住主要矛盾。在工作与生活中，要勤分析，多思考，找出事物的中心和关键点，万不可忙绿于那些无关紧要的琐碎小事，看似努力，实则是自我感动。每日三省吾身，终极目标是什么? 是否抓住事情的重点？有没有先做重要之事？<br>三、分清敌友，团结一切可以团结的力量。团结友人，我能做到，可对于中间的、陌生者，我会刻意回避，怕被打扰。而对于那些志不同、道不合者，更会心生鄙夷，望其能老死不相往来。正因此，吃过大亏，也撞过南墙，其实细想，是大错特错，他们都是可以团结的，求同存异即可。<br>四、科学、客观，实事求是，有调查才有发言权，具体问题具体分析。这些不但是考公考编的万能句式，也是处理生活难题的“金钥匙”。要认清现实，避免意气用事，也别心存妄想了，多看看身边实实在在人与事，对于网络，不可偏信，警惕被带偏。<br>五、当做好自己能做之事后，不要过于着急和怀疑，要善于等待，等待其条件成熟后，再顺势而为，自然水到渠成。“不可胜在己，可胜在敌”，先创造条件让自己不被敌人战胜，然后等待敌人出差或其他有礼条件出现，再同敌作战。</p><p>前几日是教员逝世47周年，在B站看了很多up主制作的缅怀视频，其中有个12.4万的点赞的评论，如下：<br>对应教员的认知我们一般会经历三个阶段：<br>1、小时候在大人的教育下崇拜他<br>2、少年时在敌人的忽悠下怀疑他<br>3、长大后在自己的探索中敬佩他<br>我是从初、高中时的崇拜，到大学时的无意忽视和怀疑，再到现在的无比崇拜，越是长大越能体会到教员的伟大之处。我也和很多很多人一样，希望并好奇，教员如果还活在当世，我们现今的生活会是何种模样？会变好吗？还会有996，加班，内卷，男、女拳对立吗？会消费主义盛行，电信诈骗猖獗吗？<br>官员贪污腐败，不作为吗？国家未富先老吗？中美斗争何时休？台湾何时还？<br>我坚信当今的中国是存在“牛鬼蛇神”、“害人虫”的，且已成气候，亟待扫除。但事实上，我们总被人忽悠，“忍一忍，一切会过去的，会变好的”，“把它交给历史吧”。<br>对付敌人，要斗争，以斗争求团结则团结存，以退让求团结则团结亡。<br>前途是光明的，道路曲折的，坚持下去，胜利一定属于我们的。<br>如果你也心怀理想，充满信念，那么“同志，加油”，“敌军围困万千重，我自岿然不动”，“雄关漫道真如铁，而今迈步从头越”， ”待到山花烂漫时，她在丛中笑“！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;花了近4个月读完《毛选》1-4部，且多是在上下班地铁上，以一种休闲随性之态，草草翻过，并非细细阅读。即使如此，也深有感触，极是推荐大家去看一看。&lt;br&gt;    首先我要叠些甲：&lt;br&gt;    1、我是教员的“诗词粉”，对政治无感，谈不上喜欢，也不并不讨厌。&lt;br&gt;    2</summary>
      
    
    
    
    <category term="就要表达" scheme="https://better-jiang.github.io/categories/%E5%B0%B1%E8%A6%81%E8%A1%A8%E8%BE%BE/"/>
    
    
    <category term="书籍读后感" scheme="https://better-jiang.github.io/tags/%E4%B9%A6%E7%B1%8D%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>V8如何执行一段js代码?</title>
    <link href="https://better-jiang.github.io/2023/08/29/V8%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AE%B5js%E4%BB%A3%E7%A0%81/"/>
    <id>https://better-jiang.github.io/2023/08/29/V8%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AE%B5js%E4%BB%A3%E7%A0%81/</id>
    <published>2023-08-29T02:24:35.000Z</published>
    <updated>2024-01-24T08:10:50.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><ul><li>编译器（Compiler），对源码进行<strong>词法分析、语法分析</strong>，生成<strong>抽象语法树</strong>，然后<strong>优化代码</strong>，生成能被处理器理解的<strong>机器码</strong>（可执行的二级制文件）</li><li>编译器 （Interpreter），对源码进行<strong>词法分析、语法分析</strong>，生成<strong>抽象语法树</strong>，在基于AST生成<strong>字节码</strong>，再<strong>根据字节码来执行程序</strong><br><img src="/image/compiler_interpreter.png" alt="compiler_interpreter"></li><li>抽象语法树 (AST), 是源代码语法结构的一种抽象表示，它以树状的形式来表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。<a href="https://www.jointjs.com/demos/abstract-syntax-tree">javascript-ast</a>。生成AST需要2个阶段：<ul><li>分词，词法分析（tokenize）， 将一行行源码拆解成一个个token</li><li>解析，语法分析（parse）, 将token数据，根据语法规则转为AST</li></ul></li><li>字节码（Bytecode）， 介于AST和机器码之间，但与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。</li><li>即使编译器（JIT），字节码配合解释器和编译器来执行代码。工作流程如下图<br><img src="/image/JIT.png" alt="JIT"></li></ul><h3 id="V8-如何执行一段JS代码？"><a href="#V8-如何执行一段JS代码？" class="headerlink" title="V8 如何执行一段JS代码？"></a>V8 如何执行一段JS代码？</h3><p><img src="/image/v8-runcode.png" alt="V8"></p><ul><li><ol><li><strong>生成抽象语法树（AST）和执行上下文</strong></li></ol></li><li><ol start="2"><li><strong>生成字节码</strong>，解释器（Ignition）根据AST生成字节码，并解释执行字节码</li></ol></li><li><ol start="3"><li><strong>执行代码</strong> ， 解释器除了负责生成字节码外，还会解释并执行字节码，过程中，如果发现有热点代码（HotSpot，被重复执行多次的代码），编译器（TurboFan）会把该段热点代码编译为高效的机器码，当再次执行时，会执行编译后的机器码，以此来提高执行效率。</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编译器（Compiler），对源码进行&lt;strong&gt;词法分析、语法分析&lt;/strong&gt;，生成&lt;strong&gt;</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="javascript" scheme="https://better-jiang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-V8垃圾回收</title>
    <link href="https://better-jiang.github.io/2023/08/28/JS-V8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>https://better-jiang.github.io/2023/08/28/JS-V8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</id>
    <published>2023-08-28T01:46:03.000Z</published>
    <updated>2024-01-24T08:10:50.579Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JS中的原生数据类型存储在栈空间，引用类型数据存储在堆空间</strong></p><h3 id="调用栈中的数据如何回收？"><a href="#调用栈中的数据如何回收？" class="headerlink" title="调用栈中的数据如何回收？"></a>调用栈中的数据如何回收？</h3><p><img src="/image/callstack-heap.png" alt="call stack-heap"></p><p>ESP，一个<strong>记录当前执行状态</strong>的指针，指向调用栈中正在执行函数的执行上下文。<br>当一个函数执行结束后，js引擎会通过向下移动ESP来销毁该函数保存在栈中的执行上下文。</p><h3 id="堆中的数据如何回收？"><a href="#堆中的数据如何回收？" class="headerlink" title="堆中的数据如何回收？"></a>堆中的数据如何回收？</h3><h4 id="代际假说和分代收集"><a href="#代际假说和分代收集" class="headerlink" title="代际假说和分代收集"></a>代际假说和分代收集</h4><p>代际假说（The Generational Hypothesis) 两特点：</p><ul><li>大部分对象在内存中存在的时间很短，即很多对象一经分配内存，很快就变的不可访问</li><li>不死的对象，会活的更久</li></ul><p>在V8中会把<strong>堆分为新生代和老生代</strong>  ，对应的使用 <strong>副垃圾回收器、主垃圾回收器</strong> 实施垃圾回收。</p><ul><li>新生代，存放<strong>生存时间短</strong>的对象， 使用<strong>副垃圾回收器</strong></li><li>老生代，存放<strong>生存时间长</strong>的对象， 使用<strong>主垃圾回收器</strong></li></ul><h4 id="垃圾回收器-工作流程"><a href="#垃圾回收器-工作流程" class="headerlink" title="垃圾回收器-工作流程"></a>垃圾回收器-工作流程</h4><ul><li>1、标记空间中的活动对象和非活动对象</li><li>2、回收非活动对象所占据的内存。即 在所有的标记完成后，统一清理内存中所有被标记为可回收的对象。</li><li>3、<strong>内存整理</strong>，因为 频繁回收对象后，导致内存中存在大量不连续空间（<strong>内存碎片</strong>），当要分配教大连续内存时，有可能出现内存不足情况。所有需要整理这些内存碎片。</li></ul><h5 id="副垃圾回收器"><a href="#副垃圾回收器" class="headerlink" title="副垃圾回收器"></a>副垃圾回收器</h5><p>负责<strong>新生区</strong>的垃圾回收，通常情况下，大多数<strong>小的对象</strong>会被分配到新生区，因此<strong>垃圾回收比较频繁</strong>。<br>使用 Scavenge 算法，将空间<strong>对半划分</strong>为两个区域，一半是对象区域，一半是空闲区域。  </p><ul><li>新加入的对象会存放到对象区域</li><li>当对象区域快被写满时，执行一次垃圾清理操作<ul><li>首先对 对象区域 中的垃圾做标记</li><li>标记完成后，进入垃圾清理阶段，副垃圾回收器 把 存活的对象 <strong>复制到空闲区域</strong>中，同时进行<strong>内存整理操作</strong>，将对象有序的排列。</li><li>复制完成后，<strong>对象区域和空闲区域角色翻转</strong>，重复此步骤</li></ul></li></ul><p><strong>对象晋升策略</strong>，经过<strong>两次垃圾回收依然还存活的对象</strong>，会被移动到老生区</p><h5 id="主垃圾回收器"><a href="#主垃圾回收器" class="headerlink" title="主垃圾回收器"></a>主垃圾回收器</h5><p>老生区中的对象，有2个特点：</p><ul><li>对象占用空间大</li><li>对象存活时间长</li></ul><p>主垃圾回收器采用<strong>标记-清除/整理（Mark-Sweep-Compact）</strong>算法进行垃圾回收</p><ul><li>标记，从一组根元素开始，递归变量这组跟元素，能到达的元素称为<strong>活动对象</strong>，没有到达的元素则判断为<strong>垃圾数据</strong></li><li>整理，让所有存活的对象都向内存的一段移动</li><li>清除，清理掉端边界以外的内存</li></ul><h5 id="增量标记（Incremental-Marking）算法"><a href="#增量标记（Incremental-Marking）算法" class="headerlink" title="增量标记（Incremental Marking）算法"></a>增量标记（Incremental Marking）算法</h5><ul><li>为降低老生代的垃圾回收而造成的卡顿</li><li>V8 将一个完整的垃圾回收任务拆分为很多小的任务</li><li>让垃圾回收标记 和 js 应用逻辑 交替进行</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;JS中的原生数据类型存储在栈空间，引用类型数据存储在堆空间&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;调用栈中的数据如何回收？&quot;&gt;&lt;a href=&quot;#调用栈中的数据如何回收？&quot; class=&quot;headerlink&quot; title=&quot;调用栈中的数据如何回收？&quot;&gt;</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="javascript" scheme="https://better-jiang.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>空想怪的日常反思</title>
    <link href="https://better-jiang.github.io/2023/07/31/%E7%A9%BA%E6%83%B3%E6%80%AA%E7%9A%84%E6%97%A5%E5%B8%B8%E5%8F%8D%E6%80%9D/"/>
    <id>https://better-jiang.github.io/2023/07/31/%E7%A9%BA%E6%83%B3%E6%80%AA%E7%9A%84%E6%97%A5%E5%B8%B8%E5%8F%8D%E6%80%9D/</id>
    <published>2023-07-31T02:31:08.000Z</published>
    <updated>2024-01-24T08:10:50.579Z</updated>
    
    <content type="html"><![CDATA[<p>明明知道要做什么，怎么去做，却一再拖延至放弃，然后懊恼、悔恨、反思。接着会去制定计划，并幻想着完成时刻的兴奋与骄傲。但计划总是会变，变得很快，很决然，令人无法阻止，也无法理解为何如此？明明心有渴望，也不缺激情，却在要做的那一刻突然变卦，冒出无数理由，这次就算了，做与不做没差的。今天太累，昨日熬夜，要早点睡觉休息。在这之前，要好好放松一下，喝些冰凉可乐，看个综艺视频，打几局游戏，才好去舒服的上床睡觉。  </p><p>可我工作的每一天都身心俱疲，基本每一日晚睡、熬夜，时常失眠，致使白天无精打采，昏昏沉沉。在加天气炎热难耐，终日要靠冰镇可乐续命，上班前的麦当劳早餐豆浆换成中、大杯少冰无糖可乐，下班回租处也习惯买些雪糕+冰可乐，回到房子，打开B站，于视频中将那冰感下肚，并美美的打个长嗝，才会满足。日复一日，渐渐成了习惯，原来日子就是这样，怎么过都会过，可惜了我哪些让人热血沸腾的完美想法与计划，终究是难以实现，一场空。  </p><p>落空就落空吧，我还会继续幻想，毕竟不甘于认输，大不了换个思路。很多事，难以坚持，就暂不坚持，去做些真正喜欢的，无需计划与安排，随时能做，随时想做的事。时间很少，事情很多，如码字，读书，记单词，骑车，飞盘，跑步，唱歌跳舞，与人聊天，挑些兴致满怀的，咋做都行。何必去硬吃领导画的饼，并在意它呢、他们玩嘴，我不玩，他们不喜欢你，那我自然也讨厌他们，苟着，用最小的代价去对付他们，就是尽量少接触，学会拒绝，找其练练手，也蛮有意思的。</p><p>突然发觉，当我不用去考虑他人感受的时候，我TM是最爽的。对旁人的眼光与评价都毫不在意时，我最舒服了。就像独处时，听歌摇摆，看视频大笑。一人去陌生的城市，肆意穿搭，随意瞎转，都是我难以忘怀的快乐呀。懂了，对付烂人、烂事最好的方式，就是不予理睬，有机会哪里练演技、练脸皮，练胆量也不错。</p><p>烦恼的人有对策，烦恼的事自然少了，正经事、好事、乐事的比例就高了。我那异想天开之事，完成的概率也跟着倍增。</p><p>在开心的时刻，就做最想做的事，这样会更开心，然后才也有精神去对付烂事~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;明明知道要做什么，怎么去做，却一再拖延至放弃，然后懊恼、悔恨、反思。接着会去制定计划，并幻想着完成时刻的兴奋与骄傲。但计划总是会变，变得很快，很决然，令人无法阻止，也无法理解为何如此？明明心有渴望，也不缺激情，却在要做的那一刻突然变卦，冒出无数理由，这次就算了，做与不做没差</summary>
      
    
    
    
    <category term="摸鱼散文" scheme="https://better-jiang.github.io/categories/%E6%91%B8%E9%B1%BC%E6%95%A3%E6%96%87/"/>
    
    
    <category term="反思怪" scheme="https://better-jiang.github.io/tags/%E5%8F%8D%E6%80%9D%E6%80%AA/"/>
    
  </entry>
  
  <entry>
    <title>困</title>
    <link href="https://better-jiang.github.io/2023/03/20/%E5%9B%B0/"/>
    <id>https://better-jiang.github.io/2023/03/20/%E5%9B%B0/</id>
    <published>2023-03-20T03:43:04.000Z</published>
    <updated>2023-05-22T11:24:40.321Z</updated>
    
    <content type="html"><![CDATA[<p>好困，想睡觉，却不得，因为正在上班，强撑眼皮，以保持非闭眼状态。十分难受，渴望回到房子，拉上窗帘，盖上被子，头枕软枕，心无负担与烦恼的躺着，悄悄进入梦乡，直至自然醒来。<br>我太需要如此睡眠了。有小半年没好好睡觉了，大都熬夜至2点多，通宵次数也有5、6次。白天无精打采，面容尽显老态，松弛憔悴，全无气色。没有运动，没有健康饮食。有的时暴饮暴食，终日碳酸饮料，重油重盐，体重也剧增，已突破140。总之，身体之疲惫，状态之萎靡，心态之槽糕都令自己无法原谅，必须做出改变。<br>生活为啥过成这样？能否制止并做出改变？一味的逃避现实，躲着周周的人与事，漠不关心，得过且过着，慢慢滑落至深渊，不见天日。<br>是不是想太多，而做太少？是不是太过焦虑，太过理想化？有很多不可控，导致不达预期，从而失落挫败，甚至自我怀疑，信仰崩坍。<br>想好好讲话聊天，却担心浪费了时间，不愿主动。<br>想好好锻炼身体，改变穿搭，一改之前土气，却常常半途而废，并自我原谅。<br>明明知道沉没成本，却依旧拿过去来影响，伤害当下的自我，势要去弥补，强行不留遗憾。<br>道理都懂，却过不好一生。犹犹豫豫，唯唯诺诺，陷入失落和悔恨的泥沼，越挣扎，陷越深。幻想有超人帮助，救我出去。</p><p>很迷惑，不知要往哪个方向在努力一番？当up主，写作出视频；学英语，跳槽至外企；转web3，找远程职位；完成硕士项目，偏大数据+工程；创业，做独立开发者；考CFA，平安转岗；<br>不关怎样，也就是这两年时间，2024年底，得有所收获？否则，后面中年负担就要来了。要照顾父母，要组建家庭，要生儿育女。要保证自我身体。时间真的不多，目标也十分明确，不可能在去变了。剩下的就是去做规划，去执行，去复盘调整，去收获成功，别无退路。<br>从此刻开始，认真起来，收起无所谓的态度。全心全意的对待当下的每一件小事，每一个决定，每一个思想的松动，每一次的睡觉，每一次的吃饭运动，每一次和好友的聊天。有准备，有计划，有复盘，有收获。<br>今天回去的路上理发，收拾房间，把喜好的袜子夹起来，晾出去。厚衣服洗了，永不会穿的衣服扔了。图书馆借的书找到，感兴趣的认真看下，明天还了。</p><p>至下班前，英语语法-定语从句，做笔记。学习TS的 module &amp; namespaces 模块。珍惜当下，不要在意周围人怎么看你，只要把本质工作做好，做优秀，做到其无话可说，或许也不用，我为何要在意他们怎么看呢？如果为了面子，大可不必，如果为了绩效，其重要程度也应该处于次位。所以，大胆的去做，去朝向目标前进，勇往直前，永远自信阳光。<br>不要去抱怨，周围没人帮助你，或者周围人不与你同频共振。想办法去解决，去尝试帮助他们，如果太累就远离，不予理睬。非要合作不可，难免委屈，也要乐观以对，万不可影响自己的心态，从而毁了一日安排。一日不可失，失不再来。</p><p>学英语，转web3，在线硕士项目+大数据，考CFA，甚至创业，写作，做视频，这些并不冲突。其实是相辅相成的，一体的。CFA需要大数据,web3工作也更需要金融知识加持，而这些知识都必须学好英语。写作，做视频，也可以用英语，当个英语up主，以写作，拍视频记录自己的学习成长过程，更能认清自我，更易坚持。</p><p>当有计划，倒计时5.4.3.2.1，就开始行动吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好困，想睡觉，却不得，因为正在上班，强撑眼皮，以保持非闭眼状态。十分难受，渴望回到房子，拉上窗帘，盖上被子，头枕软枕，心无负担与烦恼的躺着，悄悄进入梦乡，直至自然醒来。&lt;br&gt;我太需要如此睡眠了。有小半年没好好睡觉了，大都熬夜至2点多，通宵次数也有5、6次。白天无精打采，面</summary>
      
    
    
    
    <category term="摸鱼散文" scheme="https://better-jiang.github.io/categories/%E6%91%B8%E9%B1%BC%E6%95%A3%E6%96%87/"/>
    
    
    <category term="残酷物语" scheme="https://better-jiang.github.io/tags/%E6%AE%8B%E9%85%B7%E7%89%A9%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>韩愈引发的一点感想</title>
    <link href="https://better-jiang.github.io/2023/02/23/%E9%9F%A9%E6%84%88%E5%BC%95%E5%8F%91%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3/"/>
    <id>https://better-jiang.github.io/2023/02/23/%E9%9F%A9%E6%84%88%E5%BC%95%E5%8F%91%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3/</id>
    <published>2023-02-23T09:02:15.000Z</published>
    <updated>2023-05-22T11:24:40.321Z</updated>
    
    <content type="html"><![CDATA[<p>韩愈是辛苦的，固执的，是不会享受生活的。在有很多选择的情况下，他还是选择了令己痛苦不堪，妄想改造社会，兼济天下的路。父母早逝，从小被嫂嫂养大，童年不顺，却努力读书，踏上仕途，随屡遭贬谪，但仍旧自我。倡导古文运动，文以载道，敢讲真言，深知百姓疾苦，愿为其发声。这样的韩愈，我是在今日地铁上看书后才得知，才有感于其的不易与伟大，想更深入的去了解他。</p><p>其实学生时期的语文教材中的《师说》，《马说》，《早春呈水部张十八员外》就是他的作品，现在都记忆深刻。当时学习时，也被深深触动，有种被点醒之感。现在看来，就理解了“文以载道”，文章内容才是最重要的，得有思想，有观点，有事实，形式美与否不重要。</p><p>《师说》告诉我，人并非一出生就懂得知识道理，人都有疑惑？有疑惑，要向老师请教学习，否则疑惑永远都不能解开。每个人都有值得学习的地方，也不必因不会某事而自卑，去学习就是了。即“三人行，必有我师。是故弟子不必不如师，师不必贤于弟子，闻道有先后，术业有专攻，如是而已”。<br>《马说》让我明白了“千里马常有，而伯乐不常有”，多去看他人优点，勿要纠结于他人缺点而不愿与其交往。    </p><p>而现阶段的我，想写好文章，想表达，想被更多的人看到，想得到他人的认可。自认为是匹千里马，也渴望成为千里马，却有着不遇伯乐的可悲遭遇，自我痛惜，他人不知。</p><p>明天就要换组了，新的任务，新的同事，未知的挑战，我想证明自己，想做出成就。就像韩愈一样，苦难缠身，但理想不改，长久坚持，一直做事。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;韩愈是辛苦的，固执的，是不会享受生活的。在有很多选择的情况下，他还是选择了令己痛苦不堪，妄想改造社会，兼济天下的路。父母早逝，从小被嫂嫂养大，童年不顺，却努力读书，踏上仕途，随屡遭贬谪，但仍旧自我。倡导古文运动，文以载道，敢讲真言，深知百姓疾苦，愿为其发声。这样的韩愈，我是</summary>
      
    
    
    
    <category term="摸鱼散文" scheme="https://better-jiang.github.io/categories/%E6%91%B8%E9%B1%BC%E6%95%A3%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>近日的一些负能量</title>
    <link href="https://better-jiang.github.io/2023/02/21/%E8%BF%91%E6%97%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B4%9F%E8%83%BD%E9%87%8F/"/>
    <id>https://better-jiang.github.io/2023/02/21/%E8%BF%91%E6%97%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B4%9F%E8%83%BD%E9%87%8F/</id>
    <published>2023-02-21T09:01:54.000Z</published>
    <updated>2023-05-22T11:24:40.320Z</updated>
    
    <content type="html"><![CDATA[<p>周一飞盘局的状态很差，喘的厉害，胸腹部有种撕裂感。小腿也隐约抽筋，跑不动了。最后还把脚踝扭到，周六的jumble赛也没法参加。</p><p>预想着周六脚踝能好些，在jumble赛有好的发挥，同队友愉快的、友好的交流，治一治我的”社恐”顽疾。结果周六时，脚踝恢复不理想，不能跑，更不能上场。</p><p>更心烦的事，被选中当队长。得知消息后，瞬间不爽，害怕恐怖之感油然而生。没有队长经验，不知所措。虽然玩盘多年，但技术一般，绝对没有能凭一己之力左右比赛的能力，何况脚踝有伤，尚不能跑。除外，社恐的我，更怕去面对陌生队友，需要拉微信群、沟通比赛事宜、组织热身、讲解战术、提醒鼓励等，这些我都做不了，也不愿做。</p><p>还有一件事，也困扰着我。母亲在家乡为我卖房，缴了1万定金，后面谈不拢，房地产公司不给退，还一直拖延，态度很差。写了州长信，有市住建部的人帮忙协商，对方依旧找理由，拖着不给退还，无奈得走法律途径。</p><p>周末的时间也没能好好利用，把拉下的英语学习任务补上。不知为啥？又玩起来LOL大乱斗，一样就是整整30多个小时，从周日下午知道周一晚7点左右，通宵熬夜，暴饮暴食，身体发冷，嗓音深哑，意识模糊，心发慌，忧心忡忡，害怕自己会出事，猝死，无人知。</p><p>艾力英语，也过了三分钟的热度，慢慢放弃，没能坚持跟着学习，一切似乎又回到老样子，浑浑噩噩的，麻木的，没有任何新意的日子。</p><hr><p>要如何解决呢？得改变，得坚持改变，一天的一天，直到成功为止。</p><p>飞盘要多练习，多和队友交流，正常的交流，大胆传盘，不怕出丑出错。</p><p>少吃，尤其是晚上，多去运动，有规律的运动，骑车、跑步，拉伸。</p><p>再写一封州长信，看看对方反应，准备走法律途径，趁此机会也学学法。</p><p>散文也要多写，想写什么就写什么，深入自我，了解自我最真实感受，多反思，多思考。</p><p>英语得坚持输出，录音、视频，多写，多说。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;周一飞盘局的状态很差，喘的厉害，胸腹部有种撕裂感。小腿也隐约抽筋，跑不动了。最后还把脚踝扭到，周六的jumble赛也没法参加。&lt;/p&gt;
&lt;p&gt;预想着周六脚踝能好些，在jumble赛有好的发挥，同队友愉快的、友好的交流，治一治我的”社恐”顽疾。结果周六时，脚踝恢复不理想，不能</summary>
      
    
    
    
    <category term="摸鱼散文" scheme="https://better-jiang.github.io/categories/%E6%91%B8%E9%B1%BC%E6%95%A3%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>痛定思痛的反思</title>
    <link href="https://better-jiang.github.io/2023/02/13/%E7%97%9B%E5%AE%9A%E6%80%9D%E7%97%9B%E7%9A%84%E5%8F%8D%E6%80%9D/"/>
    <id>https://better-jiang.github.io/2023/02/13/%E7%97%9B%E5%AE%9A%E6%80%9D%E7%97%9B%E7%9A%84%E5%8F%8D%E6%80%9D/</id>
    <published>2023-02-13T07:22:47.000Z</published>
    <updated>2023-05-22T11:24:40.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="被浪费掉的周末"><a href="#被浪费掉的周末" class="headerlink" title="被浪费掉的周末"></a>被浪费掉的周末</h3><p>年后的第二个周末，本打算将脏乱无序、垃圾四散的房间好好打扫收拾一番，把堆积如小山的脏衣服洗一洗，地板好好拖一下，卫生间墙壁刷净，过期的事物、看不上的衣物扔掉。另外，恶补一下cs430的课程，去制作B站的首个视频，看艾力英语的录播课。可是，这都落空了，一个都做成。周六上午起床，刷刷视频至下午，后来莫名其妙的下载了LOL，想着玩上几局，看看游戏有啥新变化。结果一发不可收拾，从周六晚11点左右，玩到周日晚9点多，连续22个小时。没有睡觉，没有下楼，没有早、中、晚餐，没有天黑天亮，没有洗澡刷牙，没有喝正常的水。吃光房子有的零食，喝完15瓶AD奶，又点外卖，饮料奶茶，进游戏间期去上厕所，上厕所时也刷着手机。</p><h4 id="有所反思？"><a href="#有所反思？" class="headerlink" title="有所反思？"></a>有所反思？</h4><p>不反思，心里的坑过不去，会深深自责，无法原谅自己。我怎么会这样？更害怕以后会一直如此。所有，我必须去反思，最好是写篇随笔，流些眼泪。似乎只有这样，我才能心安，尽快翻篇，否则会因此难受低落多人，会怀疑自己本质上就懒，没追求，怕吃苦，鄙视自己，竟活成了自己最讨厌的样子。</p><p>现在看来，如此反思就是自我安慰，自我谅解的一种手段罢了。因为后来此种剧情上演了无数次。无视可做的周末选择了玩LOL，刷手机，工作时间摸鱼敷衍，下班后亦是漫无目的的刷B站视频，不时查看关注的UP主状态，深怕漏掉高质量的视频。感觉时间很多，不知要感些什么，那就先删会B站吧。</p><p>一次的计划落空，一次次的自责反省，一次次的再制定新计划，一次次的打上鸡血。到底是什么在阻止自己去自律、去落实计划，去慢慢实现梦想？今天又找到了理由，就是没有一个明显的正反馈，计划周期太长了，一周做不到，一天按做好所有计划，得奖励自己。比如打把游戏，吃顿好的。一周做到了，奖励自己看场电影、找好友玩耍。一月做到了，奖励一次短途旅行。半年做到了，买台长途单车。9个月做到了，国庆节来此长途旅行。</p><p>过去的就过去了，暂时放下。反思过，那么得来点作用，就从完成今天计划做起吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;被浪费掉的周末&quot;&gt;&lt;a href=&quot;#被浪费掉的周末&quot; class=&quot;headerlink&quot; title=&quot;被浪费掉的周末&quot;&gt;&lt;/a&gt;被浪费掉的周末&lt;/h3&gt;&lt;p&gt;年后的第二个周末，本打算将脏乱无序、垃圾四散的房间好好打扫收拾一番，把堆积如小山的脏衣服洗一洗，地板</summary>
      
    
    
    
    <category term="摸鱼散文" scheme="https://better-jiang.github.io/categories/%E6%91%B8%E9%B1%BC%E6%95%A3%E6%96%87/"/>
    
    
    <category term="反思怪" scheme="https://better-jiang.github.io/tags/%E5%8F%8D%E6%80%9D%E6%80%AA/"/>
    
  </entry>
  
  <entry>
    <title>我被父母买房啦！</title>
    <link href="https://better-jiang.github.io/2023/02/07/%E6%88%91%E8%A2%AB%E7%88%B6%E6%AF%8D%E4%B9%B0%E6%88%BF%E5%95%A6!/"/>
    <id>https://better-jiang.github.io/2023/02/07/%E6%88%91%E8%A2%AB%E7%88%B6%E6%AF%8D%E4%B9%B0%E6%88%BF%E5%95%A6!/</id>
    <published>2023-02-07T07:44:20.000Z</published>
    <updated>2023-02-07T10:56:57.962Z</updated>
    
    <content type="html"><![CDATA[<p>虽然题目读起来很开心，甚至有些激动，但这些大多是父母的，因为孩子有房了，无形中增加其谈恋爱的底气，离结婚生子也更进一步了。<br>可对我而言，有种隐隐的失落感。自己离家打拼无果，大概率，未来的几年生活、事业也依旧没有起色。丧气与无措的时间越来越多，无助感随着年龄的增长，也越来越强。如今渐渐成了年少时极其讨厌的“啃老”之人。</p><p>想和父母摊牌，毅然决然的拒绝任何资助，希望父母能放手，少些辛劳，保重身体，去做些高兴的事，去找老伙伴聊聊天、散散步、跳跳舞，去旅游，去外面的世界看看。但此刻的他们万万是做不到的，孩子们一个个尚未成家，且全无美目，为此每每和他人谈及时还会心生羞愧，颇感丢脸。因为长辈们认为对谁家孩子没结婚，就代表没其本事，其父母也没本事。</p><p>我极其能理解父母会因子女未结婚之事而觉没面子，低人一等，更糟糕的是，父母都是爱面子，争强好胜，自尊心极强之人，那种羞耻感只会比我想象的更强烈。所以他们会千方百计地，不厌其烦地劝诫我早日成家，事业、追求、理想都不重要，甚至会开始反思其打小教育孩子的方式是否有问题，为什么不会谈恋爱？这一点是绝对是致命的，因为在团了，我们姐弟三个就是“别人家的孩子”，学习好，懂事，勤快，上进，争气，会干农活，从未惹事。每每大人谈及孩子时，都会夸我们，也会夸父母教子有方，羡慕不已。</p><p>而今团里同龄的孩子都长大，他们一个个结婚、生子。父母一次次的去吃席随礼，在饭桌上，在去与回的路上，在田间地头，在每一次照面时，都可能被问及，“你家孩子结婚了吗？干啥工作呢？”。</p><p>父母给我买房了，以不辞辛苦的劳作，难以理解的节俭，竭尽全力的付出换来。我很难受，也不好拒绝，否则他们会更难受。我也不得不好好思考一下自己的路，该怎么走？ 要不要回疆发展？要不要去结婚？ 要不要离职？ 要不要在博一次？   </p><p>要不要去改变自我，去认清现实，学习现实？要不要去伪装一下，去表演的工作更积极，努力，走进领导，向上管理？<br>要不要固执到底，选择那条更难的路，坚持去做，努力调整改变，直到有所收获？</p><p>此刻的我想全要，在公司无牵无挂的、无欲无求的，尽可能的支棱起来，啥都去尝试一下。在下班，认真做事，反复复盘总结，不懈地输出。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虽然题目读起来很开心，甚至有些激动，但这些大多是父母的，因为孩子有房了，无形中增加其谈恋爱的底气，离结婚生子也更进一步了。&lt;br&gt;可对我而言，有种隐隐的失落感。自己离家打拼无果，大概率，未来的几年生活、事业也依旧没有起色。丧气与无措的时间越来越多，无助感随着年龄的增长，也越</summary>
      
    
    
    
    <category term="摸鱼散文" scheme="https://better-jiang.github.io/categories/%E6%91%B8%E9%B1%BC%E6%95%A3%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>继续生活</title>
    <link href="https://better-jiang.github.io/2023/02/03/%E7%BB%A7%E7%BB%AD%E7%94%9F%E6%B4%BB/"/>
    <id>https://better-jiang.github.io/2023/02/03/%E7%BB%A7%E7%BB%AD%E7%94%9F%E6%B4%BB/</id>
    <published>2023-02-03T12:19:45.000Z</published>
    <updated>2023-02-07T10:56:57.962Z</updated>
    
    <content type="html"><![CDATA[<p><strong>不管如何，是开心，还是失落，难过，无助，无可奈何？</strong><br><strong>生活总要继续，没有选择。</strong><br>既然别无选择，何不欣然接受。<br>心情好与坏，今天都会过去。<br>工作上，担忧和自在，今天也都会下班。<br>学习不，晨读不，看视频不，做作业不？<br>其实都有的选，怎样选，如何做，计划好的截止日一定会来，<br>成果如何，该后悔，还是恭喜，也造就注定了。<br>因为你欺骗不了自己，永远都不会。<br>所以，好好生活，认真点，用心点，多做些准备，<br>那幻想中的一刻来临时，<br>那预料之外的不幸突袭而至时，<br>那计划好的结果，一步步靠近时，<br>才不致慌张无措，悲喜无常。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;不管如何，是开心，还是失落，难过，无助，无可奈何？&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;生活总要继续，没有选择。&lt;/strong&gt;&lt;br&gt;既然别无选择，何不欣然接受。&lt;br&gt;心情好与坏，今天都会过去。&lt;br&gt;工作上，担忧和自在，今天也都会下班。&lt;br&gt;学</summary>
      
    
    
    
    <category term="摸鱼散文" scheme="https://better-jiang.github.io/categories/%E6%91%B8%E9%B1%BC%E6%95%A3%E6%96%87/"/>
    
    
    <category term="一碗鸡汤" scheme="https://better-jiang.github.io/tags/%E4%B8%80%E7%A2%97%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>js疑难治愈</title>
    <link href="https://better-jiang.github.io/2022/08/20/js%E7%96%91%E9%9A%BE%E6%B2%BB%E6%84%88/"/>
    <id>https://better-jiang.github.io/2022/08/20/js%E7%96%91%E9%9A%BE%E6%B2%BB%E6%84%88/</id>
    <published>2022-08-20T00:50:12.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<h3 id="typeof、instanceof-检测数据类型"><a href="#typeof、instanceof-检测数据类型" class="headerlink" title="typeof、instanceof 检测数据类型"></a>typeof、instanceof 检测数据类型</h3><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p><a href="https://262.ecma-international.org/13.0/#sec-typeof-operator">ecma-262 / typeof operator</a></p><table><thead><tr><th>typeof val</th><th>Result</th></tr></thead><tbody><tr><td>Undefined</td><td>“undefined”</td></tr><tr><td>Null</td><td>“object”</td></tr><tr><td>Boolean</td><td>“boolean”</td></tr><tr><td>Nubmer</td><td>“number”</td></tr><tr><td>String</td><td>“string”</td></tr><tr><td>Symbol</td><td>“symbol”</td></tr><tr><td>BigInt</td><td>“bigint”</td></tr><tr><td>Object (does not implement [[Call]])</td><td>“object”</td></tr><tr><td>Ojbect  (implements [[Call]])</td><td>“function”</td></tr></tbody></table><h4 id="Instanceof"><a href="#Instanceof" class="headerlink" title="Instanceof"></a>Instanceof</h4><p><strong><code>object instanceof constructor</code> 检测构造函数的<code>prototype</code> 属性是否出现在某个实例对象的原型链上</strong> </p><p><strong>注意：一个对象的原型链是会改变的</strong></p><p> 如果<code>obj instanceof Foo</code>返回 <code>true</code>，并不意味着该表达式会永远返回<code>true</code>，因为：</p><ul><li><code>Foo.prototype</code>属性的值可能会改变，改变之后的值可能不存在于<code>obj</code>的原型链上，此时原表达式的值就会为<code>false</code></li><li>对象obj的原型链也可能改变，借助<code>__proto__</code>伪属性，可以改变对象的原型链。<code>obj.__proto__=&#123;&#125;</code>，则<code>obj instanceof Foo</code>返回false</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a =  <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">a <span class="keyword">instanceof</span> A; <span class="comment">// true, Object.getPrototypeOf(a)  === A.prototype; A.protoptype.isPrototypeOf(a) 返回true； </span></span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true, </span></span><br><span class="line"></span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> = &#123;&#125;;  <span class="comment">// 设置 A.prototype 指向一个空对象</span></span><br><span class="line"><span class="keyword">let</span> a2 = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">a2 <span class="keyword">instanceof</span> A; <span class="comment">// true</span></span><br><span class="line">a <span class="keyword">instanceof</span> A;  <span class="comment">// fasle,  A.prototype 指向了一个空对象，这个空对象不在a 的原型链上</span></span><br><span class="line"></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">A</span>();  <span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">let</span> a3 = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">a3 <span class="keyword">instanceof</span> B; <span class="comment">// true</span></span><br><span class="line">a3 instancof A;  <span class="comment">// true, 因为 A.prototype 在 a3 的原型链上</span></span><br></pre></td></tr></table></figure><h3 id="数据的存储形式-堆栈"><a href="#数据的存储形式-堆栈" class="headerlink" title="数据的存储形式-堆栈"></a>数据的存储形式-堆栈</h3><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><ul><li>自动分配的内存空间，在代码执行过程中自动释放。 </li><li>在栈区内存会创建一个JS代码执行的环境，<strong>作用域、函数的调用</strong>都在栈内存中执行。</li><li>JS的基本数据类型，占用空间大小固定，其值是直接保存在栈内存中，按值访问。</li><li>对于Ojbect的引用类型，其<strong>指针</strong>存储在栈内存中，<strong>指向堆内存</strong>的实际地址，通过<strong>引用访问</strong></li></ul><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul><li><p>动态分配堆内存，大小不定，不会自动释放。</p></li><li><p>堆内存中存储实际对象，在栈内存中存储对象的指针。对象的访问是<strong>按引用访问</strong>的</p></li><li><p>在堆区的内存不会自动释放，需要实现垃圾回收机制（GC）</p><p>因为在栈区指向的变量等是通过值访问的，当前作用域销毁后变量也就随之销毁，而使用引用访问是堆区变量，在作用域消失后，可能在外层作用域仍然存在引用，不能直接销毁，此时就需要判断此变量是否属于不再需要的变量，从而决定是否进行内存回收。</p></li><li><p>在Js中主要有 <strong>引用计数</strong> 和 <strong>标记清除</strong> 两种垃圾回收算法</p></li></ul><h3 id="深、浅拷贝"><a href="#深、浅拷贝" class="headerlink" title="深、浅拷贝"></a>深、浅拷贝</h3><ul><li><p>递归方式 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅 实现 数组、对象的深拷贝，其它 例如Date,Fucntion, RegExp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cloneDeep</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> objClone = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(obj[key] &amp;&amp; type <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          objClone[key] = <span class="title function_">cloneDeep</span>(obj[key]);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          objClone[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> objClone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Object.assign(),  <strong>仅深拷贝对象的一级属性</strong></p></li><li><p>$.extend(true,{},{a:1,b:2})</p></li><li><p>loadsh.cloneDeep()</p></li></ul><h3 id="编码、解码使用场景"><a href="#编码、解码使用场景" class="headerlink" title="编码、解码使用场景"></a>编码、解码使用场景</h3><p>在URL地址，不允许出现非ASCII字符，如果URL地址中包含中文字符，就必须堆中文字符进行编码（转义）</p><h5 id="encodeURI-encodeURIComponent"><a href="#encodeURI-encodeURIComponent" class="headerlink" title="encodeURI()  /     encodeURIComponent()"></a>encodeURI()  /     encodeURIComponent()</h5><ul><li><p>encodeURI 通常用于转码整个 URI， 其不会进行编码的字符包括<code>; , / ? : @ &amp; = + $ - _ . ! ~ * &#39; ( ) #</code></p></li><li><p>encodeURIComponent ，仅用于转码 URI的组成部分（？后面的参数）， 其不会进行编码的字符包括 <code>- _ . ! ~ * &#39; ( ) </code></p></li><li><p>如果使用 encodeURIComponent 对整个URL进行编码，<code>/ :</code>字符会被编码； 使用 encodeURL 对整个URL进行编码，<code>&amp; + =</code>不会别编码，这GET、POST请求中是特殊字符，应该被编码。所以正确方法，<strong>使用 encodeURIComponent,仅对参数进行编码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;https://developer.mozilla.org/en-US/search?q=闭包&amp;a=123&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURI</span>(url)); <span class="comment">// https://developer.mozilla.org/en-US/search?q=%E9%97%AD%E5%8C%85</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURIComponent</span>(url)); <span class="comment">// https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fsearch%3Fq%3D%E9%97%AD%E5%8C%85</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="string">&quot;https://developer.mozilla.org/en-US/search?q=&quot;</span> +</span><br><span class="line">    <span class="built_in">encodeURIComponent</span>(<span class="string">&quot;闭包&amp;a=123&quot;</span>)</span><br><span class="line">);    <span class="comment">// https://developer.mozilla.org/en-US/search?q=%E9%97%AD%E5%8C%85%26a%3D123</span></span><br></pre></td></tr></table></figure><ul><li><strong>为避免服务器收到不可预知的请求，对任何用户的输入作为URI部分的内容都需要encodeURIComponent 进行转义</strong>。例如，用户可能输入<code>闭包&amp;a=123</code>作为参数q的值，如果不对此内容进行转义，服务器得到的将是<code>q=闭包&amp;a=123</code>,即两个键值对（q=闭包，a=123），而不是一个键值对(q=闭包&amp;a=123)</li></ul></li></ul><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>隐式类型转换 是在一定场景下，js运行环境会自动调用👇🏻几个方法，尝试转换成期望的数据类型</p><ul><li><p>ToString, 其他类型的值转换为字符串类型</p><ul><li>null， “null”</li><li>undefined，”undefined”,</li><li>布尔类型，”true”, “false”</li><li>数字类型，10，”10”, 1e21 , “1e+21”</li><li>数组，相当于调用<code>Array.prototype.join()</code>方法，[1,2,3] 转换 “1,2,3”, 空数组[]转换为空字符串’’， <strong>数组中的null,undefined，会被当做 <code>&quot;&quot;</code>空字符串处理</strong></li><li>对象，相当于调用<code>Object.prototype.toString()</code>，返回”[object Object]”</li></ul></li><li><p>ToNumber</p><ul><li>null, 0</li><li>undefined， NaN</li><li>字符串，纯数字形式，转换为对应的数字，空字符串转换为0， 否则按失败处理，转换为 NaN</li><li>数组，首先会被转换为原始类型（ToPrimitive）,然后在根据转换后的原始类型处理</li></ul></li><li><p>ToBoolean</p><p>js中的假值，只有 <code>false</code>,<code>null</code>,<code>undefined</code>,<code>&quot;&quot;</code>,<code>0</code>,<code>NaN</code>， 其它值转化为布尔值都为true</p></li><li><p>ToPrimitive，  <strong>对象类型（对象、数组）转化为原始类型的操作</strong></p><ul><li>当对象类型需要转化为原始类型时，会向查找对象的<code>valueOf</code>方法，如果<code>valueOf()</code>方法返回原始类型的值，则结果就是该值</li><li>如果对象的<code>valueOf()</code>不存在，或者<code>valueOf()</code>方法返回的不是原始类型的值，则会去调用对象的<code>toString()</code>方法，且遵循对象的<code>ToString</code>规则，则<code>toString()</code>的返回值作为<code>ToPrimitive</code>的结果</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;typeof、instanceof-检测数据类型&quot;&gt;&lt;a href=&quot;#typeof、instanceof-检测数据类型&quot; class=&quot;headerlink&quot; title=&quot;typeof、instanceof 检测数据类型&quot;&gt;&lt;/a&gt;typeof、instanc</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="面试" scheme="https://better-jiang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>小白笔记-grunt</title>
    <link href="https://better-jiang.github.io/2022/08/13/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-grunt/"/>
    <id>https://better-jiang.github.io/2022/08/13/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-grunt/</id>
    <published>2022-08-13T01:56:40.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<p>Grunt 侧重对整个过程的控制管理，是任务类型的的打包工具，代码检查、预编译、合并压缩；生成雪碧图、sourceMap、版本管理；运行单元测试、监控等。</p><h4 id="Grunt-执行异步任务"><a href="#Grunt-执行异步任务" class="headerlink" title="Grunt 执行异步任务"></a>Grunt 执行异步任务</h4><ul><li>执行异步任务的回调函数不能使用箭头函数</li><li>异步任务完成需要调用任务内置函数告知已经完成</li></ul><h4 id="Grunt-标记任务失败"><a href="#Grunt-标记任务失败" class="headerlink" title="Grunt 标记任务失败"></a>Grunt 标记任务失败</h4><ul><li>同步任务通过 <strong>return false</strong>来标记任务失败</li><li>异步任务通过内置函数 done 传递 false 参数 ***done(false)**来标记任务失败</li><li>如果多任务执行，只要标记任务失败，后续任务将不在执行。添加 <code>--force</code>选项，会强制执行后续任务</li></ul><h4 id="Grunt-设置配置"><a href="#Grunt-设置配置" class="headerlink" title="Grunt 设置配置"></a>Grunt 设置配置</h4><ul><li>使用 <code>initConfig</code> 方法去配置参数</li><li>使用 <code>grunt.config</code> 方法来获取参数</li></ul><h4 id="Grunt-插件使用"><a href="#Grunt-插件使用" class="headerlink" title="Grunt 插件使用"></a>Grunt 插件使用</h4><ul><li>Grunt 插件命名规则 <code>grunt-contrib-任务名</code> 或 <code>grunt-任务名</code></li><li>Grunt 常用插件 样式预编译、JS编译、文件监听</li><li>使用插件前，需要使用**<code>loadNpmTasks</code>**方法加载插件，然后才可以使用。<code>load-grunt-tasks</code>插件可自动加载所有插件</li></ul><h4 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h4><p>npx是一个npm包执行器，有如下特点：</p><ul><li><p>临时安装可执行依赖包，不用全局安装，故不用担心长期的污染</p></li><li><p>可以执行依赖包中的命令，安装完成自动运行</p></li><li><p>自动加载 <code>node_modules</code>中依赖包，而无需指定<code>$PATH</code>,还可以指定node.js版本，命令的版本。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 指定uglify-js 版本，npx 运行时，会到node_modules/.bin路径 和 环境变量$PATH里检查命令是否存。</span><br><span class="line">// 如果找不到，会临时安装，然后执行</span><br><span class="line">npx uglify-js@3.1.0 ./test/test_npx.js -o ./test/haha.js</span><br><span class="line"></span><br><span class="line">//  指定node版本的</span><br><span class="line">npx -p node@8 npm run build</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><p>Gulp在4.0版本之后，无需引入gulp，然后在注册任务才可以调用，现在可直接通过exports导出任务。且<strong>取消了同步任务</strong>，约定每次任务执行完成后，都要调用回调函数的方法参数才可以。</p><h3 id="Gulp-异步任务的多种形式"><a href="#Gulp-异步任务的多种形式" class="headerlink" title="Gulp 异步任务的多种形式"></a>Gulp 异步任务的多种形式</h3><ul><li><ol><li>回调函数，<br>标记任务失败，在方法done中传入错误对象。<strong>其后面的任务也不会在执行</strong></li></ol></li><li><ol start="2"><li>promise<br>Promise.resolve() 任务成功； Promise.reject() 任务失败</li></ol></li><li><ol start="3"><li>async、await</li></ol></li><li><ol start="4"><li>使用gulp读取文件操作时，返回文件流，gulp会自动在流上注册一个end事件</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回文件流 </span></span><br><span class="line">    <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">stream</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> readstream = fs.<span class="title function_">createReadStream</span>(<span class="string">&quot;package.json&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> writestream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&quot;temp.txt&quot;</span>);</span><br><span class="line">        readstream.<span class="title function_">pipe</span>(writestream);</span><br><span class="line">        <span class="keyword">return</span> readstream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">stream2</span> = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> readstream = fs.<span class="title function_">createReadStream</span>(<span class="string">&quot;package.json&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> writestream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&quot;temp2.txt&quot;</span>);</span><br><span class="line">        readstream.<span class="title function_">pipe</span>(writestream);</span><br><span class="line">        readstream.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">done</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="gulp-文件操作"><a href="#gulp-文件操作" class="headerlink" title="gulp 文件操作"></a>gulp 文件操作</h3><p>Gulp使用 <code>src</code>方法匹配到源文件，然后通过node.js的<code>pipe</code>将文件流 输送到 gulp插件（编译，压缩），最后通过<code>dest</code>方法，将编译好的文件输出到指定编译目录中。</p><p>webpack用于JavaScript应用程序的<strong>静态模块</strong>打包工具。他会在内部从一个或多个入口点构建一个依赖图（dependency graph）,然后将项目中所需要的每一个<strong>模块组合成一个或多个bundles</strong>,它们均为静态资源。<br>对webpack而言，一起文件都是一个个模块，根据个模块之间的依赖关系，对模块进行组合和打包，最终输出浏览器能使用的静态资源。</p><h4 id="context-基础目录"><a href="#context-基础目录" class="headerlink" title="context 基础目录"></a>context 基础目录</h4><ul><li>webpack的基础目录，必须是<strong>绝对路径</strong>，用于从配置中解析 入口点（entry）和 加载器（loader）,默认为<strong>当前目录</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;__dirname&#x27;</span>,__dirname);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="comment">// 基础目录 &quot;/home/project/webpack-config/config/src&quot;</span></span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;src&quot;</span>),</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础目录 为 <code>/home/project/webpack-config/config/src</code>, 运行 <code>npx webpack --config ./config/webpack.config-1.js</code>,会报错，找不到<code>./src/index.js</code>.</p><p><code>context</code>,<code>entry</code>做如下修改，在执行 npx webpack 命令，编译正常。由此可知，<strong>context 是作为 entry 和 loader 的 根目录</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;__dirname&#x27;</span>,__dirname);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;__filename&quot;</span>,__filename);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;../src&quot;</span>),</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./index.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="entry-入口文件"><a href="#entry-入口文件" class="headerlink" title="entry 入口文件"></a>entry 入口文件</h4><p>entry支持字符串、字符串数组、对象、函数类型</p><ul><li><p>string 类型</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry<span class="punctuation">:</span> <span class="string">&quot;./src/index.js&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串数组 类型<br>两个文件会合并打包为一个chunk文件</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/index.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;./src/calc/js&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p>对象类型<br>entry 对象有2个入口，入口 a 和 b, 通过 <strong>dependOn</strong> 配置 b 依赖于 a, 构建是会等 a构建完成后再启动b的构建。<br>entry 配置有多个入口文件，所以输出<code>output</code>的配置也要满足，使用<code>[name]</code>占位符来确保每个文件具有唯一代名称。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;..&quot;</span>),</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">            <span class="attr">dependOn</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">            <span class="attr">import</span>: <span class="string">&quot;./src/calc.js&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">a</span>: <span class="string">&quot;./src/index.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="output-输出"><a href="#output-输出" class="headerlink" title="output 输出"></a>output 输出</h4><p>output属性最低要求，设置为一个对象，配置输出文件的文件名,默认输出目录<code>dist</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果配置2个或多个入口文件，则应该使用 <strong>占位符</strong>来保证每个文件具有唯一的名称</p><h5 id="生成-hash-文件名-例如-b-ec5d198e69-js"><a href="#生成-hash-文件名-例如-b-ec5d198e69-js" class="headerlink" title="生成 hash 文件名,  例如 b.ec5d198e69.js"></a>生成 hash 文件名,  例如 <code>b.ec5d198e69.js</code></h5>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;..&quot;</span>),</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">            <span class="attr">dependOn</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">            <span class="attr">import</span>: <span class="string">&quot;./src/calc.js&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">a</span>: <span class="string">&quot;./src/index.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[name].[contenthash:10].js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的hash 占位符有:</p><ul><li>hash, hash跟整个项目构建相关，每次构建生成的文件hash值都一样，只要项目中文件内容发生变化，hash值也会变化</li><li>contenthash, 由文件内容产生的hash值，内容不同产生的值也不一样</li><li>chunkhash, 每一次构建后生成的hash值都不一样，即使文件内容没有改变，<strong>不利于浏览器的缓存</strong></li></ul><h5 id="生成-umd-模式的文件"><a href="#生成-umd-模式的文件" class="headerlink" title="生成 umd 模式的文件"></a>生成 umd 模式的文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;..&quot;</span>),</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    <span class="comment">// output: &#123;</span></span><br><span class="line">    <span class="comment">//     library: &quot;lgUtils&quot;,</span></span><br><span class="line">    <span class="comment">//     libraryTarget: &quot;umd&quot;,</span></span><br><span class="line">    <span class="comment">//     filename: &#x27;[name].[hash:6].js&#x27;,</span></span><br><span class="line">    <span class="comment">//     path: path.resolve(__dirname,&quot;../dist&quot;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">library</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;lqUtils&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].[hash:6].js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>npx webpack --config ./config/webpack.config-6.js</code>, 生成 <code>main.7f77f8.js</code>js文件，新建index.html并引入打包后的js文件，控制台打印<code>lqUtils</code>,可看到输出结果。表面 打包的js文件是 <strong>umd</strong>格式，支持浏览器。 js文件如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span></span><br><span class="line"><span class="comment"> * This devtool is neither made for production nor for readable output files.</span></span><br><span class="line"><span class="comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span></span><br><span class="line"><span class="comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span></span><br><span class="line"><span class="comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span></span><br><span class="line"><span class="comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">webpackUniversalModuleDefinition</span>(<span class="params">root, factory</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>();</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>)</span><br><span class="line">  <span class="title function_">define</span>([], factory);</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">  <span class="built_in">exports</span>[<span class="string">&quot;lqUtils&quot;</span>] = <span class="title function_">factory</span>();</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  root[<span class="string">&quot;lqUtils&quot;</span>] = <span class="title function_">factory</span>();</span><br><span class="line">&#125;)(self, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span>  <span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/index.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, &#123;\n/* harmony export */   \&quot;a\&quot;: () =&gt; (/* binding */ a),\n/* harmony export */   \&quot;say\&quot;: () =&gt; (/* binding */ say)\n/* harmony export */ &#125;);\nconst say = (msg) =&gt; &#123;\n    return `hello $&#123;msg&#125;`;\n&#125;\nconst a = \&quot;jiang2\&quot;;\n\n\n//# sourceURL=webpack://lqUtils/./src/index.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>  &#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">// The require scope</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="keyword">var</span> __webpack_require__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line"><span class="comment">/******/</span>  (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span>   <span class="comment">// define getter functions for harmony exports</span></span><br><span class="line"><span class="comment">/******/</span>   __webpack_require__.<span class="property">d</span> = <span class="function">(<span class="params"><span class="built_in">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line"><span class="comment">/******/</span>     <span class="keyword">if</span>(__webpack_require__.<span class="title function_">o</span>(definition, key) &amp;&amp; !__webpack_require__.<span class="title function_">o</span>(<span class="built_in">exports</span>, key)) &#123;</span><br><span class="line"><span class="comment">/******/</span>      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, key, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: definition[key] &#125;);</span><br><span class="line"><span class="comment">/******/</span>     &#125;</span><br><span class="line"><span class="comment">/******/</span>    &#125;</span><br><span class="line"><span class="comment">/******/</span>   &#125;;</span><br><span class="line"><span class="comment">/******/</span>  &#125;)();</span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class="line"><span class="comment">/******/</span>  (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span>   __webpack_require__.<span class="property">o</span> = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, prop))</span><br><span class="line"><span class="comment">/******/</span>  &#125;)();</span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">/* webpack/runtime/make namespace object */</span></span><br><span class="line"><span class="comment">/******/</span>  (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span>   <span class="comment">// define __esModule on exports</span></span><br><span class="line"><span class="comment">/******/</span>   __webpack_require__.<span class="property">r</span> = <span class="function">(<span class="params"><span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span>     <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span>    &#125;</span><br><span class="line"><span class="comment">/******/</span>    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span>   &#125;;</span><br><span class="line"><span class="comment">/******/</span>  &#125;)();</span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">// startup</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span>  __webpack_modules__[<span class="string">&quot;./src/index.js&quot;</span>](<span class="number">0</span>, __webpack_exports__, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>  <span class="keyword">return</span> __webpack_exports__;</span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p><code>npm view webpack devDependencies</code>,<code>npm  view webpack dependencies</code> 查看webpack的依赖</p><p>脚手架工具<br>inquirer, 询问交互<br>ejs， 模板解析<br>在 package.json中，bin字段指向可执行文件，其值是字符串，或者 对象。</p><p>对象形式，myjs-cli 即为脚手架的名字<br>字符串，脚手架的名字 就是 name的值<br>执行脚手架，就会执行在package.json 中配置项 bin 指向的可执行文件<br>    “bin”: {<br>        “myjs-cli”: “bin/index.js”<br>    },<br>process.cwd()，node 运行时的路径</p><p>webpack 原理<br>webpack 原理<br>自定义 loader， plugin<br>简易的 webpack<br>webpack 核心配置</p><p>entry, 可执行模块 或者 库的入口<br>chunk, 多个文件组成的一个代码块。可以将可执行模块和它所依赖的模块组合成一个chunk<br>loader， 文件转换器。 es6 转换 为 es5, scass 转换为 css<br>plugin, 扩展webpack功能的插件。 在 webpack 构建的生命周期节点上加入扩展hook，添加功能<br>webpack 构建过程？<br>初始化参数， 解析webpack 配置参数，合并shell传入和webpack.config.js 文件配置的参数，形成最后的配置结果<br>开始编译<br>通过上一步得到 的参数 初始化 compiler 对象<br>注册所有配置的插件， 插件 监听webpack构建生命周期的事件节点，做出相应的处理<br>执行对象的run方法开始执行编译<br>确认入口， 从配置的 entry 入口，开始解析文件，构建AST语法树，找出依赖，递归下去<br>编译模块， 递归中 根据文件类型和loader配置，调用所有配置的loader对文件进行转换，在找出该模块依赖的模块，在递归本步骤，直到所有入口依赖的文件都经过处理<br>完成模块编译并输出，递归完成后，等到每个文件结果，包含每个模块以及它们之间的依赖关系，根据 entry 配置生成代码块 chunk<br>输出完成， 输出所有的chunk 到文件系统<br>自定义 plugins<br>plugins 的钩子函数分为 compiler钩子，和 compilation钩子，每个钩子还有很多各自的钩子周期函数，在不同钩子周期函数中，webpack 进行不同的操作。</p><p>如何创建 webpack plugin？<br>构建函数<br>扩展 apply 方法<br>指定webpack 自身的事件钩子<br>处理 webpack 内部实例的特定数据<br>功能完成后，调用 webpack 提供的回调函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Grunt 侧重对整个过程的控制管理，是任务类型的的打包工具，代码检查、预编译、合并压缩；生成雪碧图、sourceMap、版本管理；运行单元测试、监控等。&lt;/p&gt;
&lt;h4 id=&quot;Grunt-执行异步任务&quot;&gt;&lt;a href=&quot;#Grunt-执行异步任务&quot; class=&quot;he</summary>
      
    
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="grunt" scheme="https://better-jiang.github.io/tags/grunt/"/>
    
  </entry>
  
  <entry>
    <title>去了解ESLint吧</title>
    <link href="https://better-jiang.github.io/2022/08/04/%E5%8E%BB%E4%BA%86%E8%A7%A3ESLint%E5%90%A7/"/>
    <id>https://better-jiang.github.io/2022/08/04/%E5%8E%BB%E4%BA%86%E8%A7%A3ESLint%E5%90%A7/</id>
    <published>2022-08-04T06:09:15.000Z</published>
    <updated>2023-05-22T11:24:40.320Z</updated>
    
    <content type="html"><![CDATA[<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/53680918">ESLint工作原理探讨-知乎</a> </li><li><a href="https://zhuanlan.zhihu.com/p/32189701">AST in Modern JavaScript -知乎</a></li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>ESlint 使用Espress把js语法转换成AST，然后通过 <strong>AST selectors</strong>找到静态代码中内容，再根据 rule 的规则去判断这一段js 是否符合规范。</p><ul><li>ESLint 使用  Espree 解析 JavaScript</li><li>ESLint 使用 AST  去分析代码中的模式</li><li>ESLint 是完全插件化的，每个规则都是一个插件，并且可以在运行时添加更多规则</li></ul><h3 id="Configuring-ESLint"><a href="#Configuring-ESLint" class="headerlink" title="Configuring ESLint"></a>Configuring ESLint</h3><p>ESLint 是完全可配置的，有2中方式开配置ESLint:</p><ul><li>使用JavaScript注释，把配置信息直接嵌入到代码源文件中</li><li>指定一个独立的*<em>配置文件</em>**<em>（.eslintrc.<em>）</em></em></li></ul><p>ESLint中可配置以下选项：</p><ul><li>运行环境（Environments）， 每种运行环境都带有一组特定的预定义全局变量</li><li>全局变量（Globals）， 运行期间可访问的其他全局变量</li><li>规则 （Rules），启用了哪些规则，以及其错误级别</li><li>插件（Plugins），使用了哪些第三方插件定义的额外规则、运行环境、配置等</li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>ESlint配置文件支持多种文件格式,如果存在多个配置文件，优先级顺序按如下：</p><ul><li>JavaScript， <code>.eslintrc.js</code>， 导出一个配置对象。export an object</li><li>JavaScript(ESM)， <code>.eslintrc.cjs</code>, 在  <code> package.json</code> 中  指定 <code> &quot;type&quot;:&quot;module&quot;</code></li><li>YAML，<code>.eslintrc.yaml</code>, <code>eslintrc.yml</code></li><li>JSON，<code>.eslintrc.json</code>,    ESLint中的json 文件可使用<strong>js格式的注释</strong></li><li>package.json， <code>eslintConfig</code>属性，指定配置文件路径</li></ul><h4 id="2中使用方式"><a href="#2中使用方式" class="headerlink" title="2中使用方式"></a>2中使用方式</h4><ul><li>ESLint 会自动查找检测配置文件<code>.eslintrc.*</code>,直到 系统的<strong>根目录<code>~/</code></strong> (**除非 指定了<code>root:true</code>**）</li><li>命令行CLI <code>—config</code>参数  <code>eslint -c muconfig.json myfiletotest.js</code></li></ul><h4 id="共享设置"><a href="#共享设置" class="headerlink" title="共享设置"></a>共享设置</h4><p>在ESlint配置文件中设置可共享的对象，可提供给所有正在执行的规则去访问，可用于自定义规则中想要去访问相同信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;settings&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="层叠配置"><a href="#层叠配置" class="headerlink" title="层叠配置"></a>层叠配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">your-project</span><br><span class="line">├── .eslintrc.json</span><br><span class="line">├── lib</span><br><span class="line">│ └── source.js</span><br><span class="line">└─┬ tests</span><br><span class="line">  ├── .eslintrc.json</span><br><span class="line">  └── test.js</span><br></pre></td></tr></table></figure><p>默认情况下，距离要检测文件最近的<code>.eslintrc.*</code>文件优先级最高，其次才是其父目录，直到根目录，当发现配置文件中指定<code>&quot;root&quot;:true</code>,会停止寻找。</p><p><strong>配置层次结构优先级(高-&gt;低)：</strong></p><ul><li>行内配置   <code>/*eslint-enable*/</code></li><li>命令行选项 <code>--global</code>,<code>—config</code>,<code>--rule</code></li><li>项目级别 配置<ul><li><code>.eslintrc.*</code>或<code>package.json</code>与要检测的文件 在<strong>同一目录中</strong></li><li>继续 在 其祖先目录中寻找 <code>.eslintrc.*</code>、<code>package.json</code>文件，直到<strong>根目录（系统上当前用户的主目录(~/)也被视为根目录，即需要寻找到此停止，在8.0版本，该目录中的配置将被忽略）</strong>,或者找到<code>&quot;root&quot;:true</code>的配置文件</li></ul></li></ul><h4 id="扩展配置文件"><a href="#扩展配置文件" class="headerlink" title="扩展配置文件"></a>扩展配置文件</h4><p>一个配置一旦扩展，就可以继承另一个配置文件的所有特征(规则、插件、选项)，且可以修改所有选项。有3中配置：</p><ul><li>基本配置，扩展的配置</li><li>派生配置，扩展基本配置的配置</li><li>最后生成的配置：将派生配置合并到基本配置的结果(the result of merging the derived configurantion into the base configuration.)</li></ul><p><strong>extends 属性值（2种）</strong></p><ul><li>字符串，(配置文件的路径、可共享的配置名称、eslint:recommended(推荐的规则)、eslint:all(所有规则))</li><li>字符串数组，每个附加配置都扩展了它前面的配置</li></ul><p>extends属性中的 相对路径、可共享的配置名称，是<strong>从它们出现的配置文件的位置解析</strong></p><p><strong>配置名称可省略<code>eslint-config-</code>前缀</strong>，例如，airbnb 解析为eslint-config-airbnb</p><h4 id="使用可共享的配置（npm包）"><a href="#使用可共享的配置（npm包）" class="headerlink" title="使用可共享的配置（npm包）"></a>使用可共享的配置（npm包）</h4><p>可共享的配置是一个npm包，并导出一个配置对象，必须<strong>安装在项目的跟目录</strong>中。</p><p>extends的属性值 可以<strong>省略包的<code>eslint-config-</code>前缀</strong></p><p><strong>如何创建一个可共享的配置？</strong></p><ul><li><p>1、create a Node.js module, 名字以<code>eslint-config-</code>开头，例如 <code>eslint-config-jiang</code>。</p><p><strong>npm scoped modules</strong>也是支持的，可以命名为<code>@scope/eslint-config</code>，或以其作为前缀。例如 <code>@jiang/eslint-config</code> <code>@jiang/eslint-config-myconfig</code></p></li><li><p>2、新建<code>index.js</code>文件，并导出一个配置对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  globals: &#123;</span><br><span class="line">    MyGlobales: true,</span><br><span class="line">    Jiang: &#123;</span><br><span class="line">      name: &quot;jiang&quot;,</span><br><span class="line">      age: 29,</span><br><span class="line">      friends: [&quot;Aime&quot;, &quot;Jack&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  rule: &#123;</span><br><span class="line">    semi: [2, &quot;always&quot;],</span><br><span class="line">    &quot;no-debugger&quot;: [1],</span><br><span class="line">    &quot;no-alert&quot;: [0]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、发布可共享的配置包</p><p>发布到npm，在package.json <strong>使用<code>peerDependencies</code>字段去声明对eslint的依赖</strong>。为了兼容性，声明依赖项推荐使用<code>&gt;=</code>范围语法，即最定要求的eslint版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;peerDependencies&quot;: &#123;</span><br><span class="line">    &quot;eslint&quot; : &quot;&gt;= 8&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果共享配置也依赖与其他插件,要将其指定为 前置依赖<code>peerDependency</code>。 如果，共享配置依赖于第三方解析器或其他可共享配置，要将这些包指定为项目依赖<code>dependencies</code></p><h6 id="本地测试，要发布的包"><a href="#本地测试，要发布的包" class="headerlink" title="本地测试，要发布的包"></a>本地测试，要发布的包</h6><ul><li><p><strong>npm link / pnpm link,  全局链接模块，使当前本地包可在系统范围内或其他位置访问</strong></p></li><li><p>在需要使共享配置的的项目中，<code>npm link eslint-config-myconfig </code></p></li></ul></li><li><p>4、使用可共享的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;extends&quot;: &quot;eslint-config-myconfig&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="共享多个配置"><a href="#共享多个配置" class="headerlink" title="共享多个配置"></a>共享多个配置</h5><p>可以在同一个npm包共享多个配置，且为包指定默认配置。例如，新建一个特定配置文件<code>my-special-config.js</code>，包名<code>eslint-config-jiang</code>,通过以下方式访问附加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;extends&quot;: &quot;jiang/my-special-config&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是 <strong>scoped modules</strong>，则不能省略 <code>eslint-config</code>命名空间。假设包名<code>@jiang/eslint-config</code>,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;extends&quot;: &quot;@jiang/eslint-config/my-special-config&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用来自插件的规则"><a href="#使用来自插件的规则" class="headerlink" title="使用来自插件的规则"></a>使用来自插件的规则</h4><p>插件 也是一个 npm包，可给ESLint添加新规则，导出可共享配置。要确保该npm包安装在ESLint能访问到的目录下。</p><p><strong>plugins属性值</strong>可以<strong>省略包名的前缀</strong><code>eslint-plugin-</code></p><p><strong>extends属性值</strong> 格式:  <code>plugin:</code> + 包名 + <code>/</code> + 配置名称,  例如 <code>plugin:react/recommended</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">        &quot;react&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;extends&quot;: [</span><br><span class="line">        &quot;eslint:recommended&quot;,</span><br><span class="line">        &quot;plugin:react/recommended&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">       &quot;react/no-set-state&quot;: &quot;off&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置名称</strong>, 在<code>configs</code>选项设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  deprecatedRules,</span><br><span class="line">  rules: allRules,</span><br><span class="line">  configs: &#123;</span><br><span class="line">    recommended: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        &#x27;react/display-name&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-key&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-comment-textnodes&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-duplicate-props&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-target-blank&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-undef&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-uses-react&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-uses-vars&#x27;: 2,</span><br><span class="line">        &#x27;react/no-children-prop&#x27;: 2,</span><br><span class="line">        &#x27;react/no-danger-with-children&#x27;: 2,</span><br><span class="line">        &#x27;react/no-deprecated&#x27;: 2,</span><br><span class="line">        &#x27;react/no-direct-mutation-state&#x27;: 2,</span><br><span class="line">        &#x27;react/no-find-dom-node&#x27;: 2,</span><br><span class="line">        &#x27;react/no-is-mounted&#x27;: 2,</span><br><span class="line">        &#x27;react/no-render-return-value&#x27;: 2,</span><br><span class="line">        &#x27;react/no-string-refs&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unescaped-entities&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unknown-property&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unsafe&#x27;: 0,</span><br><span class="line">        &#x27;react/prop-types&#x27;: 2,</span><br><span class="line">        &#x27;react/react-in-jsx-scope&#x27;: 2,</span><br><span class="line">        &#x27;react/require-render-return&#x27;: 2,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    all: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: activeRulesConfig,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;jsx-runtime&#x27;: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        jsxPragma: null, // for @typescript/eslint-parser</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        &#x27;react/react-in-jsx-scope&#x27;: 0,</span><br><span class="line">        &#x27;react/jsx-uses-react&#x27;: 0,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用eslint-recommended"><a href="#使用eslint-recommended" class="headerlink" title="使用eslint:recommended"></a>使用eslint:recommended</h4><p>​    启用eslint推荐的规则子集，<a href="https://eslint.org/docs/latest/rules/">rules页</a>中复选框选中的规则</p><h4 id="使用eslint-all"><a href="#使用eslint-all" class="headerlink" title="使用eslint:all"></a>使用eslint:all</h4><p>​    启用当前eslint版本中所有的核心规则</p><h4 id="更精细化配置，overrides属性"><a href="#更精细化配置，overrides属性" class="headerlink" title="更精细化配置，overrides属性"></a>更精细化配置，overrides属性</h4><p>使用overrides属性，根据配置中文件 glob模式覆盖规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;rules&quot;: &#123;</span><br><span class="line">quotes:[&quot;error&quot;, &quot;dobule&quot;]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;overrides&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;files&quot;: [&quot;foo/*.js&quot;],</span><br><span class="line">            &quot;excludedFiles&quot;: &quot;*.test.js&quot;,</span><br><span class="line">            &quot;rules&quot;: &#123;</span><br><span class="line">                &quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="忽略ESlint规则检查"><a href="#忽略ESlint规则检查" class="headerlink" title="忽略ESlint规则检查"></a>忽略ESlint规则检查</h3><h5 id="1、-eslintignore-文件"><a href="#1、-eslintignore-文件" class="headerlink" title="1、.eslintignore 文件"></a>1、.eslintignore 文件</h5><p>在项目根目录下创建<code>.eslintignore</code>文件中指定要忽略检查的文件或目录。</p><ul><li>每一行一个glob模式，指定要忽略的路径</li><li><code>#</code> 开头的行 被视为注释</li><li>路径时相对于当前工作目录的</li><li><code>!</code>是否定模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Ignore build files except build/test.js</span><br><span class="line">!.build</span><br><span class="line">.build/*</span><br><span class="line">!.build/test.js</span><br></pre></td></tr></table></figure><h5 id="2、配置文件-中的ignorePatterns"><a href="#2、配置文件-中的ignorePatterns" class="headerlink" title="2、配置文件 中的ignorePatterns"></a>2、配置文件 中的<code>ignorePatterns</code></h5><p>使用<code>ignorePatterns</code>指定要忽略检查的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;ignorePatterns&quot;: [&quot;*.ignore.js&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h4 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/53680918">ESLint工作原理探讨-知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/32189701">AST in Modern JavaScript -知乎</a></li></ul><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>ESlint 使用Espress把js语法转换成AST，然后通过 <strong>AST selectors</strong>找到静态代码中内容，再根据 rule 的规则去判断这一段js 是否符合规范。</p><ul><li>ESLint 使用 Espree 解析 JavaScript</li><li>ESLint 使用 AST 去分析代码中的模式</li><li>ESLint 是完全插件化的，每个规则都是一个插件，并且可以在运行时添加更多规则</li></ul><h3 id="Configuring-ESLint-1"><a href="#Configuring-ESLint-1" class="headerlink" title="Configuring ESLint"></a>Configuring ESLint</h3><p>ESLint 是完全可配置的，有2中方式开配置ESLint:</p><ul><li>使用JavaScript注释，把配置信息直接嵌入到代码源文件中</li><li>指定一个独立的*<em>配置文件*</em>*<em>（.eslintrc.*）</em>*</li></ul><p>ESLint中可配置以下选项：</p><ul><li>运行环境（Environments）， 每种运行环境都带有一组特定的预定义全局变量</li><li>全局变量（Globals）， 运行期间可访问的其他全局变量</li><li>规则 （Rules），启用了哪些规则，以及其错误级别</li><li>插件（Plugins），使用了哪些第三方插件定义的额外规则、运行环境、配置等</li></ul><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p>ESlint配置文件支持多种文件格式,如果存在多个配置文件，优先级顺序按如下：</p><ul><li>JavaScript， <code>.eslintrc.js</code>， 导出一个配置对象。export an object</li><li>JavaScript(ESM)， <code>.eslintrc.cjs</code>, 在 <code>package.json</code> 中 指定 <code>&quot;type&quot;:&quot;module&quot;</code></li><li>YAML，<code>.eslintrc.yaml</code>, <code>eslintrc.yml</code></li><li>JSON，<code>.eslintrc.json</code>, ESLint中的json 文件可使用<strong>js格式的注释</strong></li><li>package.json， <code>eslintConfig</code>属性，指定配置文件路径</li></ul><h4 id="2中使用方式-1"><a href="#2中使用方式-1" class="headerlink" title="2中使用方式"></a>2中使用方式</h4><ul><li>ESLint 会自动查找检测配置文件<code>.eslintrc.*</code>,直到 系统的<strong>根目录~/</strong> (<strong>除非 指定了root:true</strong>）</li><li>命令行CLI <code>—config</code>参数 <code>eslint -c muconfig.json myfiletotest.js</code></li></ul><h4 id="共享设置-1"><a href="#共享设置-1" class="headerlink" title="共享设置"></a>共享设置</h4><p>在ESlint配置文件中设置可共享的对象，可提供给所有正在执行的规则去访问，可用于自定义规则中想要去访问相同信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;settings&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="层叠配置-1"><a href="#层叠配置-1" class="headerlink" title="层叠配置"></a>层叠配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">your-project</span><br><span class="line">├── .eslintrc.json</span><br><span class="line">├── lib</span><br><span class="line">│ └── source.js</span><br><span class="line">└─┬ tests</span><br><span class="line">  ├── .eslintrc.json</span><br><span class="line">  └── test.js</span><br></pre></td></tr></table></figure><p>默认情况下，距离要检测文件最近的<code>.eslintrc.*</code>文件优先级最高，其次才是其父目录，直到根目录，当发现配置文件中指定<code>&quot;root&quot;:true</code>,会停止寻找。</p><p><strong>配置层次结构优先级(高-&gt;低)：</strong></p><ul><li>行内配置 <code>/*eslint-enable*/</code></li><li>命令行选项 <code>--global</code>,<code>—config</code>,<code>--rule</code></li><li>项目级别 配置<ul><li><code>.eslintrc.*</code>或<code>package.json</code>与要检测的文件 在<strong>同一目录中</strong></li><li>继续 在 其祖先目录中寻找 <code>.eslintrc.*</code>、<code>package.json</code>文件，直到<strong>根目录（系统上当前用户的主目录(~/)也被视为根目录，即需要寻找到此停止，在8.0版本，该目录中的配置将被忽略）</strong>,或者找到<code>&quot;root&quot;:true</code>的配置文件</li></ul></li></ul><h4 id="扩展配置文件-1"><a href="#扩展配置文件-1" class="headerlink" title="扩展配置文件"></a>扩展配置文件</h4><p>一个配置一旦扩展，就可以继承另一个配置文件的所有特征(规则、插件、选项)，且可以修改所有选项。有3中配置：</p><ul><li>基本配置，扩展的配置</li><li>派生配置，扩展基本配置的配置</li><li>最后生成的配置：将派生配置合并到基本配置的结果(the result of merging the derived configurantion into the base configuration.)</li></ul><p><strong>extends 属性值（2种）</strong></p><ul><li>字符串，(配置文件的路径、可共享的配置名称、eslint:recommended(推荐的规则)、eslint:all(所有规则))</li><li>字符串数组，每个附加配置都扩展了它前面的配置</li></ul><p>extends属性中的 相对路径、可共享的配置名称，是<strong>从它们出现的配置文件的位置解析</strong></p><p><strong>配置名称可省略eslint-config-前缀</strong>，例如，airbnb 解析为eslint-config-airbnb</p><h4 id="使用可共享的配置（npm包）-1"><a href="#使用可共享的配置（npm包）-1" class="headerlink" title="使用可共享的配置（npm包）"></a>使用可共享的配置（npm包）</h4><p>可共享的配置是一个npm包，并导出一个配置对象，必须<strong>安装在项目的跟目录</strong>中。</p><p>extends的属性值 可以<strong>省略包的eslint-config-前缀</strong></p><p><strong>如何创建一个可共享的配置？</strong></p><ul><li><p>1、create a Node.js module, 名字以<code>eslint-config-</code>开头，例如 <code>eslint-config-jiang</code>。</p><p><strong>npm scoped modules</strong>也是支持的，可以命名为<code>@scope/eslint-config</code>，或以其作为前缀。例如 <code>@jiang/eslint-config</code> <code>@jiang/eslint-config-myconfig</code></p></li><li><p>2、新建<code>index.js</code>文件，并导出一个配置对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  globals: &#123;</span><br><span class="line">    MyGlobales: true,</span><br><span class="line">    Jiang: &#123;</span><br><span class="line">      name: &quot;jiang&quot;,</span><br><span class="line">      age: 29,</span><br><span class="line">      friends: [&quot;Aime&quot;, &quot;Jack&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  rule: &#123;</span><br><span class="line">    semi: [2, &quot;always&quot;],</span><br><span class="line">    &quot;no-debugger&quot;: [1],</span><br><span class="line">    &quot;no-alert&quot;: [0]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、发布可共享的配置包</p><p>发布到npm，在package.json <strong>使用peerDependencies字段去声明对eslint的依赖</strong>。为了兼容性，声明依赖项推荐使用<code>&gt;=</code>范围语法，即最定要求的eslint版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;peerDependencies&quot;: &#123;</span><br><span class="line">    &quot;eslint&quot; : &quot;&gt;= 8&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果共享配置也依赖与其他插件,要将其指定为 前置依赖<code>peerDependency</code>。 如果，共享配置依赖于第三方解析器或其他可共享配置，要将这些包指定为项目依赖<code>dependencies</code></p><h6 id="本地测试，要发布的包-1"><a href="#本地测试，要发布的包-1" class="headerlink" title="本地测试，要发布的包"></a>本地测试，要发布的包</h6><ul><li><strong>npm link / pnpm link, 全局链接模块，使当前本地包可在系统范围内或其他位置访问</strong></li><li>在需要使共享配置的的项目中，<code>npm link eslint-config-myconfig</code></li></ul></li><li><p>4、使用可共享的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;extends&quot;: &quot;eslint-config-myconfig&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="共享多个配置-1"><a href="#共享多个配置-1" class="headerlink" title="共享多个配置"></a>共享多个配置</h5><p>可以在同一个npm包共享多个配置，且为包指定默认配置。例如，新建一个特定配置文件<code>my-special-config.js</code>，包名<code>eslint-config-jiang</code>,通过以下方式访问附加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;extends&quot;: &quot;jiang/my-special-config&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是 <strong>scoped modules</strong>，则不能省略 <code>eslint-config</code>命名空间。假设包名<code>@jiang/eslint-config</code>,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;extends&quot;: &quot;@jiang/eslint-config/my-special-config&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用来自插件的规则-1"><a href="#使用来自插件的规则-1" class="headerlink" title="使用来自插件的规则"></a>使用来自插件的规则</h4><p>插件 也是一个 npm包，可给ESLint添加新规则，导出可共享配置。要确保该npm包安装在ESLint能访问到的目录下。</p><p><strong>plugins属性值</strong>可以<strong>省略包名的前缀</strong><code>eslint-plugin-</code></p><p><strong>extends属性值</strong> 格式: <code>plugin:</code> + 包名 + <code>/</code> + 配置名称, 例如 <code>plugin:react/recommended</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">        &quot;react&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;extends&quot;: [</span><br><span class="line">        &quot;eslint:recommended&quot;,</span><br><span class="line">        &quot;plugin:react/recommended&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">       &quot;react/no-set-state&quot;: &quot;off&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置名称</strong>, 在<code>configs</code>选项设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  deprecatedRules,</span><br><span class="line">  rules: allRules,</span><br><span class="line">  configs: &#123;</span><br><span class="line">    recommended: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        &#x27;react/display-name&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-key&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-comment-textnodes&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-duplicate-props&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-target-blank&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-undef&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-uses-react&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-uses-vars&#x27;: 2,</span><br><span class="line">        &#x27;react/no-children-prop&#x27;: 2,</span><br><span class="line">        &#x27;react/no-danger-with-children&#x27;: 2,</span><br><span class="line">        &#x27;react/no-deprecated&#x27;: 2,</span><br><span class="line">        &#x27;react/no-direct-mutation-state&#x27;: 2,</span><br><span class="line">        &#x27;react/no-find-dom-node&#x27;: 2,</span><br><span class="line">        &#x27;react/no-is-mounted&#x27;: 2,</span><br><span class="line">        &#x27;react/no-render-return-value&#x27;: 2,</span><br><span class="line">        &#x27;react/no-string-refs&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unescaped-entities&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unknown-property&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unsafe&#x27;: 0,</span><br><span class="line">        &#x27;react/prop-types&#x27;: 2,</span><br><span class="line">        &#x27;react/react-in-jsx-scope&#x27;: 2,</span><br><span class="line">        &#x27;react/require-render-return&#x27;: 2,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    all: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: activeRulesConfig,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;jsx-runtime&#x27;: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        jsxPragma: null, // for @typescript/eslint-parser</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        &#x27;react/react-in-jsx-scope&#x27;: 0,</span><br><span class="line">        &#x27;react/jsx-uses-react&#x27;: 0,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用eslint-recommended-1"><a href="#使用eslint-recommended-1" class="headerlink" title="使用eslint:recommended"></a>使用eslint:recommended</h4><p> 启用eslint推荐的规则子集，<a href="https://eslint.org/docs/latest/rules/">rules页</a>中复选框选中的规则</p><h4 id="使用eslint-all-1"><a href="#使用eslint-all-1" class="headerlink" title="使用eslint:all"></a>使用eslint:all</h4><p> 启用当前eslint版本中所有的核心规则</p><h4 id="更精细化配置，overrides属性-1"><a href="#更精细化配置，overrides属性-1" class="headerlink" title="更精细化配置，overrides属性"></a>更精细化配置，overrides属性</h4><p>使用overrides属性，根据配置中文件 glob模式覆盖规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;rules&quot;: &#123;</span><br><span class="line">quotes:[&quot;error&quot;, &quot;dobule&quot;]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;overrides&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;files&quot;: [&quot;foo/*.js&quot;],</span><br><span class="line">            &quot;excludedFiles&quot;: &quot;*.test.js&quot;,</span><br><span class="line">            &quot;rules&quot;: &#123;</span><br><span class="line">                &quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="忽略ESlint规则检查-1"><a href="#忽略ESlint规则检查-1" class="headerlink" title="忽略ESlint规则检查"></a>忽略ESlint规则检查</h3><h5 id="1、-eslintignore-文件-1"><a href="#1、-eslintignore-文件-1" class="headerlink" title="1、.eslintignore 文件"></a>1、.eslintignore 文件</h5><p>在项目根目录下创建<code>.eslintignore</code>文件中指定要忽略检查的文件或目录。</p><ul><li>每一行一个glob模式，指定要忽略的路径</li><li><code>#</code> 开头的行 被视为注释</li><li>路径时相对于当前工作目录的</li><li><code>!</code>是否定模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Ignore build files except build/test.js</span><br><span class="line">!.build</span><br><span class="line">.build/*</span><br><span class="line">!.build/test.js</span><br></pre></td></tr></table></figure><h5 id="2、配置文件-中的ignorePatterns-1"><a href="#2、配置文件-中的ignorePatterns-1" class="headerlink" title="2、配置文件 中的ignorePatterns"></a>2、配置文件 中的<code>ignorePatterns</code></h5><p>使用<code>ignorePatterns</code>指定要忽略检查的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;ignorePatterns&quot;: [&quot;*.ignore.js&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语言相关的选项"><a href="#语言相关的选项" class="headerlink" title="语言相关的选项"></a>语言相关的选项</h3><h4 id="指定环境"><a href="#指定环境" class="headerlink" title="指定环境"></a>指定环境</h4><p>一个环境提供了一组预定义的全局变量。可用的环境：brower、node、commonjs、es6、shared-node-browser、amd、mocha、jest、jquery、mongo、shelljs</p><ul><li><p>使用注释, 在js文件中指定环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* eslint-env node, mocha*/</span><br></pre></td></tr></table></figure></li><li><p>在<strong>配置文件</strong>中，使用<code>env</code>属性来指定环境并设为true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;env&quot;: &#123;</span><br><span class="line">        &quot;browser&quot;: true,</span><br><span class="line">        &quot;commonjs&quot;: true,</span><br><span class="line">      &quot;es2021&quot;: true,</span><br><span class="line">        &quot;node&quot;: true,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>package.json </code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">name:&quot;eslint-demo&quot;,</span><br><span class="line">&quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">eslintConfig: &#123;</span><br><span class="line">&quot;env&quot;: &#123;</span><br><span class="line">&quot;browser&quot;: true,</span><br><span class="line">&quot;es2021&quot;: true,</span><br><span class="line">&quot;node&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="指定全局变量"><a href="#指定全局变量" class="headerlink" title="指定全局变量"></a>指定全局变量</h4><p>当访问未定义的变量时，ESLint<code>no-undef</code>规则会发出警告。可在配置文件中定义或使用注释定义全局变量。</p><ul><li><p>使用注释定义全局变量, 默认是可读的，使用<code>writable</code>标识其可被写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*  global var1, var2 */</span><br><span class="line"></span><br><span class="line">/* global var1:writable, var2:writable */</span><br></pre></td></tr></table></figure></li><li><p>在配置文件定义全局变量，使用<code>globals</code>属性设置为一个对象, 可用”off”禁用全局变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;globals&quot;: &#123;</span><br><span class="line">        &quot;var1&quot;: &quot;writable&quot;,</span><br><span class="line">        &quot;var2&quot;: &quot;readonly&quot;,</span><br><span class="line">        &quot;Promise&quot;: &quot;off&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="指定解析器"><a href="#指定解析器" class="headerlink" title="指定解析器"></a>指定解析器</h4><p>ESLint可以指定想要支持的js语言选项，ESlint默认支持 ECMAScript 5 语法。使用<code>parseroptions</code>属性设置一个对象，其属性如下：</p><ul><li>ecmaVersion,  可设置为3,5(defalut),6，7，8，9，11，或者2015(same as 6)，2016(7)，2017(8)，latest (最新支持的版本)</li><li>sourceType，类型，<code>script</code> 或 <code>module</code>,</li><li>allowReserved, 允许使用保留字做标识符</li><li>ecmaFeatures, 对象，指定想要使用的附件语言功能。例如 <code>jsx: true</code>, 支持JSX语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;parserOptions&quot;: &#123;</span><br><span class="line">        &quot;ecmaVersion&quot;: &quot;latest&quot;,</span><br><span class="line">        &quot;sourceType&quot;: &quot;module&quot;,</span><br><span class="line">        &quot;ecmaFeatures&quot;: &#123;</span><br><span class="line">            &quot;jsx&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="援疆计划"><a href="#援疆计划" class="headerlink" title="援疆计划"></a>援疆计划</h3><h5 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h5><p>各位领导，下午好，我是刘振江，来自产险科技中心个人客户研发团队，是一名前端工程师。入司2年多，一直在网销非车项目组工作，负责开发维护我们平安保险商城官网，配合业务老师上线各类的营销活动。另外，还参与优化了ITS航母系统内的录单、出单流程，以及开发完善了新产品配置、上下架等功能。总体来讲，做的还可以，需求方满意，自己也小有成就感。</p><p>我从小在新疆生活长大，小学、初中在团场上的（农二师26团），高中去了库尔勒，大学考到了武汉，工作来了深圳。对新疆是有感情，也是热爱的。所以当知道公司有”援疆派驻人才”招募计划，我第一时间就报名了，真的希望能借此机会，回到新疆发展，通过努力、扎实的工作，能办出些实事来，去实实在在的为新疆的发展做出贡献。</p><p>与此同时，我也想着能通过这份工作，好好的去宣传新疆，让更过的人了解真正的新疆，从而喜欢上新疆。因为我自身感受而言，内地的朋友对新疆了解的不多，往往会把新疆想象成一个神秘、封闭和落后的地方，他们仅仅知道些新疆美食、美景。甚至有些人会有些误解，例如“新疆不安全”，“新疆交通落后，出行不方便”，“新疆干旱没水，到处都是戈壁沙漠”等。</p><p>援疆结束后，我希望能够继续留在新疆工作，毕竟新疆潜力巨大，发展一定会越来越好。对我个人而言，则会有很大的个人成长与发展空间。还有一点，父母都在新疆，发小好友，初、高中同学也大都在新疆工作和生活，从家庭、友情方面考虑，留在新疆，应该是好的选择。</p><h5 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h5><ul><li>援疆人才培养方案是怎样的？有培训的具体计划？</li><li>到了新疆，有老师或领导带我们吗？大致工作是什么？需要哪些技能，有没有相应的指导或培训，我们考核指标是怎样？</li></ul><h5 id="希望达成的目标？"><a href="#希望达成的目标？" class="headerlink" title="希望达成的目标？"></a>希望达成的目标？</h5><ul><li>能办出些实事来，能真正让喀什发展的更好，给喀什地区的各族群众带来好处</li><li>自己能通过文字、照片、视频等形式记录我的援疆历程，让更多的人知道援疆，去了解新疆，去参与到新疆的建设与发展中。</li></ul><h4 id="新疆安全"><a href="#新疆安全" class="headerlink" title="新疆安全"></a>新疆安全</h4><ul><li><p>新疆便民警务站很多</p></li><li><p>进入餐厅、超市、电影院等公共场所，随身带的大小包都要过安检仪，类似在深圳乘坐地铁过安检一样</p></li><li><p>安保措施严格繁琐，但为了自治区的长治久安，大家都能体谅和理解</p></li></ul><h5 id="新疆交通"><a href="#新疆交通" class="headerlink" title="新疆交通"></a>新疆交通</h5><ul><li>新疆是全国机场数量最多的省区</li><li>全疆所有地区地州都通了铁路； 哈密、吐鲁番乌鲁木齐(兰新高铁)。 城际列车，南疆之星（乌鲁木齐-库尔勒），北疆之星(乌鲁木齐-伊宁)</li><li><img src="/Users/liuzhenjiang948/Desktop/2021_0120_0b0976a6g00qn7ub500brd000k000g0p.gif" alt="2021_0120_0b0976a6g00qn7ub500brd000k000g0p"></li></ul><ul><li>新建公路,最美<strong>独库公路/天山公路</strong>（独山子-库车），横穿天山，连接南北疆，沿途有那拉提草原（巩乃斯林场），巴音布克草原（九曲十八弯），天山大峡谷，库车大峡谷<br>伊昭公路(伊宁-昭苏)，伊犁  薰衣草， 天马，昭苏马场</li><li>塞果高速(赛里木湖-果子沟)</li></ul><h5 id="新疆美食"><a href="#新疆美食" class="headerlink" title="新疆美食"></a>新疆美食</h5><p>囊、拌面、大盘鸡，库尔勒香梨、伊犁的奶茶、阿克苏苹果、库车的小白杏、吐鲁番的葡萄、哈密瓜</p><h5 id="新疆美景"><a href="#新疆美景" class="headerlink" title="新疆美景"></a>新疆美景</h5><p>北疆，高山、草原，湖泊、森林，<strong>塞外江南</strong></p><p>南疆，沙漠、戈壁，大漠边塞风光，喀什老城、慕士塔格峰、天山大峡谷、罗布泊、塔克拉玛干沙漠</p><h5 id="新疆方言"><a href="#新疆方言" class="headerlink" title="新疆方言"></a>新疆方言</h5><ul><li>劳道</li><li> 皮牙子</li><li>大肉</li><li>勺子-</li><li>哈马斯，(全部)</li><li>巴郎子、羊缸子(妇女)</li><li>麦格来 (过来)</li><li>赶巴扎 (国际大巴扎)</li></ul><h5 id="喀什"><a href="#喀什" class="headerlink" title="喀什"></a>喀什</h5><p>新Q， “喀什噶尔”，”玉石集中之地”， 1个县级市、10个县、1个自治县(塔什库尔干塔吉克族)</p><p>汉族 28万，维吾尔族 428万 92%</p><p>喀什噶尔石榴，莎车巴旦木，伽师瓜，叶城的核桃</p><p>帕米尔冰川矿区水</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53680918&quot;&gt;ESLint工作</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="eslint" scheme="https://better-jiang.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>缺陷控制</title>
    <link href="https://better-jiang.github.io/2022/07/27/%E7%BC%BA%E9%99%B7%E6%8E%A7%E5%88%B6/"/>
    <id>https://better-jiang.github.io/2022/07/27/%E7%BC%BA%E9%99%B7%E6%8E%A7%E5%88%B6/</id>
    <published>2022-07-27T07:06:01.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul><li>代码<ul><li>自检代码</li><li>质量监控</li><li>版本控制</li><li>代码风格</li><li>Snippet， 代码片段</li></ul></li><li>团队<ul><li>相互监督</li><li>意识形态</li><li>定期培训、自检</li><li>分工明确</li><li>协同待办</li><li>代码review</li></ul></li><li>项目<ul><li>制定计划</li><li>版本控制</li><li>协商沟通</li><li>定期校验</li><li>纠正措施</li><li>备选方案</li></ul></li><li>公司<ul><li>缺陷管理软件</li><li>公司流程</li><li>奖惩有度</li><li>抽样检查</li><li>质量改进</li><li>长远计划，动态改进</li></ul></li></ul><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代码&lt;ul&gt;
&lt;li&gt;自检代码&lt;/li&gt;
&lt;li&gt;质量监控&lt;/li&gt;
&lt;li&gt;版本控制&lt;/li&gt;
&lt;li&gt;代码风格&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="团队协作" scheme="https://better-jiang.github.io/tags/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-分词</title>
    <link href="https://better-jiang.github.io/2022/07/26/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%88%86%E8%AF%8D/"/>
    <id>https://better-jiang.github.io/2022/07/26/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%88%86%E8%AF%8D/</id>
    <published>2022-07-26T02:26:07.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<p><strong>分词</strong>是在动词后面加**-ing<strong>或-<strong>ed</strong>,起</strong>形容词**的作用</p><ul><li><p><strong>现在分词</strong>含有<strong>主动、进行</strong>之意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I see the dancing girl.现在时</span><br><span class="line">I saw the dancing girl.过去时</span><br><span class="line">I will see the dancing girl.  将来时</span><br></pre></td></tr></table></figure></li><li><p><strong>过去分词</strong>含有<strong>被动</strong>之意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Look at the broke window</span><br></pre></td></tr></table></figure></li></ul><h3 id="动词的三种形态"><a href="#动词的三种形态" class="headerlink" title="动词的三种形态"></a>动词的三种形态</h3><p>动词有三种形态，现在式、过去式、过去分词，大致分为A-B-C，A-A-A，A-B-A，A-B-C型</p><h4 id="A-B-C型"><a href="#A-B-C型" class="headerlink" title="A-B-C型"></a>A-B-C型</h4><table><thead><tr><th align="left">现在式</th><th>过去式</th><th>过去分词</th></tr></thead><tbody><tr><td align="left">am/are/is</td><td>was/were</td><td>been</td></tr><tr><td align="left">begin</td><td>began</td><td>begun</td></tr><tr><td align="left">bite</td><td>bit</td><td>bitten</td></tr><tr><td align="left">break</td><td>broke</td><td>broken</td></tr><tr><td align="left">blow</td><td>blew</td><td>blown</td></tr><tr><td align="left">choose</td><td>chose</td><td>chosen</td></tr><tr><td align="left">draw</td><td>drew</td><td>drawn</td></tr><tr><td align="left">drink</td><td>drank</td><td>drunk</td></tr><tr><td align="left">drive</td><td>drove</td><td>driven</td></tr><tr><td align="left">eat</td><td>ate</td><td>eaten</td></tr><tr><td align="left">fall</td><td>fell</td><td>fallen</td></tr><tr><td align="left">fly</td><td>flew</td><td>flown</td></tr><tr><td align="left">forgive</td><td>forgave</td><td>forgiven</td></tr><tr><td align="left">forget</td><td>forgot</td><td>forgotten</td></tr><tr><td align="left">freeze</td><td>froze</td><td>frozen</td></tr><tr><td align="left">give</td><td>gave</td><td>given</td></tr><tr><td align="left">get</td><td>got</td><td>gotten</td></tr><tr><td align="left">go</td><td>went</td><td>gone</td></tr><tr><td align="left">grow</td><td>grew</td><td>grown</td></tr><tr><td align="left">hide</td><td>hid</td><td>hidden</td></tr><tr><td align="left">know</td><td>knew</td><td>known</td></tr><tr><td align="left">lie</td><td>lay</td><td>lain</td></tr><tr><td align="left">mistake</td><td>mistook</td><td>mistaken</td></tr><tr><td align="left">ride</td><td>rode</td><td>ridden</td></tr><tr><td align="left">ring</td><td>rang</td><td>rung</td></tr><tr><td align="left">rise</td><td>rose</td><td>risen</td></tr><tr><td align="left">see</td><td>saw</td><td>seen</td></tr><tr><td align="left">shake</td><td>shook</td><td>shaken</td></tr><tr><td align="left">show</td><td>showed</td><td>shown</td></tr><tr><td align="left">sing</td><td>sang</td><td>sung</td></tr><tr><td align="left">swim</td><td>swam</td><td>swum</td></tr><tr><td align="left">speak</td><td>spoke</td><td>spoken</td></tr><tr><td align="left">steal</td><td>stole</td><td>stolen</td></tr><tr><td align="left">take</td><td>took</td><td>taken</td></tr><tr><td align="left">throw</td><td>threw</td><td>thrown</td></tr><tr><td align="left">wear</td><td>wore</td><td>worn</td></tr><tr><td align="left">write</td><td>wrote</td><td>written</td></tr></tbody></table><h4 id="A-B-B型"><a href="#A-B-B型" class="headerlink" title="A-B-B型"></a>A-B-B型</h4><table><thead><tr><th>现在式</th><th>过去式</th><th>过去分词</th></tr></thead><tbody><tr><td>bend</td><td>bent</td><td>bent</td></tr><tr><td>bind</td><td>bound</td><td>bound</td></tr><tr><td>bring</td><td>brought</td><td>brought</td></tr><tr><td>buy</td><td>bought</td><td>bought</td></tr><tr><td>build</td><td>built</td><td>built</td></tr><tr><td>catch</td><td>caught</td><td>caught</td></tr><tr><td>dig</td><td>dug</td><td>dug</td></tr><tr><td>feed</td><td>fed</td><td>fed</td></tr><tr><td>feel</td><td>felt</td><td>felt</td></tr><tr><td>fight</td><td>fought</td><td>fought</td></tr><tr><td>find</td><td>found</td><td>found</td></tr><tr><td>hang</td><td>hung</td><td>Hung</td></tr><tr><td>hear</td><td>heard</td><td>heard</td></tr><tr><td>hold</td><td>held</td><td>Held</td></tr><tr><td>keep</td><td>kept</td><td>kept</td></tr><tr><td>lead</td><td>ked</td><td>led</td></tr><tr><td>lend</td><td>lent</td><td>Lent</td></tr><tr><td>lose</td><td>lost</td><td>lost</td></tr><tr><td>leave</td><td>left</td><td>left</td></tr><tr><td>lay</td><td>laid</td><td>laid</td></tr><tr><td>make</td><td>made</td><td>made</td></tr><tr><td>mean</td><td>meant</td><td>meant</td></tr><tr><td>meet</td><td>met</td><td>met</td></tr><tr><td>pay</td><td>paid</td><td>paid</td></tr><tr><td>sell</td><td>sold</td><td>sold</td></tr><tr><td>shoot</td><td>shot</td><td>shot</td></tr><tr><td>sit</td><td>sat</td><td>sat</td></tr><tr><td>smell</td><td>smelt</td><td>smelt</td></tr><tr><td>shine</td><td>shone</td><td>shone</td></tr><tr><td>sleep</td><td>slept</td><td>slept</td></tr><tr><td>spend</td><td>spent</td><td>spent</td></tr><tr><td>strke</td><td>struck</td><td>struck</td></tr><tr><td>stand</td><td>stood</td><td>stood</td></tr><tr><td>tell</td><td>told</td><td>told</td></tr><tr><td>think</td><td>thought</td><td>thought</td></tr><tr><td>teach</td><td>taught</td><td>taught</td></tr><tr><td>win</td><td>won</td><td>won</td></tr><tr><td>understand</td><td>understood</td><td>understood</td></tr></tbody></table><p>​    </p><h4 id="A-A-A型"><a href="#A-A-A型" class="headerlink" title="A-A-A型"></a>A-A-A型</h4><table><thead><tr><th>现在式</th><th>过去式</th><th>过去分词</th></tr></thead><tbody><tr><td>let</td><td>let</td><td>let</td></tr><tr><td>cast</td><td>cast</td><td>cast</td></tr><tr><td>cost</td><td>cost</td><td>cost</td></tr><tr><td>cut</td><td>cut</td><td>cut</td></tr><tr><td>hit</td><td>hit</td><td>hit</td></tr><tr><td>hurt</td><td>hurt</td><td>hurt</td></tr><tr><td>put</td><td>put</td><td>put</td></tr><tr><td>read</td><td>read</td><td>read</td></tr><tr><td>set</td><td>set</td><td>set</td></tr><tr><td>shut</td><td>shut</td><td>shut</td></tr><tr><td>spread</td><td>spread</td><td>spread</td></tr></tbody></table><h3 id="A-B-A型"><a href="#A-B-A型" class="headerlink" title="A-B-A型"></a>A-B-A型</h3><table><thead><tr><th>现在式</th><th>过去式</th><th>过去分词</th></tr></thead><tbody><tr><td>become</td><td>became</td><td>become</td></tr><tr><td>come</td><td>came</td><td>come</td></tr><tr><td>run</td><td>ran</td><td>run</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;分词&lt;/strong&gt;是在动词后面加**-ing&lt;strong&gt;或-&lt;strong&gt;ed&lt;/strong&gt;,起&lt;/strong&gt;形容词**的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;现在分词&lt;/strong&gt;含有&lt;strong&gt;主动、进行&lt;/st</summary>
      
    
    
    
    <category term="英语拾遗" scheme="https://better-jiang.github.io/categories/%E8%8B%B1%E8%AF%AD%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="语法" scheme="https://better-jiang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-动词的3种变形</title>
    <link href="https://better-jiang.github.io/2022/07/22/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8A%A8%E8%AF%8D%E7%9A%843%E7%A7%8D%E5%8F%98%E5%BD%A2/"/>
    <id>https://better-jiang.github.io/2022/07/22/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8A%A8%E8%AF%8D%E7%9A%843%E7%A7%8D%E5%8F%98%E5%BD%A2/</id>
    <published>2022-07-22T07:20:57.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<p>动词原本在句子中应该做谓语，但可以通过改变动词的形态，让它起名词、形容词、分词的作用。</p><ul><li>动词不定式， to + V,  起 名词、形容词、副词的作用</li><li>动名词，V-ing， 起 名词 的作用</li><li>分词， V-ing, V-ed, 起 形容词 的作用</li></ul><h2 id="动词不定式"><a href="#动词不定式" class="headerlink" title="动词不定式"></a>动词不定式</h2><p>**“to + 动词”**，</p><ul><li><p>起<strong>名词</strong>的作用，在句子中作<strong>主、宾、补</strong></p><p>I want to drink.  “to drink” 表示<strong>名词 “喝的东西”</strong></p><p>I want to drink  water.</p><p>I want to drink coke.</p><p>I want to eat an apple.</p></li><li><p>起<strong>形容词</strong>的作用，修饰<strong>名词</strong></p><p>I want water to drink.   <strong>to drink 修饰名词 water</strong>， 表示”要喝的水“</p></li><li><p>起<strong>副词</strong>的作用，<strong>修饰形容词、副词、动词、句子</strong></p><p>I stopped the work to dirnk water.   “to drink water” <strong>“为了喝水”，用来说明停下工作的目的</strong></p></li></ul><h4 id="动词不定式-名词性用法"><a href="#动词不定式-名词性用法" class="headerlink" title="动词不定式-名词性用法"></a>动词不定式-名词性用法</h4><ol><li><p>主语</p><p>To study is my hobby.</p><p>To play the piano is interesting.</p></li><li><p>宾语</p><p>I like to study.   “to study”作宾语</p></li><li><p>补语</p><p>My hobby is to study.</p><p>My dream is to be a doctor.</p></li></ol><h4 id="动词不定式-形容词性用法"><a href="#动词不定式-形容词性用法" class="headerlink" title="动词不定式-形容词性用法"></a>动词不定式-形容词性用法</h4><p><strong>形容词修饰名词一般放在名词前（difficult homework），动词不定式起形容词作用时一般放在名词后 (homework to finish)</strong></p><p>I have no food to eat.</p><p><strong>动词不定式和介词连用修饰名词</strong></p><p>I have no house to live in.</p><p>I need a chair to sition.</p><p>I have no friend to play with.</p><h4 id="动词不定式-副词性用法"><a href="#动词不定式-副词性用法" class="headerlink" title="动词不定式-副词性用法"></a>动词不定式-副词性用法</h4><ol><li><p>修饰 形容词， 一般 <strong>放在形容词后</strong></p><p>This book is difficult. </p><p>This book is difficult to read.   “to read” 修饰 形容词 difficult</p></li><li><p>修饰 副词</p><p>He is to young to go to school. (Hi is so yong that he can’t go to school.)， “to go” 修饰 副词 too </p></li><li><p>修饰 动词、句子</p><p>I wake up early to catch the first train. (表示目的)</p><p>She goes to the store to buy an apple.  </p><p>I am glad to meet you.  (表示理由)</p><p>He must be mad to do so.(判断的依据)</p><p><strong>grow , live,  awake  这三个动词表示结果</strong></p><ul><li>He grew up to be a teacher.  (他长大成了老师)</li><li>She lived to be eighty. (她活到了80岁)</li><li>I studied hard only to fail.  (我努力学习，但还是失败)， 表示结果</li></ul></li></ol><h2 id="动名词"><a href="#动名词" class="headerlink" title="动名词"></a>动名词</h2><p>在动词后面加-ing，起 <strong>名词</strong>作用的词就是动名词。<strong>动名词只有名词的作用</strong>， 在句子中做  <strong>主宾补</strong></p><ol><li><p>做主语</p><p>Learning English is  difficult.      =  To learn English is difficult.</p><p><strong>it  作 形式主语，动名词或动词不定式 作  真正主语</strong></p><p>It is difficult learning English.    =   It  is difficult to learn English.</p></li><li><p>做宾语</p><p>I like reading a book.   = I like to read a book.</p></li><li><p>做补语</p><p>My hobby is collecting stamps.   =  My hobby is to collect stamps.</p></li><li><p>介词的宾语</p><p>介词是具体表示时间、地点、空间的词，但单独一个介词并不完整。</p><p><strong>介词一般用于名词前，其后不接动词、形容词、副词。所有介词后用动词，一定要把动词变为动名词</strong></p><p>I  am  interested in <strong>going</strong> there.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">be interested in doing something</span><br><span class="line">be found of </span><br><span class="line">be sure of </span><br><span class="line">be proud of</span><br><span class="line">be ashamed of</span><br></pre></td></tr></table></figure></li></ol><h2 id="逻辑主语"><a href="#逻辑主语" class="headerlink" title="逻辑主语"></a>逻辑主语</h2><h5 id="动词不定式-充当逻辑主语"><a href="#动词不定式-充当逻辑主语" class="headerlink" title="动词不定式 充当逻辑主语"></a>动词不定式 充当逻辑主语</h5><p>I want to succeed.  </p><p>  **支配动词不定式（to succeed）的主体  是 逻辑主语(I)**。 I 与句子的主语一致，这是为了避免重复就不再写出逻辑主语。</p><p>I want her to succeed.</p><p>这个句子的句型为”主语+谓语+宾语+宾语补足语”。 支配动词不定式(to  succeed) 的 主体 是逻辑主语，<strong>逻辑主语 是 she， 与句子的主语 I 不一样，所有两个都要写出来</strong>。且逻辑主语，要用人称代词的<strong>宾格</strong>形式(her)</p><p><strong>在以形式主语it开头的句子中，要用”for + 宾格”写出支配动词不定式的逻辑主语。 如果形式主语it后表示人的特质或性格的形容词，要用”of + 宾格”</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">It is easy for me to teach English.</span><br><span class="line">It is impossible for her to help you.</span><br><span class="line">It was easy for me to carry the box.</span><br><span class="line"></span><br><span class="line">It kind/polite/impolite/wise/smart/foolish of + 宾格 + 动词不定式</span><br><span class="line"></span><br><span class="line">It is kind of you to help me.</span><br><span class="line">It is wise of him to tell the truth.</span><br></pre></td></tr></table></figure><h5 id="动名词-充当逻辑主语"><a href="#动名词-充当逻辑主语" class="headerlink" title="动名词 充当逻辑主语"></a>动名词 充当逻辑主语</h5><p>动名词的用法和<strong>动词不定式的名词性用法</strong>几乎一样，但在逻辑主语上有差别。<strong>动名词的逻辑主语直接使用所有格或宾格形式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">It is no use  your / you predicting the weather.</span><br><span class="line">his / him</span><br><span class="line">her / her</span><br><span class="line">Jane&#x27;s / Jane</span><br><span class="line">my mom&#x27;s / my mom</span><br></pre></td></tr></table></figure><p><strong>动名词 的逻辑主语 是 事物时，不能用所有格形式，只能用宾格形式</strong></p><p>She is always talking about my car having a good seat.</p><p>句子的主语(She) 与 支配动名词(having a good seat) 的主体 (my car) 不一致，所有要写出逻辑主语，而逻辑主语是事物，所以只能用宾格形式(my car)</p><h2 id="第三类句型的宾语形态"><a href="#第三类句型的宾语形态" class="headerlink" title="第三类句型的宾语形态"></a>第三类句型的宾语形态</h2><p>在第三类句型中**”主语 + 谓语 + 宾语”<strong>，如果</strong>动词想作宾语就要变成名词<strong>，动词变名词2中方法，</strong>动名词** 和 <strong>动词不定式的名词性用法</strong></p><p>I want to eat.    </p><h5 id="只能用动词不定式作宾语的动词"><a href="#只能用动词不定式作宾语的动词" class="headerlink" title="只能用动词不定式作宾语的动词"></a>只能用动词不定式作宾语的动词</h5><p>want、wish、hope、expect(期望)、promise、decide,  <strong>含有预期、未来的意思</strong>，<strong>表示将来会发生的事情</strong></p><p>I want to eat.   </p><p>I hope to master English.</p><h5 id="只能用动名词作作宾语的动词"><a href="#只能用动名词作作宾语的动词" class="headerlink" title="只能用动名词作作宾语的动词"></a>只能用动名词作作宾语的动词</h5><p>mind、enjoy、give up、avoid、finish、escape、stop， <strong>有”平时做…”，“过去做….”的意思</strong></p><h5 id="可以用动名词、动词不定式作宾语的动词"><a href="#可以用动名词、动词不定式作宾语的动词" class="headerlink" title="可以用动名词、动词不定式作宾语的动词"></a>可以用动名词、动词不定式作宾语的动词</h5><p>love、like、hate、begin、start、continue，<strong>一般表示现在的状态</strong></p><p><strong>有些动词不定式和动名词都可作宾语，但意思不同。 动词不定式含有未来的意思，动名词还有过去的意思</strong></p><p>I remember sending a postcard.      我记得<strong>寄过</strong>明信片</p><p>I remember to send a postcard.       我记得<strong>要寄</strong>明信片</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;动词原本在句子中应该做谓语，但可以通过改变动词的形态，让它起名词、形容词、分词的作用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动词不定式， to + V,  起 名词、形容词、副词的作用&lt;/li&gt;
&lt;li&gt;动名词，V-ing， 起 名词 的作用&lt;/li&gt;
&lt;li&gt;分词， V-ing, </summary>
      
    
    
    
    <category term="英语拾遗" scheme="https://better-jiang.github.io/categories/%E8%8B%B1%E8%AF%AD%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="语法" scheme="https://better-jiang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-句型</title>
    <link href="https://better-jiang.github.io/2022/07/15/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8F%A5%E5%9E%8B/"/>
    <id>https://better-jiang.github.io/2022/07/15/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8F%A5%E5%9E%8B/</id>
    <published>2022-07-15T00:28:39.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<h4 id="句子成分"><a href="#句子成分" class="headerlink" title="句子成分"></a>句子成分</h4><ul><li>主语： 动作的主人</li><li>谓语： 表示某人怎样？做某事？</li><li>宾语： 表示某事，动作、行为的对象</li><li>补语： 补充说明主语（”表语”）、宾语 (“宾语补足语”)</li></ul><h4 id="5类句型"><a href="#5类句型" class="headerlink" title="5类句型"></a>5类句型</h4><ul><li><p>主语 + 谓语</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                                 // + 修饰语</span><br><span class="line">I study.I study (hard).</span><br><span class="line">She teaches.She teaches (well).</span><br><span class="line">My mom cooks.My mom cooks (in the kitchen).</span><br><span class="line">We talk.We talk (loudly).</span><br></pre></td></tr></table></figure><p>由主语和谓语构成，不需要宾语或补语（<strong>谓语不需要宾语或补语</strong>），即该句型的动词称为<strong>不及物动词</strong></p><p><strong>不及物动词：</strong>可以单独使用，不需要宾语或补语的动词，以下几类动词是不及物动词</p><ul><li>有往来之意的动词，如 来、去、出发、到达等， go、come、begin、start、leave、arrive、move</li><li>存在动词，exist、be</li><li>发生动词，happen、occur</li></ul><p><strong>修饰语：</strong>指起修饰作用的词句，包括形容词、副词、介词短语、状语从句</p><p>​    Time flies (like an arrow).               Our school stands (on the hill).</p></li><li><p>主语 + 谓语 + 表语</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am (a doctor).</span><br><span class="line">She looks (happy).</span><br><span class="line">I fell (cold).</span><br></pre></td></tr></table></figure><p>动词后需要补充说明<strong>主语</strong>的状态、情况、身份等内容的词句，动词后面加上补语，句子才完整。</p><p><strong>表语可由名词、代词、形容词充当，副词、动词不可以做表语</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">She is beautifully. (X) You look happily. (X)</span><br><span class="line">She is beautiful.You look happy.</span><br></pre></td></tr></table></figure><p>可以用在”主语+谓语+表语”句型中的动词有：</p><ul><li><p>be动词，become，表示”是……”，”成为……”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I am a study.</span><br><span class="line">She i pretty. </span><br><span class="line">He became a doctor.   </span><br><span class="line">Tom became crazy.</span><br></pre></td></tr></table></figure><p><strong>be动词表示”存在、有”时，不需要表语</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">God is everywhere.    // &quot;上帝无处不在&quot; , 不需要表语就是完整的句子，属于&quot;主语+谓语&quot;</span><br><span class="line">The girl is in the kitchen.    // &quot;主语+谓语+介词短语&quot;</span><br></pre></td></tr></table></figure></li><li><p>感官动词</p><p>表示”感觉怎么样”，需要补充说明感受，所有必须<strong>接形容词表示表语</strong></p><table><thead><tr><th>视觉</th><th>look</th><th>You look beautiful</th></tr></thead><tbody><tr><td>听觉</td><td>sound</td><td>It sounds great.</td></tr><tr><td>嗅觉</td><td>smell</td><td>This smells good.</td></tr><tr><td>味觉</td><td>taste</td><td>It  tastes delicious.</td></tr><tr><td>触觉</td><td>feel</td><td>It feels soft.</td></tr></tbody></table></li><li><p>trun 、seem， 表示 “好像”、”变得”，后面必须<strong>接相应的内容进行补充说明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">He seems ill.</span><br><span class="line">The leaves turned yellow and red.</span><br></pre></td></tr></table></figure></li></ul></li><li><p>主语 + 谓语 + 宾语</p><p>相当于 谁(主语) + 做(谓语) + 什么(宾语)， 宾语的位置通常为<strong>名词、代词</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I  love you.</span><br><span class="line">I read this book.</span><br><span class="line">I need water.</span><br></pre></td></tr></table></figure><p><strong>决定句子类型的谓语动词</strong>，在此类句型中的动词都需要<strong>接宾语</strong>的动词，其自身不能表达完整的意思，后面必须接宾语，被称为<strong>及物动词</strong></p><p><strong>典型的及物动词</strong>：</p><p>​    I ike you.        He has a pet.         I read a poem.         I want some water.</p><p><strong>动词、形容词及副词不能做宾语：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You want happy.(x)You want happiness.</span><br><span class="line">He makes beautiful.(x)He makes beauty.</span><br><span class="line">I need fast.(x) I need fastness.</span><br></pre></td></tr></table></figure><p>由于汉语和英语的语言差异，有些单词后面要<strong>直接接宾语，不能加介词</strong></p><ul><li>marry 和…..结婚    <code>It&#39;s beyond me why she wants to marry me</code>.</li><li>mention 谈到          <code>Don&#39;t mention it</code>    <code>Sorry, I won&#39;t mention it again</code>.</li><li>enter 进入               <code>I enter the room.</code></li><li>resemble 与……想像    <code>I resemble my father.</code></li><li>reach   到达                  <code>I reached the station.</code>    <code>I arrived at the station</code>.</li><li>await   等待                   <code>I awaited her</code>   <code>I waited for her.</code></li><li>discuss   讨论              <code>It&#39;s hardly the time to discuss it now.</code></li><li>attend     参加，出席      <code>I attend the meeting.</code></li></ul></li><li><p>主语 + 谓语 + 间接宾语(人) + 直接宾语(事、物)  (某人给某人某物)</p><p>该句型中的动词表示”给(为)……做……”,称为做<strong>授予动词</strong>，典型的授予动词：</p><ul><li>give， I gave her flowers.</li><li>show , I will show you a picture.</li><li>bring,  She brings me a computer.</li><li>send,   He  sends her a flower.</li><li>teach,  She teaches  me  English.</li></ul><p>在间接宾语使用人称代词时，要用<strong>宾格</strong>形式</p><table><thead><tr><th>主格</th><th>宾格</th></tr></thead><tbody><tr><td>I</td><td>me</td></tr><tr><td>we</td><td>us</td></tr><tr><td>you</td><td>you</td></tr><tr><td>he</td><td>him</td></tr><tr><td>she</td><td>her</td></tr><tr><td>they</td><td>them</td></tr><tr><td>it</td><td>It</td></tr></tbody></table><p>“主语+谓语+宾语”和”主+谓+间宾+直宾”间的转换，将表示人的间接宾语移至句尾，并在其前面加上to/of/for,<strong>变成”介词+名词”形式的修饰语</strong>。需要用到介词for的动词有<code>make、buy、build、cook、choose、get、order、leave、find</code>，动词ask的间接宾语前用of</p><table><thead><tr><th>主+谓+间宾+直宾</th><th>主+谓+宾</th></tr></thead><tbody><tr><td>You teach us English.</td><td>You teach English to us.</td></tr><tr><td>I gave him money.</td><td>I gave money to him.</td></tr><tr><td>You make me a  cake.</td><td>You make a cake for me.</td></tr><tr><td>She bought me a bike.</td><td>She bought a bike for me.</td></tr><tr><td>I found her the ring.</td><td>I found the ring for her.</td></tr><tr><td>May I ask you a favor?</td><td>May I ask a favor of you?</td></tr></tbody></table></li><li><p>主语 + 谓语 + 宾语 + 宾语补足语</p><p>“主语+谓语+表语”，中的补语是补充说明主语的，称之为表语. He is a spy.</p><p>“主语 + 谓语 + 宾语 + 宾语补足语”中补语是补充说明宾语的。  We call him a spy.</p><p><strong>典型动词,其宾语补足语要用名词、形容词充当</strong></p><ul><li>make， 把……制作成…..</li><li>keep,  让…..保持……</li><li>call,  把…..叫做……</li><li>think,  认为……</li><li>find, 找…..</li><li>believe, 相信…..</li><li>elect， 把……选为…..</li></ul><p>当谓语动词是<strong>感官动词</strong>或<strong>使役动词</strong>时，可以用<strong>动词</strong>做宾语补足语， 当宾语是无法独立完成动作时，宾语补足语要使用<strong>过去分词</strong>(含有被动意思)</p><ul><li><p>感官动词，see、watch、look at、smell、taste、hear、listen to、feel、perceive， 宾语补足语用<strong>动词原形，或 现在分词（V-ing）</strong></p><p>V-ing 表示 感受到<strong>现在正在进行</strong>的动作，动词原形表示感受到了动作的<strong>全部过程</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I hear him sing.I hear him singing.</span><br><span class="line">I saw her clean the room.I saw her celaning the room.</span><br><span class="line">You see me dance.(看到跳舞的全过程)</span><br><span class="line">You see me dancing.  (看到跳舞的某个瞬间)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使役动词，表示”让做某事”，”指使做某事”， 典型的使役动词，make、have、let</p><p>make、let 的宾语补足语只能用动词原形，不能用V-ing</p><p>have 同感官动词一样，当宾语或宾语补足语是主动、进行时，宾语补足语可以用V-ing</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">My mom makes me study.</span><br><span class="line">My dad has me clean the car.</span><br><span class="line">You let me go.</span><br><span class="line"></span><br><span class="line">My teacher has him running.</span><br><span class="line">I had a kite flying high in the sky.</span><br></pre></td></tr></table></figure></li><li><p>当宾语是无法独立完成动作的事物时，宾语补足语要用含有被动意思的<strong>过去分词</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I heard the music played.   // 音乐被演奏</span><br><span class="line">I heard my name called.    // 名字被叫</span><br><span class="line">I saw a girl carried into the hospital.    </span><br><span class="line"></span><br><span class="line">I had my hair permed.  // 头发被烫</span><br><span class="line">I made my car repaired by enginner.  // 车被修理</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="口诀"><a href="#口诀" class="headerlink" title="口诀"></a>口诀</h4><blockquote><p><strong>名词就作”主宾补”， 补语就是”名代形”</strong></p><p>1、主语 + 感官动词 / 使役动词 + 宾语(人，表示主动) + 动词原形 / 现在分词V-ing</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I saw her  go/going out of the room.</span><br><span class="line">I made my younger brother study for the exam.</span><br></pre></td></tr></table></figure><p>2、主语 + 感官动词 / 使役动词 + 宾语(物，表示被动)  + 过去分词</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I heard my name called.</span><br><span class="line">I made this box broken.</span><br><span class="line">I had the box carried by the boy.</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;句子成分&quot;&gt;&lt;a href=&quot;#句子成分&quot; class=&quot;headerlink&quot; title=&quot;句子成分&quot;&gt;&lt;/a&gt;句子成分&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;主语： 动作的主人&lt;/li&gt;
&lt;li&gt;谓语： 表示某人怎样？做某事？&lt;/li&gt;
&lt;li&gt;宾语： 表示某事，动作、</summary>
      
    
    
    
    <category term="英语拾遗" scheme="https://better-jiang.github.io/categories/%E8%8B%B1%E8%AF%AD%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="语法" scheme="https://better-jiang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>小白笔记-shell</title>
    <link href="https://better-jiang.github.io/2022/07/14/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-shell/"/>
    <id>https://better-jiang.github.io/2022/07/14/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-shell/</id>
    <published>2022-07-14T09:02:50.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello jiang !&quot;</span><br><span class="line"></span><br><span class="line">for file in `ls /etc`;do</span><br><span class="line">  echo $file</span><br><span class="line">done  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用变量</span></span><br><span class="line">name=&quot;jiang&quot;</span><br><span class="line">echo $&#123;name&#125;</span><br><span class="line">echo $name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">变量名 使用 花括号，确定变量的边界</span></span><br><span class="line">for skill in Ada Coffe Action Java;do</span><br><span class="line">  echo &quot;I am good at $&#123;skill&#125;Script&quot;</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">readonly</span> 定义只读变量</span></span><br><span class="line">myUrl=&quot;https://betterjiang.com&quot;</span><br><span class="line">echo $&#123;myUrl&#125;</span><br><span class="line">readonly myUrl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">myUrl=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greeting_2=&#x27;hello, &#x27;$&#123;name&#125;&#x27; !&#x27;</span><br><span class="line">echo $greeting_2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字符串长度</span></span><br><span class="line">echo $name $&#123;#name&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提取字符串</span></span><br><span class="line">echo $&#123;name:1:4&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义数组</span></span><br><span class="line">array=(jiang1 2 3 4jiang 5 6six)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数组长度</span></span><br><span class="line">length=$&#123;#array[@]&#125;</span><br><span class="line">echo $&#123;array[2-1]&#125;</span><br><span class="line">echo $length</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数组元素</span></span><br><span class="line">echo $&#123;array[*]&#125;</span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">多行注释。。。。</span><br><span class="line">多汗，多雨</span><br><span class="line">!</span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">line1</span><br><span class="line">里呢</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="shell" scheme="https://better-jiang.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>小白笔记-pnpm</title>
    <link href="https://better-jiang.github.io/2022/06/22/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-pnpm/"/>
    <id>https://better-jiang.github.io/2022/06/22/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-pnpm/</id>
    <published>2022-06-22T06:15:55.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<p>performant npm，高性能的 npm，由 npm、yarn 衍生而来，解决了 npm/yarn 内部潜在的 bug，极大的优化了性能。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>速度快，安装高效</p></li><li><p>节省磁盘空间</p><p>当使用 npm 或 yarn 时，如果有 100 个项目使用到某个依赖(dependency)，就会有 100 份改依赖的副本保存在硬盘上。使用 pnpm 时，依赖会被存储在内容可寻址的存储中(the denpendency wil be sotred in a content-addressable store),所有</p><ul><li>用到某个依赖的不同版本，只会将<strong>不同版本有差异的文件</strong>添加到仓库</li><li>所有的文件都会存储在硬盘的某一个位置。当软件包被安装时，包里的文件会<strong>硬链接</strong>到该位置，不会再占用额外的磁盘空间。可<strong>允许跨项目的共享同一版本的依赖</strong>。</li></ul></li><li><p>优化了依赖的 node_modules 结构，创建<strong>非扁平化</strong>的 node_modules 文件夹</p><ul><li>使用 npm 或 yarn 安装依赖项时，所有的包都<strong>被提升到模块目录的根目录</strong>，因此，项目可以访问到未被添加进当前项目的依赖</li><li>默认情况下，pnpm 使用<strong>软链</strong>的方式将项目的直接依赖<strong>添加进模块文件夹的根目录</strong></li></ul></li><li><p>内置了对 Monorepo 的支持，无需在引入 lerna</p></li></ul><h3 id="npm、yarn-面临的问题"><a href="#npm、yarn-面临的问题" class="headerlink" title="npm、yarn 面临的问题"></a>npm、yarn 面临的问题</h3><h4 id="Npm-安装包的过程"><a href="#Npm-安装包的过程" class="headerlink" title="Npm 安装包的过程"></a>Npm 安装包的过程</h4><ul><li>先检查 <code>.npmrc</code>文件，包含以下 npm 配置信息，如 registry,全局缓存目录等</li><li>读取 package.json 文件中的依赖信息，根据<strong>semver</strong>语义化版本信息生成完整的版本依赖树</li><li>先查询本地缓存目录，如果有缓存就直接使用，如果不存在，再去 npm 仓库下载到的缓存目录，此过程，会校验包的哈希，以保证安全性</li></ul><p>上述过程中依赖树可能存在大量重复的模块，因为它按依赖树的结构进行安装，比如 A，B 模块都依赖了 C 模块，那么 C 模块会在 A、B 模块的 node_modules 目录内重复安装，造成大量的重复和冗余。</p><p><img src="/image/image-20220622162106602.png" alt="image-20220622162106602"></p><p>npm3 进行了优化，加入了<code>dedupe模块扁平化</code>，尽可能的将所有依赖都发到<strong>最顶层</strong>node_modules 目录下，如果有重复的模块，且版本相互兼容，就会只保留一个，丢弃其它的。如果版本不兼容，那么<strong>只有一个被提升到顶层</strong>，其它的会放在其父依赖的 node_modules 目录下，而哪一个被提升到顶层可能不固定，所有在 npm5+版本中新增了<code>package-lock.json</code>用于<strong>锁定依赖结构</strong>，确保每一次安装出来的目录结构和依赖版本相同。</p><p><img src="/image/image-20220622162714637.png" alt="image-20220622162714637"></p><h4 id="phantom-dependencies-幽灵依赖"><a href="#phantom-dependencies-幽灵依赖" class="headerlink" title="phantom dependencies (幽灵依赖)"></a>phantom dependencies (幽灵依赖)</h4><p>由于扁平化的处理方式， 用户可以引用 package.json 中没有声明的依赖。 比如项目 1 使用 依赖 A，其中 A 有一个 A1 包，由于扁平化 A1 包会别提升到项目 node_modules 下，此时在项目 1 中可直接使用 A1 包，将来 A 升级或不在使用 A1 包，那么项目 1 就会出现异常或报错</p><h4 id="npm-dopplelgangers-npm-包分身"><a href="#npm-dopplelgangers-npm-包分身" class="headerlink" title="npm dopplelgangers (npm 包分身)"></a>npm dopplelgangers (npm 包分身)</h4><p>npm 扁平化的处理机制，可能导致心魔中应用多个版本的包，从而导致</p><ul><li>需要安装多个版本包</li><li>打包出来的文件可能包含多个包</li><li>如果该包需要用到单例，会出现异常</li></ul><h3 id="pnpm-原理"><a href="#pnpm-原理" class="headerlink" title="pnpm 原理"></a>pnpm 原理</h3><p>pnpm 安装依赖后 node_modules 目录大概如下：</p><p><img src="/image/image-20220622165200478.png" alt="image-20220622165200478"></p><p>其中 node_modules 包含 <code>.bin</code>,<code>.pnpm</code>目录以及其它的 npm 包，这些 npm 包与 package.json 中声明的保持一致，因此只有 package.json 中声明过的依赖才能在项目中使用，从而避免了幽灵依赖的问题。</p><p>不同于 npm,这些 npm 包都是 <strong>symbolic link 符号链接，指向了.pnpm 目录下的包</strong></p><p><strong>.pnpm 下的包名规则是</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;organization-name&gt; + &lt;package-name&gt;@&lt;version&gt;/node_modules/&lt;name&gt;</span><br><span class="line">组织名+包名@版本号/node_modules/名称(项目名)</span><br><span class="line">typescript@4.7.4/node_modules/typescript</span><br></pre></td></tr></table></figure><p><img src="/image/image-20220622170327166.png" alt="image-20220622170327166"></p><p>因为.pnpm 里面的包路径中加入了<strong>版本号信息</strong>，因此可以在<strong>同一目录下相对扁平化的存储所有的包</strong>，</p><p>由于每个包又有自己的依赖，为了迎合 node.js 的包查找规则，因此上面的包命名规则中有添加了一层 node_modules 目录，本包的依赖也会在这个目录 内创建 Symbolic link 符号链接，链接到.pnmp 顶层上的包，通过此法，使得每一个包都能正常的使用自己的依赖，但不会污染到顶层的 node_modules,从而避免幽灵依赖的问题</p><p><img src="/image/image-20220622171758946.png" alt="image-20220622171758946"></p><blockquote><p>注： node_modules 目录下还存在一部分没有在 package.json 中声明的依赖，比如<code>@jest/type</code>,<code>@vitejs</code>，这是因为一部分包需要在顶层才能使用，比如 eslint、typescript 声明，prettier 插件等，pnpm 会默认将包名含 types，eslint、prettier 等关键词的包提升到顶层。可通过<code>.npmrc</code>中设置<code>public-hoist-pattern[]=</code>来关闭这些提升</p></blockquote><h4 id="Hard-Link-和-Store"><a href="#Hard-Link-和-Store" class="headerlink" title="Hard Link 和 Store"></a>Hard Link 和 Store</h4><p>在 linux 文件系统中，保存在磁盘分区中文件都会分配一个编号，称为索引编号(inode index)，文件名和 inode 通常是一一对应的，且允许<strong>多个文件名指向同一个 inode</strong>, <strong>删除任何一个文件名并不会对 inode 或其它文件有影响</strong>。只有当最后一个硬链接删除后才回收 inode 编号并标记对应的 block 为可用，等待其它数据存储后抹去其内容。如此，同一个文件可以有多个文件路径和文件名，但在磁盘中仅仅只有一份内容，避免了重复占用。</p><p>项目的 node_modules 目录下的所有文件都是通过硬链接的方式链接到全局 pnpm store 内的文件，以.pnpm 目录下的 vue 为例， 查看 README.md 文件的 inode 编号：64817529</p><p><img src="/image/image-20220622185716656.png" alt="image-20220622185716656"></p><p>进入 pnpm 全局 stroe 路径，查找 inode 编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Users/liuzhenjiang948/.pnpm-store  // 全局目录</span><br><span class="line">find . -inum 64817529   // 查找对应 inode</span><br></pre></td></tr></table></figure><p><img src="/image/image-20220622190031040.png" alt="image-20220622190031040"></p><p>所有 npm 包里面的<strong>所有文件都会在全局进行存储</strong>,存储是根据文件的哈希信息进行散列，这样可以扁平化的存储，而不用按原始的 npm 包目录结构进行存储，节省大量磁盘空间。</p><h3 id="pnpm-install-安装包的大致过程"><a href="#pnpm-install-安装包的大致过程" class="headerlink" title="pnpm install 安装包的大致过程"></a>pnpm install 安装包的大致过程</h3><ul><li>判断是否有 <code>pnpm-lock.yaml</code>文件，<ul><li>如果没有，则根据<code>package.json</code>中声明的版本计算依赖树以及各版本 npm 包的 integrity 值</li><li>如果有 且版本跟 package.json 中声明的匹配，就根据<code>pnpm-lock.yaml</code>中各个依赖包的 integrity 信息，并计算对应的 -index.json 文件的完整哈希和路径</li><li>如果 stroe 里面有对应的包的-index.json 文件，即有该包的缓存</li><li>如果没有的话需联网下载对应的 tar 包，并生成对应的-index.json 文件，并且将包内的文件计算 integrityz 值和哈希</li><li>对整个依赖树进行完以上操作后再项目内的 node_modules 目录创建个依赖的符号链接和文件的硬链接完成安装</li></ul></li></ul><h3 id="CLI-命令"><a href="#CLI-命令" class="headerlink" title="CLI 命令"></a>CLI 命令</h3><ul><li><p>pnpm add <pkg>, <code>-D 安装到 devDependencies</code>, <code>-O 安装到 optionalDependencies</code></p></li><li><p>pnpm install （i）, 安装项目所有依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Packages are copied from the content-addressable store to the virtual store.</span><br><span class="line">  Content-addressable store is at: /Users/liuzhenjiang948/Library/pnpm/store/v3</span><br><span class="line">  Virtual store is at:             node_modules/.pnpm</span><br></pre></td></tr></table></figure><table><thead><tr><th>配置项</th><th>默认值/类型</th><th>说明</th></tr></thead><tbody><tr><td>–offline</td><td>false</td><td>为 true，仅使用在<code>store</code>中已有的包，本地找不到，安装失败</td></tr><tr><td>–ignore-scripts</td><td>false</td><td>不执行任何项目中<code>package.json</code>和它依赖项中定义的任何脚本</td></tr><tr><td>–ockfile-only</td><td>fasle</td><td>只更新<code>pnpm-lock.yaml</code>和<code>package.json</code>，不写入<code>node_modules</code>目录</td></tr><tr><td>–fix-lockfile</td><td></td><td>自动修复损坏的 lock 文件入口</td></tr><tr><td>—reporter=<name></td><td>default, silent, append-only, ndjson</td><td>silent: 除致命 errors，不输出记录信息<br />ndjson: 最详细记录信息</td></tr></tbody></table></li><li><p>pnpm update (up), 更新软件包的最新版本</p><table><thead><tr><th>命令，配置项</th><th>说明</th></tr></thead><tbody><tr><td>pnpm up</td><td>按 <code>package.json</code>指定的范围更新所有的依赖项</td></tr><tr><td>pnpm up –latest</td><td>更新所有依赖项，忽略<code>package.json</code>指定的范围</td></tr><tr><td>pnpm up –recursive</td><td>递归更新子目录中的依赖包</td></tr><tr><td>pnpm up –global</td><td>更新全局安装的依赖包</td></tr></tbody></table></li><li><p>pnpm remove (rm,un,uninstall), 删除指定的包</p></li><li><p>pnpm link (ln)， 使当前本地包 可在<strong>系统范围内 或 其他位置 访问</strong></p><p>在项目开发时，需要将一些公用的代码抽离发布成 npm 包，作为项目的依赖去安装使用。但在开发调试中需要频繁的打包发布，再安装依赖，很不方便。为解决此问题，可以使用 link 命令将模块链接到项目中。</p><ul><li>假设 项目名 project-jiang，和一个公用组件模块 common，现在需要在项目中使用 common,且 common 是作为项目的 npm 包依赖。</li><li>在 common 目录下使用 <code>pnpm link</code> ,将 common 模块创建成本地依赖包</li><li>在 project-jiang 项目中，使用 <code>pnpm link common</code> 和本地 common 模块建立链接。此时该项目中的 node_modules 里就会添加一个 common 模块的软连接</li></ul></li><li><p>pnpm unlink， 取消链接一个系统访问的 package</p></li><li><p>pnpm import, 从另一个软件包管理器的 lock 文件生产 <code>pnpm-lock.yaml</code>， 支持的源文件 <code>package-lock.json</code>,<code>yarn.lock</code>,<code>npm-shrinkwrap.json</code></p></li></ul><h4 id="查看依赖"><a href="#查看依赖" class="headerlink" title="查看依赖"></a>查看依赖</h4><ul><li>pnpm audit, 检查已安装包的已知安全问题，如果发现问题，尝试使用<code>pnpm update</code>，<code>pnpm audit --fix</code></li><li>pnpm list, 以树形结构输出所有的已安装<code>package</code>的版本及其依赖</li><li>pnpm outdated， 检查过期的 packages</li></ul><h4 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><ul><li><p>pnpm run ， 运行一个在 package 文件定义的脚本</p></li><li><p>pnpm test, 运行在<code> package</code> 的<code> scripts</code> 对象中<code>test</code> 属性指定的任意的命令</p></li><li><p>pnpm exec, 在项目访问内执行 shell</p></li><li><p><strong>pnpm dlx</strong>, 从源中获取包而不将其安装为依赖，热加载，并运行它公开的任何默认命令的二级制文件</p><p>例如 <code>pnpm dlx create-react-app my-app</code>, 使用 <code>create-react-app</code>来初始化一个 react 应用</p></li><li><p>pnpm create， 从<code>create-*</code>或<code>@foo/create-*</code>启动套件创建项目， 例如<code>pnpm create react-app my-app</code></p></li></ul><h4 id="管理-Node-环境"><a href="#管理-Node-环境" class="headerlink" title="管理 Node 环境"></a>管理 Node 环境</h4><p><strong>pnpm env <cmd></strong></p><ul><li><p>安装并使用指定版本 node.js</p><p><code>pnpm env use --global lts</code>, <code>pnpm env use --global 16</code>, <code>pnpm env use --global latest</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;performant npm，高性能的 npm，由 npm、yarn 衍生而来，解决了 npm/yarn 内部潜在的 bug，极大的优化了性能。&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="pnpm" scheme="https://better-jiang.github.io/tags/pnpm/"/>
    
  </entry>
  
  <entry>
    <title>小白笔记-redis</title>
    <link href="https://better-jiang.github.io/2022/06/21/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-redis/"/>
    <id>https://better-jiang.github.io/2022/06/21/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-redis/</id>
    <published>2022-06-21T14:01:49.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Redis特点"><a href="#Redis特点" class="headerlink" title="Redis特点"></a>Redis特点</h4><ul><li>高性能，可持久化</li><li>key-value 结构，支持多种数据类型</li><li>支持事务，数据具有原子性</li></ul><h4 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h4><ul><li>缓存 （读写性能优异）</li><li>计数、消息系统（高并发，发布/订阅阻塞队列功能）</li><li>分布式会话session，分布式锁</li></ul><h4 id="Redis-CLi"><a href="#Redis-CLi" class="headerlink" title="Redis CLi"></a>Redis CLi</h4><ul><li><p>Redis  命令参数 <a href="http://doc.redisfans.com/index.html">http://doc.redisfans.com/index.html</a></p></li><li><p>设置/取值</p></li><li><p>databases  16  数据库隔离</p></li><li><p>keys *, 查询 所有key键</p></li><li><p>exists test, 检查 key 键 是否存在</p></li><li><p>del test, 删除 key 键</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Redis特点&quot;&gt;&lt;a href=&quot;#Redis特点&quot; class=&quot;headerlink&quot; title=&quot;Redis特点&quot;&gt;&lt;/a&gt;Redis特点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;高性能，可持久化&lt;/li&gt;
&lt;li&gt;key-value 结构，支持多种数据类型&lt;/li&gt;</summary>
      
    
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="redis" scheme="https://better-jiang.github.io/tags/redis/"/>
    
  </entry>
  
</feed>
