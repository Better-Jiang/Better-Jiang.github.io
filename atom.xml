<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱学兮的小江</title>
  
  
  <link href="https://better-jiang.github.io/atom.xml" rel="self"/>
  
  <link href="https://better-jiang.github.io/"/>
  <updated>2023-02-03T12:33:10.477Z</updated>
  <id>https://better-jiang.github.io/</id>
  
  <author>
    <name>刘振江</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>继续生活</title>
    <link href="https://better-jiang.github.io/2023/02/03/%E7%BB%A7%E7%BB%AD%E7%94%9F%E6%B4%BB/"/>
    <id>https://better-jiang.github.io/2023/02/03/%E7%BB%A7%E7%BB%AD%E7%94%9F%E6%B4%BB/</id>
    <published>2023-02-03T12:19:45.000Z</published>
    <updated>2023-02-03T12:33:10.477Z</updated>
    
    <content type="html"><![CDATA[<p><strong>不管如何，是开心，还是失落，难过，无助，无可奈何？</strong><br><strong>生活总要继续，没有选择。</strong><br>既然别无选择，何不欣然接受。<br>心情好与坏，今天都会过去。<br>工作上，担忧和自在，今天也都会下班。<br>学习不，晨读不，看视频不，做作业不？<br>其实都有的选，怎样选，如何做，计划好的截止日一定会来，<br>成果如何，该后悔，还是恭喜，也造就注定了。<br>因为你欺骗不了自己，永远都不会。<br>所以，好好生活，认真点，用心点，多做些准备，<br>那幻想中的一刻来临时，<br>那预料之外的不幸突袭而至时，<br>那计划好的结果，一步步靠近时，<br>才不致慌张无措，悲喜无常。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;不管如何，是开心，还是失落，难过，无助，无可奈何？&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;生活总要继续，没有选择。&lt;/strong&gt;&lt;br&gt;既然别无选择，何不欣然接受。&lt;br&gt;心情好与坏，今天都会过去。&lt;br&gt;工作上，担忧和自在，今天也都会下班。&lt;br&gt;学</summary>
      
    
    
    
    <category term="上班摸鱼写散文" scheme="https://better-jiang.github.io/categories/%E4%B8%8A%E7%8F%AD%E6%91%B8%E9%B1%BC%E5%86%99%E6%95%A3%E6%96%87/"/>
    
    
    <category term="一碗鸡汤" scheme="https://better-jiang.github.io/tags/%E4%B8%80%E7%A2%97%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>js疑难治愈</title>
    <link href="https://better-jiang.github.io/2022/08/20/js%E7%96%91%E9%9A%BE%E6%B2%BB%E6%84%88/"/>
    <id>https://better-jiang.github.io/2022/08/20/js%E7%96%91%E9%9A%BE%E6%B2%BB%E6%84%88/</id>
    <published>2022-08-20T00:50:12.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<h3 id="typeof、instanceof-检测数据类型"><a href="#typeof、instanceof-检测数据类型" class="headerlink" title="typeof、instanceof 检测数据类型"></a>typeof、instanceof 检测数据类型</h3><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p><a href="https://262.ecma-international.org/13.0/#sec-typeof-operator">ecma-262 / typeof operator</a></p><table><thead><tr><th>typeof val</th><th>Result</th></tr></thead><tbody><tr><td>Undefined</td><td>“undefined”</td></tr><tr><td>Null</td><td>“object”</td></tr><tr><td>Boolean</td><td>“boolean”</td></tr><tr><td>Nubmer</td><td>“number”</td></tr><tr><td>String</td><td>“string”</td></tr><tr><td>Symbol</td><td>“symbol”</td></tr><tr><td>BigInt</td><td>“bigint”</td></tr><tr><td>Object (does not implement [[Call]])</td><td>“object”</td></tr><tr><td>Ojbect  (implements [[Call]])</td><td>“function”</td></tr></tbody></table><h4 id="Instanceof"><a href="#Instanceof" class="headerlink" title="Instanceof"></a>Instanceof</h4><p><strong><code>object instanceof constructor</code> 检测构造函数的<code>prototype</code> 属性是否出现在某个实例对象的原型链上</strong> </p><p><strong>注意：一个对象的原型链是会改变的</strong></p><p> 如果<code>obj instanceof Foo</code>返回 <code>true</code>，并不意味着该表达式会永远返回<code>true</code>，因为：</p><ul><li><code>Foo.prototype</code>属性的值可能会改变，改变之后的值可能不存在于<code>obj</code>的原型链上，此时原表达式的值就会为<code>false</code></li><li>对象obj的原型链也可能改变，借助<code>__proto__</code>伪属性，可以改变对象的原型链。<code>obj.__proto__=&#123;&#125;</code>，则<code>obj instanceof Foo</code>返回false</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a =  <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">a <span class="keyword">instanceof</span> A; <span class="comment">// true, Object.getPrototypeOf(a)  === A.prototype; A.protoptype.isPrototypeOf(a) 返回true； </span></span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true, </span></span><br><span class="line"></span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> = &#123;&#125;;  <span class="comment">// 设置 A.prototype 指向一个空对象</span></span><br><span class="line"><span class="keyword">let</span> a2 = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">a2 <span class="keyword">instanceof</span> A; <span class="comment">// true</span></span><br><span class="line">a <span class="keyword">instanceof</span> A;  <span class="comment">// fasle,  A.prototype 指向了一个空对象，这个空对象不在a 的原型链上</span></span><br><span class="line"></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">A</span>();  <span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">let</span> a3 = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">a3 <span class="keyword">instanceof</span> B; <span class="comment">// true</span></span><br><span class="line">a3 instancof A;  <span class="comment">// true, 因为 A.prototype 在 a3 的原型链上</span></span><br></pre></td></tr></table></figure><h3 id="数据的存储形式-堆栈"><a href="#数据的存储形式-堆栈" class="headerlink" title="数据的存储形式-堆栈"></a>数据的存储形式-堆栈</h3><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><ul><li>自动分配的内存空间，在代码执行过程中自动释放。 </li><li>在栈区内存会创建一个JS代码执行的环境，<strong>作用域、函数的调用</strong>都在栈内存中执行。</li><li>JS的基本数据类型，占用空间大小固定，其值是直接保存在栈内存中，按值访问。</li><li>对于Ojbect的引用类型，其<strong>指针</strong>存储在栈内存中，<strong>指向堆内存</strong>的实际地址，通过<strong>引用访问</strong></li></ul><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul><li><p>动态分配堆内存，大小不定，不会自动释放。</p></li><li><p>堆内存中存储实际对象，在栈内存中存储对象的指针。对象的访问是<strong>按引用访问</strong>的</p></li><li><p>在堆区的内存不会自动释放，需要实现垃圾回收机制（GC）</p><p>因为在栈区指向的变量等是通过值访问的，当前作用域销毁后变量也就随之销毁，而使用引用访问是堆区变量，在作用域消失后，可能在外层作用域仍然存在引用，不能直接销毁，此时就需要判断此变量是否属于不再需要的变量，从而决定是否进行内存回收。</p></li><li><p>在Js中主要有 <strong>引用计数</strong> 和 <strong>标记清除</strong> 两种垃圾回收算法</p></li></ul><h3 id="深、浅拷贝"><a href="#深、浅拷贝" class="headerlink" title="深、浅拷贝"></a>深、浅拷贝</h3><ul><li><p>递归方式 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅 实现 数组、对象的深拷贝，其它 例如Date,Fucntion, RegExp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cloneDeep</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> objClone = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(obj[key] &amp;&amp; type <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          objClone[key] = <span class="title function_">cloneDeep</span>(obj[key]);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          objClone[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> objClone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Object.assign(),  <strong>仅深拷贝对象的一级属性</strong></p></li><li><p>$.extend(true,{},{a:1,b:2})</p></li><li><p>loadsh.cloneDeep()</p></li></ul><h3 id="编码、解码使用场景"><a href="#编码、解码使用场景" class="headerlink" title="编码、解码使用场景"></a>编码、解码使用场景</h3><p>在URL地址，不允许出现非ASCII字符，如果URL地址中包含中文字符，就必须堆中文字符进行编码（转义）</p><h5 id="encodeURI-encodeURIComponent"><a href="#encodeURI-encodeURIComponent" class="headerlink" title="encodeURI()  /     encodeURIComponent()"></a>encodeURI()  /     encodeURIComponent()</h5><ul><li><p>encodeURI 通常用于转码整个 URI， 其不会进行编码的字符包括<code>; , / ? : @ &amp; = + $ - _ . ! ~ * &#39; ( ) #</code></p></li><li><p>encodeURIComponent ，仅用于转码 URI的组成部分（？后面的参数）， 其不会进行编码的字符包括 <code>- _ . ! ~ * &#39; ( ) </code></p></li><li><p>如果使用 encodeURIComponent 对整个URL进行编码，<code>/ :</code>字符会被编码； 使用 encodeURL 对整个URL进行编码，<code>&amp; + =</code>不会别编码，这GET、POST请求中是特殊字符，应该被编码。所以正确方法，<strong>使用 encodeURIComponent,仅对参数进行编码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;https://developer.mozilla.org/en-US/search?q=闭包&amp;a=123&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURI</span>(url)); <span class="comment">// https://developer.mozilla.org/en-US/search?q=%E9%97%AD%E5%8C%85</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURIComponent</span>(url)); <span class="comment">// https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fsearch%3Fq%3D%E9%97%AD%E5%8C%85</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="string">&quot;https://developer.mozilla.org/en-US/search?q=&quot;</span> +</span><br><span class="line">    <span class="built_in">encodeURIComponent</span>(<span class="string">&quot;闭包&amp;a=123&quot;</span>)</span><br><span class="line">);    <span class="comment">// https://developer.mozilla.org/en-US/search?q=%E9%97%AD%E5%8C%85%26a%3D123</span></span><br></pre></td></tr></table></figure><ul><li><strong>为避免服务器收到不可预知的请求，对任何用户的输入作为URI部分的内容都需要encodeURIComponent 进行转义</strong>。例如，用户可能输入<code>闭包&amp;a=123</code>作为参数q的值，如果不对此内容进行转义，服务器得到的将是<code>q=闭包&amp;a=123</code>,即两个键值对（q=闭包，a=123），而不是一个键值对(q=闭包&amp;a=123)</li></ul></li></ul><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>隐式类型转换 是在一定场景下，js运行环境会自动调用👇🏻几个方法，尝试转换成期望的数据类型</p><ul><li><p>ToString, 其他类型的值转换为字符串类型</p><ul><li>null， “null”</li><li>undefined，”undefined”,</li><li>布尔类型，”true”, “false”</li><li>数字类型，10，”10”, 1e21 , “1e+21”</li><li>数组，相当于调用<code>Array.prototype.join()</code>方法，[1,2,3] 转换 “1,2,3”, 空数组[]转换为空字符串’’， <strong>数组中的null,undefined，会被当做 <code>&quot;&quot;</code>空字符串处理</strong></li><li>对象，相当于调用<code>Object.prototype.toString()</code>，返回”[object Object]”</li></ul></li><li><p>ToNumber</p><ul><li>null, 0</li><li>undefined， NaN</li><li>字符串，纯数字形式，转换为对应的数字，空字符串转换为0， 否则按失败处理，转换为 NaN</li><li>数组，首先会被转换为原始类型（ToPrimitive）,然后在根据转换后的原始类型处理</li></ul></li><li><p>ToBoolean</p><p>js中的假值，只有 <code>false</code>,<code>null</code>,<code>undefined</code>,<code>&quot;&quot;</code>,<code>0</code>,<code>NaN</code>， 其它值转化为布尔值都为true</p></li><li><p>ToPrimitive，  <strong>对象类型（对象、数组）转化为原始类型的操作</strong></p><ul><li>当对象类型需要转化为原始类型时，会向查找对象的<code>valueOf</code>方法，如果<code>valueOf()</code>方法返回原始类型的值，则结果就是该值</li><li>如果对象的<code>valueOf()</code>不存在，或者<code>valueOf()</code>方法返回的不是原始类型的值，则会去调用对象的<code>toString()</code>方法，且遵循对象的<code>ToString</code>规则，则<code>toString()</code>的返回值作为<code>ToPrimitive</code>的结果</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;typeof、instanceof-检测数据类型&quot;&gt;&lt;a href=&quot;#typeof、instanceof-检测数据类型&quot; class=&quot;headerlink&quot; title=&quot;typeof、instanceof 检测数据类型&quot;&gt;&lt;/a&gt;typeof、instanc</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="面试" scheme="https://better-jiang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>小白笔记-grunt</title>
    <link href="https://better-jiang.github.io/2022/08/13/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-grunt/"/>
    <id>https://better-jiang.github.io/2022/08/13/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-grunt/</id>
    <published>2022-08-13T01:56:40.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<p>Grunt 侧重对整个过程的控制管理，是任务类型的的打包工具，代码检查、预编译、合并压缩；生成雪碧图、sourceMap、版本管理；运行单元测试、监控等。</p><h4 id="Grunt-执行异步任务"><a href="#Grunt-执行异步任务" class="headerlink" title="Grunt 执行异步任务"></a>Grunt 执行异步任务</h4><ul><li>执行异步任务的回调函数不能使用箭头函数</li><li>异步任务完成需要调用任务内置函数告知已经完成</li></ul><h4 id="Grunt-标记任务失败"><a href="#Grunt-标记任务失败" class="headerlink" title="Grunt 标记任务失败"></a>Grunt 标记任务失败</h4><ul><li>同步任务通过 <strong>return false</strong>来标记任务失败</li><li>异步任务通过内置函数 done 传递 false 参数 ***done(false)**来标记任务失败</li><li>如果多任务执行，只要标记任务失败，后续任务将不在执行。添加 <code>--force</code>选项，会强制执行后续任务</li></ul><h4 id="Grunt-设置配置"><a href="#Grunt-设置配置" class="headerlink" title="Grunt 设置配置"></a>Grunt 设置配置</h4><ul><li>使用 <code>initConfig</code> 方法去配置参数</li><li>使用 <code>grunt.config</code> 方法来获取参数</li></ul><h4 id="Grunt-插件使用"><a href="#Grunt-插件使用" class="headerlink" title="Grunt 插件使用"></a>Grunt 插件使用</h4><ul><li>Grunt 插件命名规则 <code>grunt-contrib-任务名</code> 或 <code>grunt-任务名</code></li><li>Grunt 常用插件 样式预编译、JS编译、文件监听</li><li>使用插件前，需要使用**<code>loadNpmTasks</code>**方法加载插件，然后才可以使用。<code>load-grunt-tasks</code>插件可自动加载所有插件</li></ul><h4 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h4><p>npx是一个npm包执行器，有如下特点：</p><ul><li><p>临时安装可执行依赖包，不用全局安装，故不用担心长期的污染</p></li><li><p>可以执行依赖包中的命令，安装完成自动运行</p></li><li><p>自动加载 <code>node_modules</code>中依赖包，而无需指定<code>$PATH</code>,还可以指定node.js版本，命令的版本。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 指定uglify-js 版本，npx 运行时，会到node_modules/.bin路径 和 环境变量$PATH里检查命令是否存。</span><br><span class="line">// 如果找不到，会临时安装，然后执行</span><br><span class="line">npx uglify-js@3.1.0 ./test/test_npx.js -o ./test/haha.js</span><br><span class="line"></span><br><span class="line">//  指定node版本的</span><br><span class="line">npx -p node@8 npm run build</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><p>Gulp在4.0版本之后，无需引入gulp，然后在注册任务才可以调用，现在可直接通过exports导出任务。且<strong>取消了同步任务</strong>，约定每次任务执行完成后，都要调用回调函数的方法参数才可以。</p><h3 id="Gulp-异步任务的多种形式"><a href="#Gulp-异步任务的多种形式" class="headerlink" title="Gulp 异步任务的多种形式"></a>Gulp 异步任务的多种形式</h3><ul><li><ol><li>回调函数，<br>标记任务失败，在方法done中传入错误对象。<strong>其后面的任务也不会在执行</strong></li></ol></li><li><ol start="2"><li>promise<br>Promise.resolve() 任务成功； Promise.reject() 任务失败</li></ol></li><li><ol start="3"><li>async、await</li></ol></li><li><ol start="4"><li>使用gulp读取文件操作时，返回文件流，gulp会自动在流上注册一个end事件</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回文件流 </span></span><br><span class="line">    <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">stream</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> readstream = fs.<span class="title function_">createReadStream</span>(<span class="string">&quot;package.json&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> writestream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&quot;temp.txt&quot;</span>);</span><br><span class="line">        readstream.<span class="title function_">pipe</span>(writestream);</span><br><span class="line">        <span class="keyword">return</span> readstream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">stream2</span> = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> readstream = fs.<span class="title function_">createReadStream</span>(<span class="string">&quot;package.json&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> writestream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&quot;temp2.txt&quot;</span>);</span><br><span class="line">        readstream.<span class="title function_">pipe</span>(writestream);</span><br><span class="line">        readstream.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">done</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="gulp-文件操作"><a href="#gulp-文件操作" class="headerlink" title="gulp 文件操作"></a>gulp 文件操作</h3><p>Gulp使用 <code>src</code>方法匹配到源文件，然后通过node.js的<code>pipe</code>将文件流 输送到 gulp插件（编译，压缩），最后通过<code>dest</code>方法，将编译好的文件输出到指定编译目录中。</p><p>webpack用于JavaScript应用程序的<strong>静态模块</strong>打包工具。他会在内部从一个或多个入口点构建一个依赖图（dependency graph）,然后将项目中所需要的每一个<strong>模块组合成一个或多个bundles</strong>,它们均为静态资源。<br>对webpack而言，一起文件都是一个个模块，根据个模块之间的依赖关系，对模块进行组合和打包，最终输出浏览器能使用的静态资源。</p><h4 id="context-基础目录"><a href="#context-基础目录" class="headerlink" title="context 基础目录"></a>context 基础目录</h4><ul><li>webpack的基础目录，必须是<strong>绝对路径</strong>，用于从配置中解析 入口点（entry）和 加载器（loader）,默认为<strong>当前目录</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;__dirname&#x27;</span>,__dirname);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="comment">// 基础目录 &quot;/home/project/webpack-config/config/src&quot;</span></span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;src&quot;</span>),</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础目录 为 <code>/home/project/webpack-config/config/src</code>, 运行 <code>npx webpack --config ./config/webpack.config-1.js</code>,会报错，找不到<code>./src/index.js</code>.</p><p><code>context</code>,<code>entry</code>做如下修改，在执行 npx webpack 命令，编译正常。由此可知，<strong>context 是作为 entry 和 loader 的 根目录</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;__dirname&#x27;</span>,__dirname);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;__filename&quot;</span>,__filename);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;../src&quot;</span>),</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./index.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="entry-入口文件"><a href="#entry-入口文件" class="headerlink" title="entry 入口文件"></a>entry 入口文件</h4><p>entry支持字符串、字符串数组、对象、函数类型</p><ul><li><p>string 类型</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry<span class="punctuation">:</span> <span class="string">&quot;./src/index.js&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串数组 类型<br>两个文件会合并打包为一个chunk文件</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/index.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;./src/calc/js&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p>对象类型<br>entry 对象有2个入口，入口 a 和 b, 通过 <strong>dependOn</strong> 配置 b 依赖于 a, 构建是会等 a构建完成后再启动b的构建。<br>entry 配置有多个入口文件，所以输出<code>output</code>的配置也要满足，使用<code>[name]</code>占位符来确保每个文件具有唯一代名称。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;..&quot;</span>),</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">            <span class="attr">dependOn</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">            <span class="attr">import</span>: <span class="string">&quot;./src/calc.js&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">a</span>: <span class="string">&quot;./src/index.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="output-输出"><a href="#output-输出" class="headerlink" title="output 输出"></a>output 输出</h4><p>output属性最低要求，设置为一个对象，配置输出文件的文件名,默认输出目录<code>dist</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果配置2个或多个入口文件，则应该使用 <strong>占位符</strong>来保证每个文件具有唯一的名称</p><h5 id="生成-hash-文件名-例如-b-ec5d198e69-js"><a href="#生成-hash-文件名-例如-b-ec5d198e69-js" class="headerlink" title="生成 hash 文件名,  例如 b.ec5d198e69.js"></a>生成 hash 文件名,  例如 <code>b.ec5d198e69.js</code></h5>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;..&quot;</span>),</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">            <span class="attr">dependOn</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">            <span class="attr">import</span>: <span class="string">&quot;./src/calc.js&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">a</span>: <span class="string">&quot;./src/index.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[name].[contenthash:10].js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的hash 占位符有:</p><ul><li>hash, hash跟整个项目构建相关，每次构建生成的文件hash值都一样，只要项目中文件内容发生变化，hash值也会变化</li><li>contenthash, 由文件内容产生的hash值，内容不同产生的值也不一样</li><li>chunkhash, 每一次构建后生成的hash值都不一样，即使文件内容没有改变，<strong>不利于浏览器的缓存</strong></li></ul><h5 id="生成-umd-模式的文件"><a href="#生成-umd-模式的文件" class="headerlink" title="生成 umd 模式的文件"></a>生成 umd 模式的文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;..&quot;</span>),</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    <span class="comment">// output: &#123;</span></span><br><span class="line">    <span class="comment">//     library: &quot;lgUtils&quot;,</span></span><br><span class="line">    <span class="comment">//     libraryTarget: &quot;umd&quot;,</span></span><br><span class="line">    <span class="comment">//     filename: &#x27;[name].[hash:6].js&#x27;,</span></span><br><span class="line">    <span class="comment">//     path: path.resolve(__dirname,&quot;../dist&quot;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">library</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;lqUtils&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].[hash:6].js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>npx webpack --config ./config/webpack.config-6.js</code>, 生成 <code>main.7f77f8.js</code>js文件，新建index.html并引入打包后的js文件，控制台打印<code>lqUtils</code>,可看到输出结果。表面 打包的js文件是 <strong>umd</strong>格式，支持浏览器。 js文件如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span></span><br><span class="line"><span class="comment"> * This devtool is neither made for production nor for readable output files.</span></span><br><span class="line"><span class="comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span></span><br><span class="line"><span class="comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span></span><br><span class="line"><span class="comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span></span><br><span class="line"><span class="comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">webpackUniversalModuleDefinition</span>(<span class="params">root, factory</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>();</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>)</span><br><span class="line">  <span class="title function_">define</span>([], factory);</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">  <span class="built_in">exports</span>[<span class="string">&quot;lqUtils&quot;</span>] = <span class="title function_">factory</span>();</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  root[<span class="string">&quot;lqUtils&quot;</span>] = <span class="title function_">factory</span>();</span><br><span class="line">&#125;)(self, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span>  <span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/index.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, &#123;\n/* harmony export */   \&quot;a\&quot;: () =&gt; (/* binding */ a),\n/* harmony export */   \&quot;say\&quot;: () =&gt; (/* binding */ say)\n/* harmony export */ &#125;);\nconst say = (msg) =&gt; &#123;\n    return `hello $&#123;msg&#125;`;\n&#125;\nconst a = \&quot;jiang2\&quot;;\n\n\n//# sourceURL=webpack://lqUtils/./src/index.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>  &#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">// The require scope</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="keyword">var</span> __webpack_require__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line"><span class="comment">/******/</span>  (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span>   <span class="comment">// define getter functions for harmony exports</span></span><br><span class="line"><span class="comment">/******/</span>   __webpack_require__.<span class="property">d</span> = <span class="function">(<span class="params"><span class="built_in">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line"><span class="comment">/******/</span>     <span class="keyword">if</span>(__webpack_require__.<span class="title function_">o</span>(definition, key) &amp;&amp; !__webpack_require__.<span class="title function_">o</span>(<span class="built_in">exports</span>, key)) &#123;</span><br><span class="line"><span class="comment">/******/</span>      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, key, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: definition[key] &#125;);</span><br><span class="line"><span class="comment">/******/</span>     &#125;</span><br><span class="line"><span class="comment">/******/</span>    &#125;</span><br><span class="line"><span class="comment">/******/</span>   &#125;;</span><br><span class="line"><span class="comment">/******/</span>  &#125;)();</span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class="line"><span class="comment">/******/</span>  (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span>   __webpack_require__.<span class="property">o</span> = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, prop))</span><br><span class="line"><span class="comment">/******/</span>  &#125;)();</span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">/* webpack/runtime/make namespace object */</span></span><br><span class="line"><span class="comment">/******/</span>  (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span>   <span class="comment">// define __esModule on exports</span></span><br><span class="line"><span class="comment">/******/</span>   __webpack_require__.<span class="property">r</span> = <span class="function">(<span class="params"><span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span>     <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span>    &#125;</span><br><span class="line"><span class="comment">/******/</span>    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span>   &#125;;</span><br><span class="line"><span class="comment">/******/</span>  &#125;)();</span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">// startup</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="comment">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class="line"><span class="comment">/******/</span>  <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span>  __webpack_modules__[<span class="string">&quot;./src/index.js&quot;</span>](<span class="number">0</span>, __webpack_exports__, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>  <span class="keyword">return</span> __webpack_exports__;</span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p><code>npm view webpack devDependencies</code>,<code>npm  view webpack dependencies</code> 查看webpack的依赖</p><p>脚手架工具<br>inquirer, 询问交互<br>ejs， 模板解析<br>在 package.json中，bin字段指向可执行文件，其值是字符串，或者 对象。</p><p>对象形式，myjs-cli 即为脚手架的名字<br>字符串，脚手架的名字 就是 name的值<br>执行脚手架，就会执行在package.json 中配置项 bin 指向的可执行文件<br>    “bin”: {<br>        “myjs-cli”: “bin/index.js”<br>    },<br>process.cwd()，node 运行时的路径</p><p>webpack 原理<br>webpack 原理<br>自定义 loader， plugin<br>简易的 webpack<br>webpack 核心配置</p><p>entry, 可执行模块 或者 库的入口<br>chunk, 多个文件组成的一个代码块。可以将可执行模块和它所依赖的模块组合成一个chunk<br>loader， 文件转换器。 es6 转换 为 es5, scass 转换为 css<br>plugin, 扩展webpack功能的插件。 在 webpack 构建的生命周期节点上加入扩展hook，添加功能<br>webpack 构建过程？<br>初始化参数， 解析webpack 配置参数，合并shell传入和webpack.config.js 文件配置的参数，形成最后的配置结果<br>开始编译<br>通过上一步得到 的参数 初始化 compiler 对象<br>注册所有配置的插件， 插件 监听webpack构建生命周期的事件节点，做出相应的处理<br>执行对象的run方法开始执行编译<br>确认入口， 从配置的 entry 入口，开始解析文件，构建AST语法树，找出依赖，递归下去<br>编译模块， 递归中 根据文件类型和loader配置，调用所有配置的loader对文件进行转换，在找出该模块依赖的模块，在递归本步骤，直到所有入口依赖的文件都经过处理<br>完成模块编译并输出，递归完成后，等到每个文件结果，包含每个模块以及它们之间的依赖关系，根据 entry 配置生成代码块 chunk<br>输出完成， 输出所有的chunk 到文件系统<br>自定义 plugins<br>plugins 的钩子函数分为 compiler钩子，和 compilation钩子，每个钩子还有很多各自的钩子周期函数，在不同钩子周期函数中，webpack 进行不同的操作。</p><p>如何创建 webpack plugin？<br>构建函数<br>扩展 apply 方法<br>指定webpack 自身的事件钩子<br>处理 webpack 内部实例的特定数据<br>功能完成后，调用 webpack 提供的回调函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Grunt 侧重对整个过程的控制管理，是任务类型的的打包工具，代码检查、预编译、合并压缩；生成雪碧图、sourceMap、版本管理；运行单元测试、监控等。&lt;/p&gt;
&lt;h4 id=&quot;Grunt-执行异步任务&quot;&gt;&lt;a href=&quot;#Grunt-执行异步任务&quot; class=&quot;he</summary>
      
    
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="grunt" scheme="https://better-jiang.github.io/tags/grunt/"/>
    
  </entry>
  
  <entry>
    <title>去了解ESLint吧</title>
    <link href="https://better-jiang.github.io/2022/08/04/%E5%8E%BB%E4%BA%86%E8%A7%A3ESLint%E5%90%A7/"/>
    <id>https://better-jiang.github.io/2022/08/04/%E5%8E%BB%E4%BA%86%E8%A7%A3ESLint%E5%90%A7/</id>
    <published>2022-08-04T06:09:15.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/53680918">ESLint工作原理探讨-知乎</a> </li><li><a href="https://zhuanlan.zhihu.com/p/32189701">AST in Modern JavaScript -知乎</a></li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>ESlint 使用Espress把js语法转换成AST，然后通过 <strong>AST selectors</strong>找到静态代码中内容，再根据 rule 的规则去判断这一段js 是否符合规范。</p><ul><li>ESLint 使用  Espree 解析 JavaScript</li><li>ESLint 使用 AST  去分析代码中的模式</li><li>ESLint 是完全插件化的，每个规则都是一个插件，并且可以在运行时添加更多规则</li></ul><h3 id="Configuring-ESLint"><a href="#Configuring-ESLint" class="headerlink" title="Configuring ESLint"></a>Configuring ESLint</h3><p>ESLint 是完全可配置的，有2中方式开配置ESLint:</p><ul><li>使用JavaScript注释，把配置信息直接嵌入到代码源文件中</li><li>指定一个独立的*<em>配置文件</em>**<em>（.eslintrc.<em>）</em></em></li></ul><p>ESLint中可配置以下选项：</p><ul><li>运行环境（Environments）， 每种运行环境都带有一组特定的预定义全局变量</li><li>全局变量（Globals）， 运行期间可访问的其他全局变量</li><li>规则 （Rules），启用了哪些规则，以及其错误级别</li><li>插件（Plugins），使用了哪些第三方插件定义的额外规则、运行环境、配置等</li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>ESlint配置文件支持多种文件格式,如果存在多个配置文件，优先级顺序按如下：</p><ul><li>JavaScript， <code>.eslintrc.js</code>， 导出一个配置对象。export an object</li><li>JavaScript(ESM)， <code>.eslintrc.cjs</code>, 在  <code> package.json</code> 中  指定 <code> &quot;type&quot;:&quot;module&quot;</code></li><li>YAML，<code>.eslintrc.yaml</code>, <code>eslintrc.yml</code></li><li>JSON，<code>.eslintrc.json</code>,    ESLint中的json 文件可使用<strong>js格式的注释</strong></li><li>package.json， <code>eslintConfig</code>属性，指定配置文件路径</li></ul><h4 id="2中使用方式"><a href="#2中使用方式" class="headerlink" title="2中使用方式"></a>2中使用方式</h4><ul><li>ESLint 会自动查找检测配置文件<code>.eslintrc.*</code>,直到 系统的<strong>根目录<code>~/</code></strong> (**除非 指定了<code>root:true</code>**）</li><li>命令行CLI <code>—config</code>参数  <code>eslint -c muconfig.json myfiletotest.js</code></li></ul><h4 id="共享设置"><a href="#共享设置" class="headerlink" title="共享设置"></a>共享设置</h4><p>在ESlint配置文件中设置可共享的对象，可提供给所有正在执行的规则去访问，可用于自定义规则中想要去访问相同信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;settings&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="层叠配置"><a href="#层叠配置" class="headerlink" title="层叠配置"></a>层叠配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">your-project</span><br><span class="line">├── .eslintrc.json</span><br><span class="line">├── lib</span><br><span class="line">│ └── source.js</span><br><span class="line">└─┬ tests</span><br><span class="line">  ├── .eslintrc.json</span><br><span class="line">  └── test.js</span><br></pre></td></tr></table></figure><p>默认情况下，距离要检测文件最近的<code>.eslintrc.*</code>文件优先级最高，其次才是其父目录，直到根目录，当发现配置文件中指定<code>&quot;root&quot;:true</code>,会停止寻找。</p><p><strong>配置层次结构优先级(高-&gt;低)：</strong></p><ul><li>行内配置   <code>/*eslint-enable*/</code></li><li>命令行选项 <code>--global</code>,<code>—config</code>,<code>--rule</code></li><li>项目级别 配置<ul><li><code>.eslintrc.*</code>或<code>package.json</code>与要检测的文件 在<strong>同一目录中</strong></li><li>继续 在 其祖先目录中寻找 <code>.eslintrc.*</code>、<code>package.json</code>文件，直到<strong>根目录（系统上当前用户的主目录(~/)也被视为根目录，即需要寻找到此停止，在8.0版本，该目录中的配置将被忽略）</strong>,或者找到<code>&quot;root&quot;:true</code>的配置文件</li></ul></li></ul><h4 id="扩展配置文件"><a href="#扩展配置文件" class="headerlink" title="扩展配置文件"></a>扩展配置文件</h4><p>一个配置一旦扩展，就可以继承另一个配置文件的所有特征(规则、插件、选项)，且可以修改所有选项。有3中配置：</p><ul><li>基本配置，扩展的配置</li><li>派生配置，扩展基本配置的配置</li><li>最后生成的配置：将派生配置合并到基本配置的结果(the result of merging the derived configurantion into the base configuration.)</li></ul><p><strong>extends 属性值（2种）</strong></p><ul><li>字符串，(配置文件的路径、可共享的配置名称、eslint:recommended(推荐的规则)、eslint:all(所有规则))</li><li>字符串数组，每个附加配置都扩展了它前面的配置</li></ul><p>extends属性中的 相对路径、可共享的配置名称，是<strong>从它们出现的配置文件的位置解析</strong></p><p><strong>配置名称可省略<code>eslint-config-</code>前缀</strong>，例如，airbnb 解析为eslint-config-airbnb</p><h4 id="使用可共享的配置（npm包）"><a href="#使用可共享的配置（npm包）" class="headerlink" title="使用可共享的配置（npm包）"></a>使用可共享的配置（npm包）</h4><p>可共享的配置是一个npm包，并导出一个配置对象，必须<strong>安装在项目的跟目录</strong>中。</p><p>extends的属性值 可以<strong>省略包的<code>eslint-config-</code>前缀</strong></p><p><strong>如何创建一个可共享的配置？</strong></p><ul><li><p>1、create a Node.js module, 名字以<code>eslint-config-</code>开头，例如 <code>eslint-config-jiang</code>。</p><p><strong>npm scoped modules</strong>也是支持的，可以命名为<code>@scope/eslint-config</code>，或以其作为前缀。例如 <code>@jiang/eslint-config</code> <code>@jiang/eslint-config-myconfig</code></p></li><li><p>2、新建<code>index.js</code>文件，并导出一个配置对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  globals: &#123;</span><br><span class="line">    MyGlobales: true,</span><br><span class="line">    Jiang: &#123;</span><br><span class="line">      name: &quot;jiang&quot;,</span><br><span class="line">      age: 29,</span><br><span class="line">      friends: [&quot;Aime&quot;, &quot;Jack&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  rule: &#123;</span><br><span class="line">    semi: [2, &quot;always&quot;],</span><br><span class="line">    &quot;no-debugger&quot;: [1],</span><br><span class="line">    &quot;no-alert&quot;: [0]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、发布可共享的配置包</p><p>发布到npm，在package.json <strong>使用<code>peerDependencies</code>字段去声明对eslint的依赖</strong>。为了兼容性，声明依赖项推荐使用<code>&gt;=</code>范围语法，即最定要求的eslint版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;peerDependencies&quot;: &#123;</span><br><span class="line">    &quot;eslint&quot; : &quot;&gt;= 8&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果共享配置也依赖与其他插件,要将其指定为 前置依赖<code>peerDependency</code>。 如果，共享配置依赖于第三方解析器或其他可共享配置，要将这些包指定为项目依赖<code>dependencies</code></p><h6 id="本地测试，要发布的包"><a href="#本地测试，要发布的包" class="headerlink" title="本地测试，要发布的包"></a>本地测试，要发布的包</h6><ul><li><p><strong>npm link / pnpm link,  全局链接模块，使当前本地包可在系统范围内或其他位置访问</strong></p></li><li><p>在需要使共享配置的的项目中，<code>npm link eslint-config-myconfig </code></p></li></ul></li><li><p>4、使用可共享的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;extends&quot;: &quot;eslint-config-myconfig&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="共享多个配置"><a href="#共享多个配置" class="headerlink" title="共享多个配置"></a>共享多个配置</h5><p>可以在同一个npm包共享多个配置，且为包指定默认配置。例如，新建一个特定配置文件<code>my-special-config.js</code>，包名<code>eslint-config-jiang</code>,通过以下方式访问附加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;extends&quot;: &quot;jiang/my-special-config&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是 <strong>scoped modules</strong>，则不能省略 <code>eslint-config</code>命名空间。假设包名<code>@jiang/eslint-config</code>,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;extends&quot;: &quot;@jiang/eslint-config/my-special-config&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用来自插件的规则"><a href="#使用来自插件的规则" class="headerlink" title="使用来自插件的规则"></a>使用来自插件的规则</h4><p>插件 也是一个 npm包，可给ESLint添加新规则，导出可共享配置。要确保该npm包安装在ESLint能访问到的目录下。</p><p><strong>plugins属性值</strong>可以<strong>省略包名的前缀</strong><code>eslint-plugin-</code></p><p><strong>extends属性值</strong> 格式:  <code>plugin:</code> + 包名 + <code>/</code> + 配置名称,  例如 <code>plugin:react/recommended</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">        &quot;react&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;extends&quot;: [</span><br><span class="line">        &quot;eslint:recommended&quot;,</span><br><span class="line">        &quot;plugin:react/recommended&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">       &quot;react/no-set-state&quot;: &quot;off&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置名称</strong>, 在<code>configs</code>选项设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  deprecatedRules,</span><br><span class="line">  rules: allRules,</span><br><span class="line">  configs: &#123;</span><br><span class="line">    recommended: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        &#x27;react/display-name&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-key&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-comment-textnodes&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-duplicate-props&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-target-blank&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-undef&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-uses-react&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-uses-vars&#x27;: 2,</span><br><span class="line">        &#x27;react/no-children-prop&#x27;: 2,</span><br><span class="line">        &#x27;react/no-danger-with-children&#x27;: 2,</span><br><span class="line">        &#x27;react/no-deprecated&#x27;: 2,</span><br><span class="line">        &#x27;react/no-direct-mutation-state&#x27;: 2,</span><br><span class="line">        &#x27;react/no-find-dom-node&#x27;: 2,</span><br><span class="line">        &#x27;react/no-is-mounted&#x27;: 2,</span><br><span class="line">        &#x27;react/no-render-return-value&#x27;: 2,</span><br><span class="line">        &#x27;react/no-string-refs&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unescaped-entities&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unknown-property&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unsafe&#x27;: 0,</span><br><span class="line">        &#x27;react/prop-types&#x27;: 2,</span><br><span class="line">        &#x27;react/react-in-jsx-scope&#x27;: 2,</span><br><span class="line">        &#x27;react/require-render-return&#x27;: 2,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    all: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: activeRulesConfig,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;jsx-runtime&#x27;: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        jsxPragma: null, // for @typescript/eslint-parser</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        &#x27;react/react-in-jsx-scope&#x27;: 0,</span><br><span class="line">        &#x27;react/jsx-uses-react&#x27;: 0,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用eslint-recommended"><a href="#使用eslint-recommended" class="headerlink" title="使用eslint:recommended"></a>使用eslint:recommended</h4><p>​    启用eslint推荐的规则子集，<a href="https://eslint.org/docs/latest/rules/">rules页</a>中复选框选中的规则</p><h4 id="使用eslint-all"><a href="#使用eslint-all" class="headerlink" title="使用eslint:all"></a>使用eslint:all</h4><p>​    启用当前eslint版本中所有的核心规则</p><h4 id="更精细化配置，overrides属性"><a href="#更精细化配置，overrides属性" class="headerlink" title="更精细化配置，overrides属性"></a>更精细化配置，overrides属性</h4><p>使用overrides属性，根据配置中文件 glob模式覆盖规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;rules&quot;: &#123;</span><br><span class="line">quotes:[&quot;error&quot;, &quot;dobule&quot;]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;overrides&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;files&quot;: [&quot;foo/*.js&quot;],</span><br><span class="line">            &quot;excludedFiles&quot;: &quot;*.test.js&quot;,</span><br><span class="line">            &quot;rules&quot;: &#123;</span><br><span class="line">                &quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="忽略ESlint规则检查"><a href="#忽略ESlint规则检查" class="headerlink" title="忽略ESlint规则检查"></a>忽略ESlint规则检查</h3><h5 id="1、-eslintignore-文件"><a href="#1、-eslintignore-文件" class="headerlink" title="1、.eslintignore 文件"></a>1、.eslintignore 文件</h5><p>在项目根目录下创建<code>.eslintignore</code>文件中指定要忽略检查的文件或目录。</p><ul><li>每一行一个glob模式，指定要忽略的路径</li><li><code>#</code> 开头的行 被视为注释</li><li>路径时相对于当前工作目录的</li><li><code>!</code>是否定模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Ignore build files except build/test.js</span><br><span class="line">!.build</span><br><span class="line">.build/*</span><br><span class="line">!.build/test.js</span><br></pre></td></tr></table></figure><h5 id="2、配置文件-中的ignorePatterns"><a href="#2、配置文件-中的ignorePatterns" class="headerlink" title="2、配置文件 中的ignorePatterns"></a>2、配置文件 中的<code>ignorePatterns</code></h5><p>使用<code>ignorePatterns</code>指定要忽略检查的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;ignorePatterns&quot;: [&quot;*.ignore.js&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h4 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/53680918">ESLint工作原理探讨-知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/32189701">AST in Modern JavaScript -知乎</a></li></ul><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>ESlint 使用Espress把js语法转换成AST，然后通过 <strong>AST selectors</strong>找到静态代码中内容，再根据 rule 的规则去判断这一段js 是否符合规范。</p><ul><li>ESLint 使用 Espree 解析 JavaScript</li><li>ESLint 使用 AST 去分析代码中的模式</li><li>ESLint 是完全插件化的，每个规则都是一个插件，并且可以在运行时添加更多规则</li></ul><h3 id="Configuring-ESLint-1"><a href="#Configuring-ESLint-1" class="headerlink" title="Configuring ESLint"></a>Configuring ESLint</h3><p>ESLint 是完全可配置的，有2中方式开配置ESLint:</p><ul><li>使用JavaScript注释，把配置信息直接嵌入到代码源文件中</li><li>指定一个独立的*<em>配置文件*</em>*<em>（.eslintrc.*）</em>*</li></ul><p>ESLint中可配置以下选项：</p><ul><li>运行环境（Environments）， 每种运行环境都带有一组特定的预定义全局变量</li><li>全局变量（Globals）， 运行期间可访问的其他全局变量</li><li>规则 （Rules），启用了哪些规则，以及其错误级别</li><li>插件（Plugins），使用了哪些第三方插件定义的额外规则、运行环境、配置等</li></ul><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p>ESlint配置文件支持多种文件格式,如果存在多个配置文件，优先级顺序按如下：</p><ul><li>JavaScript， <code>.eslintrc.js</code>， 导出一个配置对象。export an object</li><li>JavaScript(ESM)， <code>.eslintrc.cjs</code>, 在 <code>package.json</code> 中 指定 <code>&quot;type&quot;:&quot;module&quot;</code></li><li>YAML，<code>.eslintrc.yaml</code>, <code>eslintrc.yml</code></li><li>JSON，<code>.eslintrc.json</code>, ESLint中的json 文件可使用<strong>js格式的注释</strong></li><li>package.json， <code>eslintConfig</code>属性，指定配置文件路径</li></ul><h4 id="2中使用方式-1"><a href="#2中使用方式-1" class="headerlink" title="2中使用方式"></a>2中使用方式</h4><ul><li>ESLint 会自动查找检测配置文件<code>.eslintrc.*</code>,直到 系统的<strong>根目录~/</strong> (<strong>除非 指定了root:true</strong>）</li><li>命令行CLI <code>—config</code>参数 <code>eslint -c muconfig.json myfiletotest.js</code></li></ul><h4 id="共享设置-1"><a href="#共享设置-1" class="headerlink" title="共享设置"></a>共享设置</h4><p>在ESlint配置文件中设置可共享的对象，可提供给所有正在执行的规则去访问，可用于自定义规则中想要去访问相同信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;settings&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="层叠配置-1"><a href="#层叠配置-1" class="headerlink" title="层叠配置"></a>层叠配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">your-project</span><br><span class="line">├── .eslintrc.json</span><br><span class="line">├── lib</span><br><span class="line">│ └── source.js</span><br><span class="line">└─┬ tests</span><br><span class="line">  ├── .eslintrc.json</span><br><span class="line">  └── test.js</span><br></pre></td></tr></table></figure><p>默认情况下，距离要检测文件最近的<code>.eslintrc.*</code>文件优先级最高，其次才是其父目录，直到根目录，当发现配置文件中指定<code>&quot;root&quot;:true</code>,会停止寻找。</p><p><strong>配置层次结构优先级(高-&gt;低)：</strong></p><ul><li>行内配置 <code>/*eslint-enable*/</code></li><li>命令行选项 <code>--global</code>,<code>—config</code>,<code>--rule</code></li><li>项目级别 配置<ul><li><code>.eslintrc.*</code>或<code>package.json</code>与要检测的文件 在<strong>同一目录中</strong></li><li>继续 在 其祖先目录中寻找 <code>.eslintrc.*</code>、<code>package.json</code>文件，直到<strong>根目录（系统上当前用户的主目录(~/)也被视为根目录，即需要寻找到此停止，在8.0版本，该目录中的配置将被忽略）</strong>,或者找到<code>&quot;root&quot;:true</code>的配置文件</li></ul></li></ul><h4 id="扩展配置文件-1"><a href="#扩展配置文件-1" class="headerlink" title="扩展配置文件"></a>扩展配置文件</h4><p>一个配置一旦扩展，就可以继承另一个配置文件的所有特征(规则、插件、选项)，且可以修改所有选项。有3中配置：</p><ul><li>基本配置，扩展的配置</li><li>派生配置，扩展基本配置的配置</li><li>最后生成的配置：将派生配置合并到基本配置的结果(the result of merging the derived configurantion into the base configuration.)</li></ul><p><strong>extends 属性值（2种）</strong></p><ul><li>字符串，(配置文件的路径、可共享的配置名称、eslint:recommended(推荐的规则)、eslint:all(所有规则))</li><li>字符串数组，每个附加配置都扩展了它前面的配置</li></ul><p>extends属性中的 相对路径、可共享的配置名称，是<strong>从它们出现的配置文件的位置解析</strong></p><p><strong>配置名称可省略eslint-config-前缀</strong>，例如，airbnb 解析为eslint-config-airbnb</p><h4 id="使用可共享的配置（npm包）-1"><a href="#使用可共享的配置（npm包）-1" class="headerlink" title="使用可共享的配置（npm包）"></a>使用可共享的配置（npm包）</h4><p>可共享的配置是一个npm包，并导出一个配置对象，必须<strong>安装在项目的跟目录</strong>中。</p><p>extends的属性值 可以<strong>省略包的eslint-config-前缀</strong></p><p><strong>如何创建一个可共享的配置？</strong></p><ul><li><p>1、create a Node.js module, 名字以<code>eslint-config-</code>开头，例如 <code>eslint-config-jiang</code>。</p><p><strong>npm scoped modules</strong>也是支持的，可以命名为<code>@scope/eslint-config</code>，或以其作为前缀。例如 <code>@jiang/eslint-config</code> <code>@jiang/eslint-config-myconfig</code></p></li><li><p>2、新建<code>index.js</code>文件，并导出一个配置对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  globals: &#123;</span><br><span class="line">    MyGlobales: true,</span><br><span class="line">    Jiang: &#123;</span><br><span class="line">      name: &quot;jiang&quot;,</span><br><span class="line">      age: 29,</span><br><span class="line">      friends: [&quot;Aime&quot;, &quot;Jack&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  rule: &#123;</span><br><span class="line">    semi: [2, &quot;always&quot;],</span><br><span class="line">    &quot;no-debugger&quot;: [1],</span><br><span class="line">    &quot;no-alert&quot;: [0]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、发布可共享的配置包</p><p>发布到npm，在package.json <strong>使用peerDependencies字段去声明对eslint的依赖</strong>。为了兼容性，声明依赖项推荐使用<code>&gt;=</code>范围语法，即最定要求的eslint版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;peerDependencies&quot;: &#123;</span><br><span class="line">    &quot;eslint&quot; : &quot;&gt;= 8&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果共享配置也依赖与其他插件,要将其指定为 前置依赖<code>peerDependency</code>。 如果，共享配置依赖于第三方解析器或其他可共享配置，要将这些包指定为项目依赖<code>dependencies</code></p><h6 id="本地测试，要发布的包-1"><a href="#本地测试，要发布的包-1" class="headerlink" title="本地测试，要发布的包"></a>本地测试，要发布的包</h6><ul><li><strong>npm link / pnpm link, 全局链接模块，使当前本地包可在系统范围内或其他位置访问</strong></li><li>在需要使共享配置的的项目中，<code>npm link eslint-config-myconfig</code></li></ul></li><li><p>4、使用可共享的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;extends&quot;: &quot;eslint-config-myconfig&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="共享多个配置-1"><a href="#共享多个配置-1" class="headerlink" title="共享多个配置"></a>共享多个配置</h5><p>可以在同一个npm包共享多个配置，且为包指定默认配置。例如，新建一个特定配置文件<code>my-special-config.js</code>，包名<code>eslint-config-jiang</code>,通过以下方式访问附加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;extends&quot;: &quot;jiang/my-special-config&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是 <strong>scoped modules</strong>，则不能省略 <code>eslint-config</code>命名空间。假设包名<code>@jiang/eslint-config</code>,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;extends&quot;: &quot;@jiang/eslint-config/my-special-config&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用来自插件的规则-1"><a href="#使用来自插件的规则-1" class="headerlink" title="使用来自插件的规则"></a>使用来自插件的规则</h4><p>插件 也是一个 npm包，可给ESLint添加新规则，导出可共享配置。要确保该npm包安装在ESLint能访问到的目录下。</p><p><strong>plugins属性值</strong>可以<strong>省略包名的前缀</strong><code>eslint-plugin-</code></p><p><strong>extends属性值</strong> 格式: <code>plugin:</code> + 包名 + <code>/</code> + 配置名称, 例如 <code>plugin:react/recommended</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">        &quot;react&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;extends&quot;: [</span><br><span class="line">        &quot;eslint:recommended&quot;,</span><br><span class="line">        &quot;plugin:react/recommended&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">       &quot;react/no-set-state&quot;: &quot;off&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置名称</strong>, 在<code>configs</code>选项设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  deprecatedRules,</span><br><span class="line">  rules: allRules,</span><br><span class="line">  configs: &#123;</span><br><span class="line">    recommended: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        &#x27;react/display-name&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-key&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-comment-textnodes&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-duplicate-props&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-target-blank&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-no-undef&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-uses-react&#x27;: 2,</span><br><span class="line">        &#x27;react/jsx-uses-vars&#x27;: 2,</span><br><span class="line">        &#x27;react/no-children-prop&#x27;: 2,</span><br><span class="line">        &#x27;react/no-danger-with-children&#x27;: 2,</span><br><span class="line">        &#x27;react/no-deprecated&#x27;: 2,</span><br><span class="line">        &#x27;react/no-direct-mutation-state&#x27;: 2,</span><br><span class="line">        &#x27;react/no-find-dom-node&#x27;: 2,</span><br><span class="line">        &#x27;react/no-is-mounted&#x27;: 2,</span><br><span class="line">        &#x27;react/no-render-return-value&#x27;: 2,</span><br><span class="line">        &#x27;react/no-string-refs&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unescaped-entities&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unknown-property&#x27;: 2,</span><br><span class="line">        &#x27;react/no-unsafe&#x27;: 0,</span><br><span class="line">        &#x27;react/prop-types&#x27;: 2,</span><br><span class="line">        &#x27;react/react-in-jsx-scope&#x27;: 2,</span><br><span class="line">        &#x27;react/require-render-return&#x27;: 2,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    all: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: activeRulesConfig,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;jsx-runtime&#x27;: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#x27;react&#x27;,</span><br><span class="line">      ],</span><br><span class="line">      parserOptions: &#123;</span><br><span class="line">        ecmaFeatures: &#123;</span><br><span class="line">          jsx: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        jsxPragma: null, // for @typescript/eslint-parser</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        &#x27;react/react-in-jsx-scope&#x27;: 0,</span><br><span class="line">        &#x27;react/jsx-uses-react&#x27;: 0,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用eslint-recommended-1"><a href="#使用eslint-recommended-1" class="headerlink" title="使用eslint:recommended"></a>使用eslint:recommended</h4><p> 启用eslint推荐的规则子集，<a href="https://eslint.org/docs/latest/rules/">rules页</a>中复选框选中的规则</p><h4 id="使用eslint-all-1"><a href="#使用eslint-all-1" class="headerlink" title="使用eslint:all"></a>使用eslint:all</h4><p> 启用当前eslint版本中所有的核心规则</p><h4 id="更精细化配置，overrides属性-1"><a href="#更精细化配置，overrides属性-1" class="headerlink" title="更精细化配置，overrides属性"></a>更精细化配置，overrides属性</h4><p>使用overrides属性，根据配置中文件 glob模式覆盖规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;rules&quot;: &#123;</span><br><span class="line">quotes:[&quot;error&quot;, &quot;dobule&quot;]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;overrides&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;files&quot;: [&quot;foo/*.js&quot;],</span><br><span class="line">            &quot;excludedFiles&quot;: &quot;*.test.js&quot;,</span><br><span class="line">            &quot;rules&quot;: &#123;</span><br><span class="line">                &quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="忽略ESlint规则检查-1"><a href="#忽略ESlint规则检查-1" class="headerlink" title="忽略ESlint规则检查"></a>忽略ESlint规则检查</h3><h5 id="1、-eslintignore-文件-1"><a href="#1、-eslintignore-文件-1" class="headerlink" title="1、.eslintignore 文件"></a>1、.eslintignore 文件</h5><p>在项目根目录下创建<code>.eslintignore</code>文件中指定要忽略检查的文件或目录。</p><ul><li>每一行一个glob模式，指定要忽略的路径</li><li><code>#</code> 开头的行 被视为注释</li><li>路径时相对于当前工作目录的</li><li><code>!</code>是否定模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Ignore build files except build/test.js</span><br><span class="line">!.build</span><br><span class="line">.build/*</span><br><span class="line">!.build/test.js</span><br></pre></td></tr></table></figure><h5 id="2、配置文件-中的ignorePatterns-1"><a href="#2、配置文件-中的ignorePatterns-1" class="headerlink" title="2、配置文件 中的ignorePatterns"></a>2、配置文件 中的<code>ignorePatterns</code></h5><p>使用<code>ignorePatterns</code>指定要忽略检查的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;ignorePatterns&quot;: [&quot;*.ignore.js&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语言相关的选项"><a href="#语言相关的选项" class="headerlink" title="语言相关的选项"></a>语言相关的选项</h3><h4 id="指定环境"><a href="#指定环境" class="headerlink" title="指定环境"></a>指定环境</h4><p>一个环境提供了一组预定义的全局变量。可用的环境：brower、node、commonjs、es6、shared-node-browser、amd、mocha、jest、jquery、mongo、shelljs</p><ul><li><p>使用注释, 在js文件中指定环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* eslint-env node, mocha*/</span><br></pre></td></tr></table></figure></li><li><p>在<strong>配置文件</strong>中，使用<code>env</code>属性来指定环境并设为true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;env&quot;: &#123;</span><br><span class="line">        &quot;browser&quot;: true,</span><br><span class="line">        &quot;commonjs&quot;: true,</span><br><span class="line">      &quot;es2021&quot;: true,</span><br><span class="line">        &quot;node&quot;: true,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>package.json </code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">name:&quot;eslint-demo&quot;,</span><br><span class="line">&quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">eslintConfig: &#123;</span><br><span class="line">&quot;env&quot;: &#123;</span><br><span class="line">&quot;browser&quot;: true,</span><br><span class="line">&quot;es2021&quot;: true,</span><br><span class="line">&quot;node&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="指定全局变量"><a href="#指定全局变量" class="headerlink" title="指定全局变量"></a>指定全局变量</h4><p>当访问未定义的变量时，ESLint<code>no-undef</code>规则会发出警告。可在配置文件中定义或使用注释定义全局变量。</p><ul><li><p>使用注释定义全局变量, 默认是可读的，使用<code>writable</code>标识其可被写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*  global var1, var2 */</span><br><span class="line"></span><br><span class="line">/* global var1:writable, var2:writable */</span><br></pre></td></tr></table></figure></li><li><p>在配置文件定义全局变量，使用<code>globals</code>属性设置为一个对象, 可用”off”禁用全局变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;globals&quot;: &#123;</span><br><span class="line">        &quot;var1&quot;: &quot;writable&quot;,</span><br><span class="line">        &quot;var2&quot;: &quot;readonly&quot;,</span><br><span class="line">        &quot;Promise&quot;: &quot;off&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="指定解析器"><a href="#指定解析器" class="headerlink" title="指定解析器"></a>指定解析器</h4><p>ESLint可以指定想要支持的js语言选项，ESlint默认支持 ECMAScript 5 语法。使用<code>parseroptions</code>属性设置一个对象，其属性如下：</p><ul><li>ecmaVersion,  可设置为3,5(defalut),6，7，8，9，11，或者2015(same as 6)，2016(7)，2017(8)，latest (最新支持的版本)</li><li>sourceType，类型，<code>script</code> 或 <code>module</code>,</li><li>allowReserved, 允许使用保留字做标识符</li><li>ecmaFeatures, 对象，指定想要使用的附件语言功能。例如 <code>jsx: true</code>, 支持JSX语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;parserOptions&quot;: &#123;</span><br><span class="line">        &quot;ecmaVersion&quot;: &quot;latest&quot;,</span><br><span class="line">        &quot;sourceType&quot;: &quot;module&quot;,</span><br><span class="line">        &quot;ecmaFeatures&quot;: &#123;</span><br><span class="line">            &quot;jsx&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="援疆计划"><a href="#援疆计划" class="headerlink" title="援疆计划"></a>援疆计划</h3><h5 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h5><p>各位领导，下午好，我是刘振江，来自产险科技中心个人客户研发团队，是一名前端工程师。入司2年多，一直在网销非车项目组工作，负责开发维护我们平安保险商城官网，配合业务老师上线各类的营销活动。另外，还参与优化了ITS航母系统内的录单、出单流程，以及开发完善了新产品配置、上下架等功能。总体来讲，做的还可以，需求方满意，自己也小有成就感。</p><p>我从小在新疆生活长大，小学、初中在团场上的（农二师26团），高中去了库尔勒，大学考到了武汉，工作来了深圳。对新疆是有感情，也是热爱的。所以当知道公司有”援疆派驻人才”招募计划，我第一时间就报名了，真的希望能借此机会，回到新疆发展，通过努力、扎实的工作，能办出些实事来，去实实在在的为新疆的发展做出贡献。</p><p>与此同时，我也想着能通过这份工作，好好的去宣传新疆，让更过的人了解真正的新疆，从而喜欢上新疆。因为我自身感受而言，内地的朋友对新疆了解的不多，往往会把新疆想象成一个神秘、封闭和落后的地方，他们仅仅知道些新疆美食、美景。甚至有些人会有些误解，例如“新疆不安全”，“新疆交通落后，出行不方便”，“新疆干旱没水，到处都是戈壁沙漠”等。</p><p>援疆结束后，我希望能够继续留在新疆工作，毕竟新疆潜力巨大，发展一定会越来越好。对我个人而言，则会有很大的个人成长与发展空间。还有一点，父母都在新疆，发小好友，初、高中同学也大都在新疆工作和生活，从家庭、友情方面考虑，留在新疆，应该是好的选择。</p><h5 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h5><ul><li>援疆人才培养方案是怎样的？有培训的具体计划？</li><li>到了新疆，有老师或领导带我们吗？大致工作是什么？需要哪些技能，有没有相应的指导或培训，我们考核指标是怎样？</li></ul><h5 id="希望达成的目标？"><a href="#希望达成的目标？" class="headerlink" title="希望达成的目标？"></a>希望达成的目标？</h5><ul><li>能办出些实事来，能真正让喀什发展的更好，给喀什地区的各族群众带来好处</li><li>自己能通过文字、照片、视频等形式记录我的援疆历程，让更多的人知道援疆，去了解新疆，去参与到新疆的建设与发展中。</li></ul><h4 id="新疆安全"><a href="#新疆安全" class="headerlink" title="新疆安全"></a>新疆安全</h4><ul><li><p>新疆便民警务站很多</p></li><li><p>进入餐厅、超市、电影院等公共场所，随身带的大小包都要过安检仪，类似在深圳乘坐地铁过安检一样</p></li><li><p>安保措施严格繁琐，但为了自治区的长治久安，大家都能体谅和理解</p></li></ul><h5 id="新疆交通"><a href="#新疆交通" class="headerlink" title="新疆交通"></a>新疆交通</h5><ul><li>新疆是全国机场数量最多的省区</li><li>全疆所有地区地州都通了铁路； 哈密、吐鲁番乌鲁木齐(兰新高铁)。 城际列车，南疆之星（乌鲁木齐-库尔勒），北疆之星(乌鲁木齐-伊宁)</li><li><img src="/Users/liuzhenjiang948/Desktop/2021_0120_0b0976a6g00qn7ub500brd000k000g0p.gif" alt="2021_0120_0b0976a6g00qn7ub500brd000k000g0p"></li></ul><ul><li>新建公路,最美<strong>独库公路/天山公路</strong>（独山子-库车），横穿天山，连接南北疆，沿途有那拉提草原（巩乃斯林场），巴音布克草原（九曲十八弯），天山大峡谷，库车大峡谷<br>伊昭公路(伊宁-昭苏)，伊犁  薰衣草， 天马，昭苏马场</li><li>塞果高速(赛里木湖-果子沟)</li></ul><h5 id="新疆美食"><a href="#新疆美食" class="headerlink" title="新疆美食"></a>新疆美食</h5><p>囊、拌面、大盘鸡，库尔勒香梨、伊犁的奶茶、阿克苏苹果、库车的小白杏、吐鲁番的葡萄、哈密瓜</p><h5 id="新疆美景"><a href="#新疆美景" class="headerlink" title="新疆美景"></a>新疆美景</h5><p>北疆，高山、草原，湖泊、森林，<strong>塞外江南</strong></p><p>南疆，沙漠、戈壁，大漠边塞风光，喀什老城、慕士塔格峰、天山大峡谷、罗布泊、塔克拉玛干沙漠</p><h5 id="新疆方言"><a href="#新疆方言" class="headerlink" title="新疆方言"></a>新疆方言</h5><ul><li>劳道</li><li> 皮牙子</li><li>大肉</li><li>勺子-</li><li>哈马斯，(全部)</li><li>巴郎子、羊缸子(妇女)</li><li>麦格来 (过来)</li><li>赶巴扎 (国际大巴扎)</li></ul><h5 id="喀什"><a href="#喀什" class="headerlink" title="喀什"></a>喀什</h5><p>新Q， “喀什噶尔”，”玉石集中之地”， 1个县级市、10个县、1个自治县(塔什库尔干塔吉克族)</p><p>汉族 28万，维吾尔族 428万 92%</p><p>喀什噶尔石榴，莎车巴旦木，伽师瓜，叶城的核桃</p><p>帕米尔冰川矿区水</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53680918&quot;&gt;ESLint工作</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="ESLint" scheme="https://better-jiang.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>缺陷控制</title>
    <link href="https://better-jiang.github.io/2022/07/27/%E7%BC%BA%E9%99%B7%E6%8E%A7%E5%88%B6/"/>
    <id>https://better-jiang.github.io/2022/07/27/%E7%BC%BA%E9%99%B7%E6%8E%A7%E5%88%B6/</id>
    <published>2022-07-27T07:06:01.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul><li>代码<ul><li>自检代码</li><li>质量监控</li><li>版本控制</li><li>代码风格</li><li>Snippet， 代码片段</li></ul></li><li>团队<ul><li>相互监督</li><li>意识形态</li><li>定期培训、自检</li><li>分工明确</li><li>协同待办</li><li>代码review</li></ul></li><li>项目<ul><li>制定计划</li><li>版本控制</li><li>协商沟通</li><li>定期校验</li><li>纠正措施</li><li>备选方案</li></ul></li><li>公司<ul><li>缺陷管理软件</li><li>公司流程</li><li>奖惩有度</li><li>抽样检查</li><li>质量改进</li><li>长远计划，动态改进</li></ul></li></ul><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代码&lt;ul&gt;
&lt;li&gt;自检代码&lt;/li&gt;
&lt;li&gt;质量监控&lt;/li&gt;
&lt;li&gt;版本控制&lt;/li&gt;
&lt;li&gt;代码风格&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="团队协作" scheme="https://better-jiang.github.io/tags/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-分词</title>
    <link href="https://better-jiang.github.io/2022/07/26/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%88%86%E8%AF%8D/"/>
    <id>https://better-jiang.github.io/2022/07/26/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%88%86%E8%AF%8D/</id>
    <published>2022-07-26T02:26:07.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<p><strong>分词</strong>是在动词后面加**-ing<strong>或-<strong>ed</strong>,起</strong>形容词**的作用</p><ul><li><p><strong>现在分词</strong>含有<strong>主动、进行</strong>之意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I see the dancing girl.现在时</span><br><span class="line">I saw the dancing girl.过去时</span><br><span class="line">I will see the dancing girl.  将来时</span><br></pre></td></tr></table></figure></li><li><p><strong>过去分词</strong>含有<strong>被动</strong>之意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Look at the broke window</span><br></pre></td></tr></table></figure></li></ul><h3 id="动词的三种形态"><a href="#动词的三种形态" class="headerlink" title="动词的三种形态"></a>动词的三种形态</h3><p>动词有三种形态，现在式、过去式、过去分词，大致分为A-B-C，A-A-A，A-B-A，A-B-C型</p><h4 id="A-B-C型"><a href="#A-B-C型" class="headerlink" title="A-B-C型"></a>A-B-C型</h4><table><thead><tr><th align="left">现在式</th><th>过去式</th><th>过去分词</th></tr></thead><tbody><tr><td align="left">am/are/is</td><td>was/were</td><td>been</td></tr><tr><td align="left">begin</td><td>began</td><td>begun</td></tr><tr><td align="left">bite</td><td>bit</td><td>bitten</td></tr><tr><td align="left">break</td><td>broke</td><td>broken</td></tr><tr><td align="left">blow</td><td>blew</td><td>blown</td></tr><tr><td align="left">choose</td><td>chose</td><td>chosen</td></tr><tr><td align="left">draw</td><td>drew</td><td>drawn</td></tr><tr><td align="left">drink</td><td>drank</td><td>drunk</td></tr><tr><td align="left">drive</td><td>drove</td><td>driven</td></tr><tr><td align="left">eat</td><td>ate</td><td>eaten</td></tr><tr><td align="left">fall</td><td>fell</td><td>fallen</td></tr><tr><td align="left">fly</td><td>flew</td><td>flown</td></tr><tr><td align="left">forgive</td><td>forgave</td><td>forgiven</td></tr><tr><td align="left">forget</td><td>forgot</td><td>forgotten</td></tr><tr><td align="left">freeze</td><td>froze</td><td>frozen</td></tr><tr><td align="left">give</td><td>gave</td><td>given</td></tr><tr><td align="left">get</td><td>got</td><td>gotten</td></tr><tr><td align="left">go</td><td>went</td><td>gone</td></tr><tr><td align="left">grow</td><td>grew</td><td>grown</td></tr><tr><td align="left">hide</td><td>hid</td><td>hidden</td></tr><tr><td align="left">know</td><td>knew</td><td>known</td></tr><tr><td align="left">lie</td><td>lay</td><td>lain</td></tr><tr><td align="left">mistake</td><td>mistook</td><td>mistaken</td></tr><tr><td align="left">ride</td><td>rode</td><td>ridden</td></tr><tr><td align="left">ring</td><td>rang</td><td>rung</td></tr><tr><td align="left">rise</td><td>rose</td><td>risen</td></tr><tr><td align="left">see</td><td>saw</td><td>seen</td></tr><tr><td align="left">shake</td><td>shook</td><td>shaken</td></tr><tr><td align="left">show</td><td>showed</td><td>shown</td></tr><tr><td align="left">sing</td><td>sang</td><td>sung</td></tr><tr><td align="left">swim</td><td>swam</td><td>swum</td></tr><tr><td align="left">speak</td><td>spoke</td><td>spoken</td></tr><tr><td align="left">steal</td><td>stole</td><td>stolen</td></tr><tr><td align="left">take</td><td>took</td><td>taken</td></tr><tr><td align="left">throw</td><td>threw</td><td>thrown</td></tr><tr><td align="left">wear</td><td>wore</td><td>worn</td></tr><tr><td align="left">write</td><td>wrote</td><td>written</td></tr></tbody></table><h4 id="A-B-B型"><a href="#A-B-B型" class="headerlink" title="A-B-B型"></a>A-B-B型</h4><table><thead><tr><th>现在式</th><th>过去式</th><th>过去分词</th></tr></thead><tbody><tr><td>bend</td><td>bent</td><td>bent</td></tr><tr><td>bind</td><td>bound</td><td>bound</td></tr><tr><td>bring</td><td>brought</td><td>brought</td></tr><tr><td>buy</td><td>bought</td><td>bought</td></tr><tr><td>build</td><td>built</td><td>built</td></tr><tr><td>catch</td><td>caught</td><td>caught</td></tr><tr><td>dig</td><td>dug</td><td>dug</td></tr><tr><td>feed</td><td>fed</td><td>fed</td></tr><tr><td>feel</td><td>felt</td><td>felt</td></tr><tr><td>fight</td><td>fought</td><td>fought</td></tr><tr><td>find</td><td>found</td><td>found</td></tr><tr><td>hang</td><td>hung</td><td>Hung</td></tr><tr><td>hear</td><td>heard</td><td>heard</td></tr><tr><td>hold</td><td>held</td><td>Held</td></tr><tr><td>keep</td><td>kept</td><td>kept</td></tr><tr><td>lead</td><td>ked</td><td>led</td></tr><tr><td>lend</td><td>lent</td><td>Lent</td></tr><tr><td>lose</td><td>lost</td><td>lost</td></tr><tr><td>leave</td><td>left</td><td>left</td></tr><tr><td>lay</td><td>laid</td><td>laid</td></tr><tr><td>make</td><td>made</td><td>made</td></tr><tr><td>mean</td><td>meant</td><td>meant</td></tr><tr><td>meet</td><td>met</td><td>met</td></tr><tr><td>pay</td><td>paid</td><td>paid</td></tr><tr><td>sell</td><td>sold</td><td>sold</td></tr><tr><td>shoot</td><td>shot</td><td>shot</td></tr><tr><td>sit</td><td>sat</td><td>sat</td></tr><tr><td>smell</td><td>smelt</td><td>smelt</td></tr><tr><td>shine</td><td>shone</td><td>shone</td></tr><tr><td>sleep</td><td>slept</td><td>slept</td></tr><tr><td>spend</td><td>spent</td><td>spent</td></tr><tr><td>strke</td><td>struck</td><td>struck</td></tr><tr><td>stand</td><td>stood</td><td>stood</td></tr><tr><td>tell</td><td>told</td><td>told</td></tr><tr><td>think</td><td>thought</td><td>thought</td></tr><tr><td>teach</td><td>taught</td><td>taught</td></tr><tr><td>win</td><td>won</td><td>won</td></tr><tr><td>understand</td><td>understood</td><td>understood</td></tr></tbody></table><p>​    </p><h4 id="A-A-A型"><a href="#A-A-A型" class="headerlink" title="A-A-A型"></a>A-A-A型</h4><table><thead><tr><th>现在式</th><th>过去式</th><th>过去分词</th></tr></thead><tbody><tr><td>let</td><td>let</td><td>let</td></tr><tr><td>cast</td><td>cast</td><td>cast</td></tr><tr><td>cost</td><td>cost</td><td>cost</td></tr><tr><td>cut</td><td>cut</td><td>cut</td></tr><tr><td>hit</td><td>hit</td><td>hit</td></tr><tr><td>hurt</td><td>hurt</td><td>hurt</td></tr><tr><td>put</td><td>put</td><td>put</td></tr><tr><td>read</td><td>read</td><td>read</td></tr><tr><td>set</td><td>set</td><td>set</td></tr><tr><td>shut</td><td>shut</td><td>shut</td></tr><tr><td>spread</td><td>spread</td><td>spread</td></tr></tbody></table><h3 id="A-B-A型"><a href="#A-B-A型" class="headerlink" title="A-B-A型"></a>A-B-A型</h3><table><thead><tr><th>现在式</th><th>过去式</th><th>过去分词</th></tr></thead><tbody><tr><td>become</td><td>became</td><td>become</td></tr><tr><td>come</td><td>came</td><td>come</td></tr><tr><td>run</td><td>ran</td><td>run</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;分词&lt;/strong&gt;是在动词后面加**-ing&lt;strong&gt;或-&lt;strong&gt;ed&lt;/strong&gt;,起&lt;/strong&gt;形容词**的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;现在分词&lt;/strong&gt;含有&lt;strong&gt;主动、进行&lt;/st</summary>
      
    
    
    
    <category term="英语拾遗" scheme="https://better-jiang.github.io/categories/%E8%8B%B1%E8%AF%AD%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="语法" scheme="https://better-jiang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-动词的3种变形</title>
    <link href="https://better-jiang.github.io/2022/07/22/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8A%A8%E8%AF%8D%E7%9A%843%E7%A7%8D%E5%8F%98%E5%BD%A2/"/>
    <id>https://better-jiang.github.io/2022/07/22/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8A%A8%E8%AF%8D%E7%9A%843%E7%A7%8D%E5%8F%98%E5%BD%A2/</id>
    <published>2022-07-22T07:20:57.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<p>动词原本在句子中应该做谓语，但可以通过改变动词的形态，让它起名词、形容词、分词的作用。</p><ul><li>动词不定式， to + V,  起 名词、形容词、副词的作用</li><li>动名词，V-ing， 起 名词 的作用</li><li>分词， V-ing, V-ed, 起 形容词 的作用</li></ul><h2 id="动词不定式"><a href="#动词不定式" class="headerlink" title="动词不定式"></a>动词不定式</h2><p>**“to + 动词”**，</p><ul><li><p>起<strong>名词</strong>的作用，在句子中作<strong>主、宾、补</strong></p><p>I want to drink.  “to drink” 表示<strong>名词 “喝的东西”</strong></p><p>I want to drink  water.</p><p>I want to drink coke.</p><p>I want to eat an apple.</p></li><li><p>起<strong>形容词</strong>的作用，修饰<strong>名词</strong></p><p>I want water to drink.   <strong>to drink 修饰名词 water</strong>， 表示”要喝的水“</p></li><li><p>起<strong>副词</strong>的作用，<strong>修饰形容词、副词、动词、句子</strong></p><p>I stopped the work to dirnk water.   “to drink water” <strong>“为了喝水”，用来说明停下工作的目的</strong></p></li></ul><h4 id="动词不定式-名词性用法"><a href="#动词不定式-名词性用法" class="headerlink" title="动词不定式-名词性用法"></a>动词不定式-名词性用法</h4><ol><li><p>主语</p><p>To study is my hobby.</p><p>To play the piano is interesting.</p></li><li><p>宾语</p><p>I like to study.   “to study”作宾语</p></li><li><p>补语</p><p>My hobby is to study.</p><p>My dream is to be a doctor.</p></li></ol><h4 id="动词不定式-形容词性用法"><a href="#动词不定式-形容词性用法" class="headerlink" title="动词不定式-形容词性用法"></a>动词不定式-形容词性用法</h4><p><strong>形容词修饰名词一般放在名词前（difficult homework），动词不定式起形容词作用时一般放在名词后 (homework to finish)</strong></p><p>I have no food to eat.</p><p><strong>动词不定式和介词连用修饰名词</strong></p><p>I have no house to live in.</p><p>I need a chair to sition.</p><p>I have no friend to play with.</p><h4 id="动词不定式-副词性用法"><a href="#动词不定式-副词性用法" class="headerlink" title="动词不定式-副词性用法"></a>动词不定式-副词性用法</h4><ol><li><p>修饰 形容词， 一般 <strong>放在形容词后</strong></p><p>This book is difficult. </p><p>This book is difficult to read.   “to read” 修饰 形容词 difficult</p></li><li><p>修饰 副词</p><p>He is to young to go to school. (Hi is so yong that he can’t go to school.)， “to go” 修饰 副词 too </p></li><li><p>修饰 动词、句子</p><p>I wake up early to catch the first train. (表示目的)</p><p>She goes to the store to buy an apple.  </p><p>I am glad to meet you.  (表示理由)</p><p>He must be mad to do so.(判断的依据)</p><p><strong>grow , live,  awake  这三个动词表示结果</strong></p><ul><li>He grew up to be a teacher.  (他长大成了老师)</li><li>She lived to be eighty. (她活到了80岁)</li><li>I studied hard only to fail.  (我努力学习，但还是失败)， 表示结果</li></ul></li></ol><h2 id="动名词"><a href="#动名词" class="headerlink" title="动名词"></a>动名词</h2><p>在动词后面加-ing，起 <strong>名词</strong>作用的词就是动名词。<strong>动名词只有名词的作用</strong>， 在句子中做  <strong>主宾补</strong></p><ol><li><p>做主语</p><p>Learning English is  difficult.      =  To learn English is difficult.</p><p><strong>it  作 形式主语，动名词或动词不定式 作  真正主语</strong></p><p>It is difficult learning English.    =   It  is difficult to learn English.</p></li><li><p>做宾语</p><p>I like reading a book.   = I like to read a book.</p></li><li><p>做补语</p><p>My hobby is collecting stamps.   =  My hobby is to collect stamps.</p></li><li><p>介词的宾语</p><p>介词是具体表示时间、地点、空间的词，但单独一个介词并不完整。</p><p><strong>介词一般用于名词前，其后不接动词、形容词、副词。所有介词后用动词，一定要把动词变为动名词</strong></p><p>I  am  interested in <strong>going</strong> there.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">be interested in doing something</span><br><span class="line">be found of </span><br><span class="line">be sure of </span><br><span class="line">be proud of</span><br><span class="line">be ashamed of</span><br></pre></td></tr></table></figure></li></ol><h2 id="逻辑主语"><a href="#逻辑主语" class="headerlink" title="逻辑主语"></a>逻辑主语</h2><h5 id="动词不定式-充当逻辑主语"><a href="#动词不定式-充当逻辑主语" class="headerlink" title="动词不定式 充当逻辑主语"></a>动词不定式 充当逻辑主语</h5><p>I want to succeed.  </p><p>  **支配动词不定式（to succeed）的主体  是 逻辑主语(I)**。 I 与句子的主语一致，这是为了避免重复就不再写出逻辑主语。</p><p>I want her to succeed.</p><p>这个句子的句型为”主语+谓语+宾语+宾语补足语”。 支配动词不定式(to  succeed) 的 主体 是逻辑主语，<strong>逻辑主语 是 she， 与句子的主语 I 不一样，所有两个都要写出来</strong>。且逻辑主语，要用人称代词的<strong>宾格</strong>形式(her)</p><p><strong>在以形式主语it开头的句子中，要用”for + 宾格”写出支配动词不定式的逻辑主语。 如果形式主语it后表示人的特质或性格的形容词，要用”of + 宾格”</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">It is easy for me to teach English.</span><br><span class="line">It is impossible for her to help you.</span><br><span class="line">It was easy for me to carry the box.</span><br><span class="line"></span><br><span class="line">It kind/polite/impolite/wise/smart/foolish of + 宾格 + 动词不定式</span><br><span class="line"></span><br><span class="line">It is kind of you to help me.</span><br><span class="line">It is wise of him to tell the truth.</span><br></pre></td></tr></table></figure><h5 id="动名词-充当逻辑主语"><a href="#动名词-充当逻辑主语" class="headerlink" title="动名词 充当逻辑主语"></a>动名词 充当逻辑主语</h5><p>动名词的用法和<strong>动词不定式的名词性用法</strong>几乎一样，但在逻辑主语上有差别。<strong>动名词的逻辑主语直接使用所有格或宾格形式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">It is no use  your / you predicting the weather.</span><br><span class="line">his / him</span><br><span class="line">her / her</span><br><span class="line">Jane&#x27;s / Jane</span><br><span class="line">my mom&#x27;s / my mom</span><br></pre></td></tr></table></figure><p><strong>动名词 的逻辑主语 是 事物时，不能用所有格形式，只能用宾格形式</strong></p><p>She is always talking about my car having a good seat.</p><p>句子的主语(She) 与 支配动名词(having a good seat) 的主体 (my car) 不一致，所有要写出逻辑主语，而逻辑主语是事物，所以只能用宾格形式(my car)</p><h2 id="第三类句型的宾语形态"><a href="#第三类句型的宾语形态" class="headerlink" title="第三类句型的宾语形态"></a>第三类句型的宾语形态</h2><p>在第三类句型中**”主语 + 谓语 + 宾语”<strong>，如果</strong>动词想作宾语就要变成名词<strong>，动词变名词2中方法，</strong>动名词** 和 <strong>动词不定式的名词性用法</strong></p><p>I want to eat.    </p><h5 id="只能用动词不定式作宾语的动词"><a href="#只能用动词不定式作宾语的动词" class="headerlink" title="只能用动词不定式作宾语的动词"></a>只能用动词不定式作宾语的动词</h5><p>want、wish、hope、expect(期望)、promise、decide,  <strong>含有预期、未来的意思</strong>，<strong>表示将来会发生的事情</strong></p><p>I want to eat.   </p><p>I hope to master English.</p><h5 id="只能用动名词作作宾语的动词"><a href="#只能用动名词作作宾语的动词" class="headerlink" title="只能用动名词作作宾语的动词"></a>只能用动名词作作宾语的动词</h5><p>mind、enjoy、give up、avoid、finish、escape、stop， <strong>有”平时做…”，“过去做….”的意思</strong></p><h5 id="可以用动名词、动词不定式作宾语的动词"><a href="#可以用动名词、动词不定式作宾语的动词" class="headerlink" title="可以用动名词、动词不定式作宾语的动词"></a>可以用动名词、动词不定式作宾语的动词</h5><p>love、like、hate、begin、start、continue，<strong>一般表示现在的状态</strong></p><p><strong>有些动词不定式和动名词都可作宾语，但意思不同。 动词不定式含有未来的意思，动名词还有过去的意思</strong></p><p>I remember sending a postcard.      我记得<strong>寄过</strong>明信片</p><p>I remember to send a postcard.       我记得<strong>要寄</strong>明信片</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;动词原本在句子中应该做谓语，但可以通过改变动词的形态，让它起名词、形容词、分词的作用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动词不定式， to + V,  起 名词、形容词、副词的作用&lt;/li&gt;
&lt;li&gt;动名词，V-ing， 起 名词 的作用&lt;/li&gt;
&lt;li&gt;分词， V-ing, </summary>
      
    
    
    
    <category term="英语拾遗" scheme="https://better-jiang.github.io/categories/%E8%8B%B1%E8%AF%AD%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="语法" scheme="https://better-jiang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>英语语法-句型</title>
    <link href="https://better-jiang.github.io/2022/07/15/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8F%A5%E5%9E%8B/"/>
    <id>https://better-jiang.github.io/2022/07/15/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95-%E5%8F%A5%E5%9E%8B/</id>
    <published>2022-07-15T00:28:39.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<h4 id="句子成分"><a href="#句子成分" class="headerlink" title="句子成分"></a>句子成分</h4><ul><li>主语： 动作的主人</li><li>谓语： 表示某人怎样？做某事？</li><li>宾语： 表示某事，动作、行为的对象</li><li>补语： 补充说明主语（”表语”）、宾语 (“宾语补足语”)</li></ul><h4 id="5类句型"><a href="#5类句型" class="headerlink" title="5类句型"></a>5类句型</h4><ul><li><p>主语 + 谓语</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                                 // + 修饰语</span><br><span class="line">I study.I study (hard).</span><br><span class="line">She teaches.She teaches (well).</span><br><span class="line">My mom cooks.My mom cooks (in the kitchen).</span><br><span class="line">We talk.We talk (loudly).</span><br></pre></td></tr></table></figure><p>由主语和谓语构成，不需要宾语或补语（<strong>谓语不需要宾语或补语</strong>），即该句型的动词称为<strong>不及物动词</strong></p><p><strong>不及物动词：</strong>可以单独使用，不需要宾语或补语的动词，以下几类动词是不及物动词</p><ul><li>有往来之意的动词，如 来、去、出发、到达等， go、come、begin、start、leave、arrive、move</li><li>存在动词，exist、be</li><li>发生动词，happen、occur</li></ul><p><strong>修饰语：</strong>指起修饰作用的词句，包括形容词、副词、介词短语、状语从句</p><p>​    Time flies (like an arrow).               Our school stands (on the hill).</p></li><li><p>主语 + 谓语 + 表语</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am (a doctor).</span><br><span class="line">She looks (happy).</span><br><span class="line">I fell (cold).</span><br></pre></td></tr></table></figure><p>动词后需要补充说明<strong>主语</strong>的状态、情况、身份等内容的词句，动词后面加上补语，句子才完整。</p><p><strong>表语可由名词、代词、形容词充当，副词、动词不可以做表语</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">She is beautifully. (X) You look happily. (X)</span><br><span class="line">She is beautiful.You look happy.</span><br></pre></td></tr></table></figure><p>可以用在”主语+谓语+表语”句型中的动词有：</p><ul><li><p>be动词，become，表示”是……”，”成为……”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I am a study.</span><br><span class="line">She i pretty. </span><br><span class="line">He became a doctor.   </span><br><span class="line">Tom became crazy.</span><br></pre></td></tr></table></figure><p><strong>be动词表示”存在、有”时，不需要表语</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">God is everywhere.    // &quot;上帝无处不在&quot; , 不需要表语就是完整的句子，属于&quot;主语+谓语&quot;</span><br><span class="line">The girl is in the kitchen.    // &quot;主语+谓语+介词短语&quot;</span><br></pre></td></tr></table></figure></li><li><p>感官动词</p><p>表示”感觉怎么样”，需要补充说明感受，所有必须<strong>接形容词表示表语</strong></p><table><thead><tr><th>视觉</th><th>look</th><th>You look beautiful</th></tr></thead><tbody><tr><td>听觉</td><td>sound</td><td>It sounds great.</td></tr><tr><td>嗅觉</td><td>smell</td><td>This smells good.</td></tr><tr><td>味觉</td><td>taste</td><td>It  tastes delicious.</td></tr><tr><td>触觉</td><td>feel</td><td>It feels soft.</td></tr></tbody></table></li><li><p>trun 、seem， 表示 “好像”、”变得”，后面必须<strong>接相应的内容进行补充说明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">He seems ill.</span><br><span class="line">The leaves turned yellow and red.</span><br></pre></td></tr></table></figure></li></ul></li><li><p>主语 + 谓语 + 宾语</p><p>相当于 谁(主语) + 做(谓语) + 什么(宾语)， 宾语的位置通常为<strong>名词、代词</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I  love you.</span><br><span class="line">I read this book.</span><br><span class="line">I need water.</span><br></pre></td></tr></table></figure><p><strong>决定句子类型的谓语动词</strong>，在此类句型中的动词都需要<strong>接宾语</strong>的动词，其自身不能表达完整的意思，后面必须接宾语，被称为<strong>及物动词</strong></p><p><strong>典型的及物动词</strong>：</p><p>​    I ike you.        He has a pet.         I read a poem.         I want some water.</p><p><strong>动词、形容词及副词不能做宾语：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You want happy.(x)You want happiness.</span><br><span class="line">He makes beautiful.(x)He makes beauty.</span><br><span class="line">I need fast.(x) I need fastness.</span><br></pre></td></tr></table></figure><p>由于汉语和英语的语言差异，有些单词后面要<strong>直接接宾语，不能加介词</strong></p><ul><li>marry 和…..结婚    <code>It&#39;s beyond me why she wants to marry me</code>.</li><li>mention 谈到          <code>Don&#39;t mention it</code>    <code>Sorry, I won&#39;t mention it again</code>.</li><li>enter 进入               <code>I enter the room.</code></li><li>resemble 与……想像    <code>I resemble my father.</code></li><li>reach   到达                  <code>I reached the station.</code>    <code>I arrived at the station</code>.</li><li>await   等待                   <code>I awaited her</code>   <code>I waited for her.</code></li><li>discuss   讨论              <code>It&#39;s hardly the time to discuss it now.</code></li><li>attend     参加，出席      <code>I attend the meeting.</code></li></ul></li><li><p>主语 + 谓语 + 间接宾语(人) + 直接宾语(事、物)  (某人给某人某物)</p><p>该句型中的动词表示”给(为)……做……”,称为做<strong>授予动词</strong>，典型的授予动词：</p><ul><li>give， I gave her flowers.</li><li>show , I will show you a picture.</li><li>bring,  She brings me a computer.</li><li>send,   He  sends her a flower.</li><li>teach,  She teaches  me  English.</li></ul><p>在间接宾语使用人称代词时，要用<strong>宾格</strong>形式</p><table><thead><tr><th>主格</th><th>宾格</th></tr></thead><tbody><tr><td>I</td><td>me</td></tr><tr><td>we</td><td>us</td></tr><tr><td>you</td><td>you</td></tr><tr><td>he</td><td>him</td></tr><tr><td>she</td><td>her</td></tr><tr><td>they</td><td>them</td></tr><tr><td>it</td><td>It</td></tr></tbody></table><p>“主语+谓语+宾语”和”主+谓+间宾+直宾”间的转换，将表示人的间接宾语移至句尾，并在其前面加上to/of/for,<strong>变成”介词+名词”形式的修饰语</strong>。需要用到介词for的动词有<code>make、buy、build、cook、choose、get、order、leave、find</code>，动词ask的间接宾语前用of</p><table><thead><tr><th>主+谓+间宾+直宾</th><th>主+谓+宾</th></tr></thead><tbody><tr><td>You teach us English.</td><td>You teach English to us.</td></tr><tr><td>I gave him money.</td><td>I gave money to him.</td></tr><tr><td>You make me a  cake.</td><td>You make a cake for me.</td></tr><tr><td>She bought me a bike.</td><td>She bought a bike for me.</td></tr><tr><td>I found her the ring.</td><td>I found the ring for her.</td></tr><tr><td>May I ask you a favor?</td><td>May I ask a favor of you?</td></tr></tbody></table></li><li><p>主语 + 谓语 + 宾语 + 宾语补足语</p><p>“主语+谓语+表语”，中的补语是补充说明主语的，称之为表语. He is a spy.</p><p>“主语 + 谓语 + 宾语 + 宾语补足语”中补语是补充说明宾语的。  We call him a spy.</p><p><strong>典型动词,其宾语补足语要用名词、形容词充当</strong></p><ul><li>make， 把……制作成…..</li><li>keep,  让…..保持……</li><li>call,  把…..叫做……</li><li>think,  认为……</li><li>find, 找…..</li><li>believe, 相信…..</li><li>elect， 把……选为…..</li></ul><p>当谓语动词是<strong>感官动词</strong>或<strong>使役动词</strong>时，可以用<strong>动词</strong>做宾语补足语， 当宾语是无法独立完成动作时，宾语补足语要使用<strong>过去分词</strong>(含有被动意思)</p><ul><li><p>感官动词，see、watch、look at、smell、taste、hear、listen to、feel、perceive， 宾语补足语用<strong>动词原形，或 现在分词（V-ing）</strong></p><p>V-ing 表示 感受到<strong>现在正在进行</strong>的动作，动词原形表示感受到了动作的<strong>全部过程</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I hear him sing.I hear him singing.</span><br><span class="line">I saw her clean the room.I saw her celaning the room.</span><br><span class="line">You see me dance.(看到跳舞的全过程)</span><br><span class="line">You see me dancing.  (看到跳舞的某个瞬间)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使役动词，表示”让做某事”，”指使做某事”， 典型的使役动词，make、have、let</p><p>make、let 的宾语补足语只能用动词原形，不能用V-ing</p><p>have 同感官动词一样，当宾语或宾语补足语是主动、进行时，宾语补足语可以用V-ing</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">My mom makes me study.</span><br><span class="line">My dad has me clean the car.</span><br><span class="line">You let me go.</span><br><span class="line"></span><br><span class="line">My teacher has him running.</span><br><span class="line">I had a kite flying high in the sky.</span><br></pre></td></tr></table></figure></li><li><p>当宾语是无法独立完成动作的事物时，宾语补足语要用含有被动意思的<strong>过去分词</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I heard the music played.   // 音乐被演奏</span><br><span class="line">I heard my name called.    // 名字被叫</span><br><span class="line">I saw a girl carried into the hospital.    </span><br><span class="line"></span><br><span class="line">I had my hair permed.  // 头发被烫</span><br><span class="line">I made my car repaired by enginner.  // 车被修理</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="口诀"><a href="#口诀" class="headerlink" title="口诀"></a>口诀</h4><blockquote><p><strong>名词就作”主宾补”， 补语就是”名代形”</strong></p><p>1、主语 + 感官动词 / 使役动词 + 宾语(人，表示主动) + 动词原形 / 现在分词V-ing</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I saw her  go/going out of the room.</span><br><span class="line">I made my younger brother study for the exam.</span><br></pre></td></tr></table></figure><p>2、主语 + 感官动词 / 使役动词 + 宾语(物，表示被动)  + 过去分词</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I heard my name called.</span><br><span class="line">I made this box broken.</span><br><span class="line">I had the box carried by the boy.</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;句子成分&quot;&gt;&lt;a href=&quot;#句子成分&quot; class=&quot;headerlink&quot; title=&quot;句子成分&quot;&gt;&lt;/a&gt;句子成分&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;主语： 动作的主人&lt;/li&gt;
&lt;li&gt;谓语： 表示某人怎样？做某事？&lt;/li&gt;
&lt;li&gt;宾语： 表示某事，动作、</summary>
      
    
    
    
    <category term="英语拾遗" scheme="https://better-jiang.github.io/categories/%E8%8B%B1%E8%AF%AD%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="语法" scheme="https://better-jiang.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>小白笔记-shell</title>
    <link href="https://better-jiang.github.io/2022/07/14/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-shell/"/>
    <id>https://better-jiang.github.io/2022/07/14/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-shell/</id>
    <published>2022-07-14T09:02:50.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello jiang !&quot;</span><br><span class="line"></span><br><span class="line">for file in `ls /etc`;do</span><br><span class="line">  echo $file</span><br><span class="line">done  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用变量</span></span><br><span class="line">name=&quot;jiang&quot;</span><br><span class="line">echo $&#123;name&#125;</span><br><span class="line">echo $name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">变量名 使用 花括号，确定变量的边界</span></span><br><span class="line">for skill in Ada Coffe Action Java;do</span><br><span class="line">  echo &quot;I am good at $&#123;skill&#125;Script&quot;</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">readonly</span> 定义只读变量</span></span><br><span class="line">myUrl=&quot;https://betterjiang.com&quot;</span><br><span class="line">echo $&#123;myUrl&#125;</span><br><span class="line">readonly myUrl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">myUrl=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greeting_2=&#x27;hello, &#x27;$&#123;name&#125;&#x27; !&#x27;</span><br><span class="line">echo $greeting_2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字符串长度</span></span><br><span class="line">echo $name $&#123;#name&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提取字符串</span></span><br><span class="line">echo $&#123;name:1:4&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义数组</span></span><br><span class="line">array=(jiang1 2 3 4jiang 5 6six)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数组长度</span></span><br><span class="line">length=$&#123;#array[@]&#125;</span><br><span class="line">echo $&#123;array[2-1]&#125;</span><br><span class="line">echo $length</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数组元素</span></span><br><span class="line">echo $&#123;array[*]&#125;</span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">多行注释。。。。</span><br><span class="line">多汗，多雨</span><br><span class="line">!</span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">line1</span><br><span class="line">里呢</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="shell" scheme="https://better-jiang.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>小白笔记-pnpm</title>
    <link href="https://better-jiang.github.io/2022/06/22/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-pnpm/"/>
    <id>https://better-jiang.github.io/2022/06/22/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-pnpm/</id>
    <published>2022-06-22T06:15:55.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<p>performant npm，高性能的 npm，由 npm、yarn 衍生而来，解决了 npm/yarn 内部潜在的 bug，极大的优化了性能。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>速度快，安装高效</p></li><li><p>节省磁盘空间</p><p>当使用 npm 或 yarn 时，如果有 100 个项目使用到某个依赖(dependency)，就会有 100 份改依赖的副本保存在硬盘上。使用 pnpm 时，依赖会被存储在内容可寻址的存储中(the denpendency wil be sotred in a content-addressable store),所有</p><ul><li>用到某个依赖的不同版本，只会将<strong>不同版本有差异的文件</strong>添加到仓库</li><li>所有的文件都会存储在硬盘的某一个位置。当软件包被安装时，包里的文件会<strong>硬链接</strong>到该位置，不会再占用额外的磁盘空间。可<strong>允许跨项目的共享同一版本的依赖</strong>。</li></ul></li><li><p>优化了依赖的 node_modules 结构，创建<strong>非扁平化</strong>的 node_modules 文件夹</p><ul><li>使用 npm 或 yarn 安装依赖项时，所有的包都<strong>被提升到模块目录的根目录</strong>，因此，项目可以访问到未被添加进当前项目的依赖</li><li>默认情况下，pnpm 使用<strong>软链</strong>的方式将项目的直接依赖<strong>添加进模块文件夹的根目录</strong></li></ul></li><li><p>内置了对 Monorepo 的支持，无需在引入 lerna</p></li></ul><h3 id="npm、yarn-面临的问题"><a href="#npm、yarn-面临的问题" class="headerlink" title="npm、yarn 面临的问题"></a>npm、yarn 面临的问题</h3><h4 id="Npm-安装包的过程"><a href="#Npm-安装包的过程" class="headerlink" title="Npm 安装包的过程"></a>Npm 安装包的过程</h4><ul><li>先检查 <code>.npmrc</code>文件，包含以下 npm 配置信息，如 registry,全局缓存目录等</li><li>读取 package.json 文件中的依赖信息，根据<strong>semver</strong>语义化版本信息生成完整的版本依赖树</li><li>先查询本地缓存目录，如果有缓存就直接使用，如果不存在，再去 npm 仓库下载到的缓存目录，此过程，会校验包的哈希，以保证安全性</li></ul><p>上述过程中依赖树可能存在大量重复的模块，因为它按依赖树的结构进行安装，比如 A，B 模块都依赖了 C 模块，那么 C 模块会在 A、B 模块的 node_modules 目录内重复安装，造成大量的重复和冗余。</p><p><img src="/image/image-20220622162106602.png" alt="image-20220622162106602"></p><p>npm3 进行了优化，加入了<code>dedupe模块扁平化</code>，尽可能的将所有依赖都发到<strong>最顶层</strong>node_modules 目录下，如果有重复的模块，且版本相互兼容，就会只保留一个，丢弃其它的。如果版本不兼容，那么<strong>只有一个被提升到顶层</strong>，其它的会放在其父依赖的 node_modules 目录下，而哪一个被提升到顶层可能不固定，所有在 npm5+版本中新增了<code>package-lock.json</code>用于<strong>锁定依赖结构</strong>，确保每一次安装出来的目录结构和依赖版本相同。</p><p><img src="/image/image-20220622162714637.png" alt="image-20220622162714637"></p><h4 id="phantom-dependencies-幽灵依赖"><a href="#phantom-dependencies-幽灵依赖" class="headerlink" title="phantom dependencies (幽灵依赖)"></a>phantom dependencies (幽灵依赖)</h4><p>由于扁平化的处理方式， 用户可以引用 package.json 中没有声明的依赖。 比如项目 1 使用 依赖 A，其中 A 有一个 A1 包，由于扁平化 A1 包会别提升到项目 node_modules 下，此时在项目 1 中可直接使用 A1 包，将来 A 升级或不在使用 A1 包，那么项目 1 就会出现异常或报错</p><h4 id="npm-dopplelgangers-npm-包分身"><a href="#npm-dopplelgangers-npm-包分身" class="headerlink" title="npm dopplelgangers (npm 包分身)"></a>npm dopplelgangers (npm 包分身)</h4><p>npm 扁平化的处理机制，可能导致心魔中应用多个版本的包，从而导致</p><ul><li>需要安装多个版本包</li><li>打包出来的文件可能包含多个包</li><li>如果该包需要用到单例，会出现异常</li></ul><h3 id="pnpm-原理"><a href="#pnpm-原理" class="headerlink" title="pnpm 原理"></a>pnpm 原理</h3><p>pnpm 安装依赖后 node_modules 目录大概如下：</p><p><img src="/image/image-20220622165200478.png" alt="image-20220622165200478"></p><p>其中 node_modules 包含 <code>.bin</code>,<code>.pnpm</code>目录以及其它的 npm 包，这些 npm 包与 package.json 中声明的保持一致，因此只有 package.json 中声明过的依赖才能在项目中使用，从而避免了幽灵依赖的问题。</p><p>不同于 npm,这些 npm 包都是 <strong>symbolic link 符号链接，指向了.pnpm 目录下的包</strong></p><p><strong>.pnpm 下的包名规则是</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;organization-name&gt; + &lt;package-name&gt;@&lt;version&gt;/node_modules/&lt;name&gt;</span><br><span class="line">组织名+包名@版本号/node_modules/名称(项目名)</span><br><span class="line">typescript@4.7.4/node_modules/typescript</span><br></pre></td></tr></table></figure><p><img src="/image/image-20220622170327166.png" alt="image-20220622170327166"></p><p>因为.pnpm 里面的包路径中加入了<strong>版本号信息</strong>，因此可以在<strong>同一目录下相对扁平化的存储所有的包</strong>，</p><p>由于每个包又有自己的依赖，为了迎合 node.js 的包查找规则，因此上面的包命名规则中有添加了一层 node_modules 目录，本包的依赖也会在这个目录 内创建 Symbolic link 符号链接，链接到.pnmp 顶层上的包，通过此法，使得每一个包都能正常的使用自己的依赖，但不会污染到顶层的 node_modules,从而避免幽灵依赖的问题</p><p><img src="/image/image-20220622171758946.png" alt="image-20220622171758946"></p><blockquote><p>注： node_modules 目录下还存在一部分没有在 package.json 中声明的依赖，比如<code>@jest/type</code>,<code>@vitejs</code>，这是因为一部分包需要在顶层才能使用，比如 eslint、typescript 声明，prettier 插件等，pnpm 会默认将包名含 types，eslint、prettier 等关键词的包提升到顶层。可通过<code>.npmrc</code>中设置<code>public-hoist-pattern[]=</code>来关闭这些提升</p></blockquote><h4 id="Hard-Link-和-Store"><a href="#Hard-Link-和-Store" class="headerlink" title="Hard Link 和 Store"></a>Hard Link 和 Store</h4><p>在 linux 文件系统中，保存在磁盘分区中文件都会分配一个编号，称为索引编号(inode index)，文件名和 inode 通常是一一对应的，且允许<strong>多个文件名指向同一个 inode</strong>, <strong>删除任何一个文件名并不会对 inode 或其它文件有影响</strong>。只有当最后一个硬链接删除后才回收 inode 编号并标记对应的 block 为可用，等待其它数据存储后抹去其内容。如此，同一个文件可以有多个文件路径和文件名，但在磁盘中仅仅只有一份内容，避免了重复占用。</p><p>项目的 node_modules 目录下的所有文件都是通过硬链接的方式链接到全局 pnpm store 内的文件，以.pnpm 目录下的 vue 为例， 查看 README.md 文件的 inode 编号：64817529</p><p><img src="/image/image-20220622185716656.png" alt="image-20220622185716656"></p><p>进入 pnpm 全局 stroe 路径，查找 inode 编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Users/liuzhenjiang948/.pnpm-store  // 全局目录</span><br><span class="line">find . -inum 64817529   // 查找对应 inode</span><br></pre></td></tr></table></figure><p><img src="/image/image-20220622190031040.png" alt="image-20220622190031040"></p><p>所有 npm 包里面的<strong>所有文件都会在全局进行存储</strong>,存储是根据文件的哈希信息进行散列，这样可以扁平化的存储，而不用按原始的 npm 包目录结构进行存储，节省大量磁盘空间。</p><h3 id="pnpm-install-安装包的大致过程"><a href="#pnpm-install-安装包的大致过程" class="headerlink" title="pnpm install 安装包的大致过程"></a>pnpm install 安装包的大致过程</h3><ul><li>判断是否有 <code>pnpm-lock.yaml</code>文件，<ul><li>如果没有，则根据<code>package.json</code>中声明的版本计算依赖树以及各版本 npm 包的 integrity 值</li><li>如果有 且版本跟 package.json 中声明的匹配，就根据<code>pnpm-lock.yaml</code>中各个依赖包的 integrity 信息，并计算对应的 -index.json 文件的完整哈希和路径</li><li>如果 stroe 里面有对应的包的-index.json 文件，即有该包的缓存</li><li>如果没有的话需联网下载对应的 tar 包，并生成对应的-index.json 文件，并且将包内的文件计算 integrityz 值和哈希</li><li>对整个依赖树进行完以上操作后再项目内的 node_modules 目录创建个依赖的符号链接和文件的硬链接完成安装</li></ul></li></ul><h3 id="CLI-命令"><a href="#CLI-命令" class="headerlink" title="CLI 命令"></a>CLI 命令</h3><ul><li><p>pnpm add <pkg>, <code>-D 安装到 devDependencies</code>, <code>-O 安装到 optionalDependencies</code></p></li><li><p>pnpm install （i）, 安装项目所有依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Packages are copied from the content-addressable store to the virtual store.</span><br><span class="line">  Content-addressable store is at: /Users/liuzhenjiang948/Library/pnpm/store/v3</span><br><span class="line">  Virtual store is at:             node_modules/.pnpm</span><br></pre></td></tr></table></figure><table><thead><tr><th>配置项</th><th>默认值/类型</th><th>说明</th></tr></thead><tbody><tr><td>–offline</td><td>false</td><td>为 true，仅使用在<code>store</code>中已有的包，本地找不到，安装失败</td></tr><tr><td>–ignore-scripts</td><td>false</td><td>不执行任何项目中<code>package.json</code>和它依赖项中定义的任何脚本</td></tr><tr><td>–ockfile-only</td><td>fasle</td><td>只更新<code>pnpm-lock.yaml</code>和<code>package.json</code>，不写入<code>node_modules</code>目录</td></tr><tr><td>–fix-lockfile</td><td></td><td>自动修复损坏的 lock 文件入口</td></tr><tr><td>—reporter=<name></td><td>default, silent, append-only, ndjson</td><td>silent: 除致命 errors，不输出记录信息<br />ndjson: 最详细记录信息</td></tr></tbody></table></li><li><p>pnpm update (up), 更新软件包的最新版本</p><table><thead><tr><th>命令，配置项</th><th>说明</th></tr></thead><tbody><tr><td>pnpm up</td><td>按 <code>package.json</code>指定的范围更新所有的依赖项</td></tr><tr><td>pnpm up –latest</td><td>更新所有依赖项，忽略<code>package.json</code>指定的范围</td></tr><tr><td>pnpm up –recursive</td><td>递归更新子目录中的依赖包</td></tr><tr><td>pnpm up –global</td><td>更新全局安装的依赖包</td></tr></tbody></table></li><li><p>pnpm remove (rm,un,uninstall), 删除指定的包</p></li><li><p>pnpm link (ln)， 使当前本地包 可在<strong>系统范围内 或 其他位置 访问</strong></p><p>在项目开发时，需要将一些公用的代码抽离发布成 npm 包，作为项目的依赖去安装使用。但在开发调试中需要频繁的打包发布，再安装依赖，很不方便。为解决此问题，可以使用 link 命令将模块链接到项目中。</p><ul><li>假设 项目名 project-jiang，和一个公用组件模块 common，现在需要在项目中使用 common,且 common 是作为项目的 npm 包依赖。</li><li>在 common 目录下使用 <code>pnpm link</code> ,将 common 模块创建成本地依赖包</li><li>在 project-jiang 项目中，使用 <code>pnpm link common</code> 和本地 common 模块建立链接。此时该项目中的 node_modules 里就会添加一个 common 模块的软连接</li></ul></li><li><p>pnpm unlink， 取消链接一个系统访问的 package</p></li><li><p>pnpm import, 从另一个软件包管理器的 lock 文件生产 <code>pnpm-lock.yaml</code>， 支持的源文件 <code>package-lock.json</code>,<code>yarn.lock</code>,<code>npm-shrinkwrap.json</code></p></li></ul><h4 id="查看依赖"><a href="#查看依赖" class="headerlink" title="查看依赖"></a>查看依赖</h4><ul><li>pnpm audit, 检查已安装包的已知安全问题，如果发现问题，尝试使用<code>pnpm update</code>，<code>pnpm audit --fix</code></li><li>pnpm list, 以树形结构输出所有的已安装<code>package</code>的版本及其依赖</li><li>pnpm outdated， 检查过期的 packages</li></ul><h4 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><ul><li><p>pnpm run ， 运行一个在 package 文件定义的脚本</p></li><li><p>pnpm test, 运行在<code> package</code> 的<code> scripts</code> 对象中<code>test</code> 属性指定的任意的命令</p></li><li><p>pnpm exec, 在项目访问内执行 shell</p></li><li><p><strong>pnpm dlx</strong>, 从源中获取包而不将其安装为依赖，热加载，并运行它公开的任何默认命令的二级制文件</p><p>例如 <code>pnpm dlx create-react-app my-app</code>, 使用 <code>create-react-app</code>来初始化一个 react 应用</p></li><li><p>pnpm create， 从<code>create-*</code>或<code>@foo/create-*</code>启动套件创建项目， 例如<code>pnpm create react-app my-app</code></p></li></ul><h4 id="管理-Node-环境"><a href="#管理-Node-环境" class="headerlink" title="管理 Node 环境"></a>管理 Node 环境</h4><p><strong>pnpm env <cmd></strong></p><ul><li><p>安装并使用指定版本 node.js</p><p><code>pnpm env use --global lts</code>, <code>pnpm env use --global 16</code>, <code>pnpm env use --global latest</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;performant npm，高性能的 npm，由 npm、yarn 衍生而来，解决了 npm/yarn 内部潜在的 bug，极大的优化了性能。&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="pnpm" scheme="https://better-jiang.github.io/tags/pnpm/"/>
    
  </entry>
  
  <entry>
    <title>小白笔记-redis</title>
    <link href="https://better-jiang.github.io/2022/06/21/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-redis/"/>
    <id>https://better-jiang.github.io/2022/06/21/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-redis/</id>
    <published>2022-06-21T14:01:49.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Redis特点"><a href="#Redis特点" class="headerlink" title="Redis特点"></a>Redis特点</h4><ul><li>高性能，可持久化</li><li>key-value 结构，支持多种数据类型</li><li>支持事务，数据具有原子性</li></ul><h4 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h4><ul><li>缓存 （读写性能优异）</li><li>计数、消息系统（高并发，发布/订阅阻塞队列功能）</li><li>分布式会话session，分布式锁</li></ul><h4 id="Redis-CLi"><a href="#Redis-CLi" class="headerlink" title="Redis CLi"></a>Redis CLi</h4><ul><li><p>Redis  命令参数 <a href="http://doc.redisfans.com/index.html">http://doc.redisfans.com/index.html</a></p></li><li><p>设置/取值</p></li><li><p>databases  16  数据库隔离</p></li><li><p>keys *, 查询 所有key键</p></li><li><p>exists test, 检查 key 键 是否存在</p></li><li><p>del test, 删除 key 键</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Redis特点&quot;&gt;&lt;a href=&quot;#Redis特点&quot; class=&quot;headerlink&quot; title=&quot;Redis特点&quot;&gt;&lt;/a&gt;Redis特点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;高性能，可持久化&lt;/li&gt;
&lt;li&gt;key-value 结构，支持多种数据类型&lt;/li&gt;</summary>
      
    
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="redis" scheme="https://better-jiang.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>大前端-NoSQL数据库的设计与集成</title>
    <link href="https://better-jiang.github.io/2022/06/16/%E5%A4%A7%E5%89%8D%E7%AB%AF-NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E9%9B%86%E6%88%90/"/>
    <id>https://better-jiang.github.io/2022/06/16/%E5%A4%A7%E5%89%8D%E7%AB%AF-NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E9%9B%86%E6%88%90/</id>
    <published>2022-06-16T06:00:33.000Z</published>
    <updated>2023-02-03T12:14:22.424Z</updated>
    
    <content type="html"><![CDATA[<h4 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h4><ul><li>易扩展，高性能，高可用</li><li>较容易 映射复杂数据（key-value)</li><li>无失误特性要求（ACID，原子、一致、隔离、持久）</li></ul><h4 id="NoSQL-常用场景"><a href="#NoSQL-常用场景" class="headerlink" title="NoSQL 常用场景"></a>NoSQL 常用场景</h4><ul><li>内嵌<br>内嵌即存在关联关系的文档，放在同一个文档中，以数组的形式存放。设计思想：<ul><li>减少了关联查询</li><li>适合单类需要描述的属性</li><li>不经常变换的属性</li></ul></li><li>父子引用<ul><li>存在一对多，放在同一文档中，以数组的形式存放</li><li>存在一对非常多的情况下，由于文档存放限制，进行反向引用，存放父级 id</li><li>设计思想：<ul><li>引用数据内容是否非常多？</li><li>引用数据量是否非常庞大，而且还在增加？</li><li>数据是否需要<strong>单独访问</strong>？</li></ul></li></ul></li><li>反范式<ul><li>是否有提升性能的区间？</li><li>数据量的变化是否非常庞大，庞大到更新会异常低效？</li><li>先考虑<strong>读写比</strong>，才考虑反范式</li></ul></li></ul><h4 id="MongoDB-设计原则"><a href="#MongoDB-设计原则" class="headerlink" title="MongoDB 设计原则"></a>MongoDB 设计原则</h4><ul><li>优先考虑内嵌，如果需要单独访问，则不适合</li><li>数组不应该无限制的增长</li><li>考虑读写比，考虑应用场景，考虑反范式</li></ul><p>小江，</p><ul><li>温和内敛，平易近人</li><li>毕业于中国地质大学（CUG），玩飞盘近 10 年</li><li>曾参加过武汉公开赛、深圳公开赛、北京公开赛，广州岭南赛，大连沙滩赛等高水平飞盘赛事</li><li>擅长打 cutter，喜欢接盘的感觉</li><li>因为玩飞盘，我不再”社恐”</li></ul><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h4 id="KEY"><a href="#KEY" class="headerlink" title="KEY"></a>KEY</h4><ul><li>TYPE key, 返回key所存储的值的类型<ul><li>none(key 不存在)</li><li>string</li><li>list</li><li>set</li><li>zset</li><li>hash</li></ul></li><li>KEYS pattern, 查找所以符合模式 pattern 的 key</li><li>EXPIRE key sconds,  设置key 的过期时间，单位秒</li><li>EXISTS key [key…],  检查给定key是否存在</li></ul><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><ul><li>Setnx(<strong>SET</strong> if <strong>N</strong>ot e<strong>X</strong>ists) key value, 在指定的key不存在时，为key设置值</li><li>Mset key value [key value…], 同时设置一个或多个key-value对</li><li>Get key， 获取指定key的值</li><li>Append key value, 将 value 追加到key原来值的末尾</li></ul><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><ul><li>Hset key field value [field value…], 为哈希表中的字段赋值</li><li>Hget key field, 返回哈希表中指定字段的值</li><li>Hgetall key,  返回哈希表中所有的字段和值</li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ul><li>Lpush element [element…], 将一个或多个值插入到列表的头部</li><li>Lpop key,  移出并获取列表的第一个元素</li><li>Lrange key start stop, 获取列表指定范围内的元素</li></ul><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><ul><li>Sadd key member [memer…], 将一个或多个成员加入到集合，已经存在于集合的成员将被忽略</li><li>Smembers key , 返回集合中所有成员</li><li>Srem key member [member …]， 移除集合中的一个或多个成员</li></ul><h4 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h4><ul><li><p>Multi, 标记一个事务块的开始</p></li><li><p>Exec， 执行所有事务块内的命令</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;NoSQL&quot;&gt;&lt;a href=&quot;#NoSQL&quot; class=&quot;headerlink&quot; title=&quot;NoSQL&quot;&gt;&lt;/a&gt;NoSQL&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;易扩展，高性能，高可用&lt;/li&gt;
&lt;li&gt;较容易 映射复杂数据（key-value)&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>前端八股文</title>
    <link href="https://better-jiang.github.io/2022/06/15/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <id>https://better-jiang.github.io/2022/06/15/%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1%E6%96%87/</id>
    <published>2022-06-15T01:53:58.000Z</published>
    <updated>2023-02-03T12:14:22.423Z</updated>
    
    <content type="html"><![CDATA[<h3 id="https-协议的工作原理"><a href="#https-协议的工作原理" class="headerlink" title="https 协议的工作原理"></a>https 协议的工作原理</h3><p>传送门 <a href="https://juejin.cn/post/6995109407545622542"># 解读 HTTP1/HTTP2/HTTP3</a></p><ul><li>客户端使用 https 访问服务器，则要求 web 服务器<strong>建立 ssl 链接</strong></li><li>web 服务器接收客户端的请求后，<strong>会将网站的证书（包含公钥），传输给客户端</strong></li><li>客户端和 web 服务器端开始<strong>协商 SSL 链接的安全（加密）等级</strong></li><li>客户端浏览器通过双方协商一致的安全等级，<strong>建立会话秘钥，然后通过网站的公钥来加密会话秘钥，传送给网站</strong></li><li>web 服务器 通过自己的私钥<strong>解密出 会话秘钥</strong></li><li>web 服务器 通过 <strong>会话秘钥 加密</strong> 与客户端之间通信</li></ul><h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><ul><li>第一次，建立连接时，客户端**发送 SYN 包(syn=j)**到服务器，并进入<code>SYN_SENT</code>状态，等待服务器确认；SYN(Synchronize Sequence Numbers,同步序列号)</li><li>第二次，<strong>服务器收到 SYN 包并确认客户的 SYN (ack=j+1),同时也发送一个自己的 SYN 包(syn=k), 即 SYN+ACK 包</strong>，此时服务器进入<code>SYN_RECV</code>状态</li><li>第三次，**客户端收到服务器的 SYN+ACK 包，向服务器返送确认包 ACK(ack=k+1)**，此包发送完毕后，客户端和服务器进入<code>ESTABLISTHED</code>状态，完成三次握手</li></ul><h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><ul><li>客户端进程<strong>发出连接释放报文</strong>，并停止发送数据。释放数据报文首部，FIN=1，其 seq=u(等于前面已经出过来的数据的最后一个字节序号+1)，此时，客户端进入<code>FIN_WAIT_1(终止等待1)</code>状态。</li><li>服务端<strong>收到连接释放报文，发出确认报文</strong>，ACK=1，ack=u+1,并带上自己的序列号 seq=v，此时，服务器进入<code>CLOSE_WAIT</code>状态。TCP 服务器通知高层的应用进程，客户端向服务器的方向已释放，这时处于<strong>半关闭状态</strong>，即 <strong>客户端已经没有数据要发送，但服务器若发送数据，客户端仍然要接受</strong>。</li><li>客户端收到服务器的确认报文后，此时，客户端进入<code>FIN_WAIT_2</code>状态，等待服务器发送连接释放报文，在这之前<strong>还需要接受服务器发送的最后的数据</strong></li><li><strong>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文</strong>，FIN=1，ack=u+1,由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的 seq=w, 此时，服务器进入<code>LAST_ACK</code>状态，<strong>等待客户的确认</strong>。</li><li>客户端<strong>收到服务器的连接释放报文后，必须发出确认</strong>，ACK=1，ack=w+1,自己的 seq=u+1,此时，客户端就进入<code>TIME_WAIT</code>状态。此时 TCP 连接还没有释放，必须等待一段时间后，当客户端撤销相应 TCB 后，进入<code>CLOSED</code>状态。</li><li>服务器只要收到客户端发出的确认，立即进入<code>CLOSED</code>状态，撤销 TCB 后，就结束了 TCP 连接。</li></ul><h3 id="TCP-IP-如何保证数据包传输的有序可靠？"><a href="#TCP-IP-如何保证数据包传输的有序可靠？" class="headerlink" title="TCP/IP 如何保证数据包传输的有序可靠？"></a>TCP/IP 如何保证数据包传输的有序可靠？</h3><p><strong>对字节流分段并进行编号</strong>，然后通过 <strong>ACK 确认回复</strong> 和<strong>超时重发</strong> 机制来保证</p><ul><li>为了保证数据包的可靠传递，<strong>发送方把已经发送的数据包保留在缓冲区</strong></li><li>并为每个<strong>已发送的数据包启动一个超时定时器</strong></li><li>如果在定时器超时之前<strong>收到对方的应答信息</strong>，则<strong>取消定时器</strong>，<strong>释放数据包占用的缓冲区</strong></li><li>否则，重传该数据包，直到<strong>收到应答</strong> 或 <strong>重传次数超过最大次数</strong>为止</li><li>接收方收到数据包后，进行 CRC 校验，正常则将数据交给上层协议，然后给发送方 <strong>发送一个累计应答包</strong>，表明该数据已收到。<strong>如果接收方正好也有数据要发给发送方，应答包也可在数据包中捎带过去。</strong></li></ul><h3 id="TCP-和-UDP-的区别"><a href="#TCP-和-UDP-的区别" class="headerlink" title="TCP 和 UDP 的区别"></a>TCP 和 UDP 的区别</h3><ul><li>TCP 是面向连接的，UDP 是无连接的</li><li>TCP 仅支持单播传输，UDP 提供了单播、广播、多播的功能</li><li>TCP 的三次握手保证了连接的可靠性，UDP 是无连接的，不可靠的，对接收的数据不发送确认信号，发送端也不知道数据是否正确接收</li><li>UDP 的<strong>头部开销</strong>比 TCP 的更小，数据传<strong>输速率更高，实时性更好</strong></li></ul><h4 id="cookie、sessionStorage、localStorage"><a href="#cookie、sessionStorage、localStorage" class="headerlink" title="cookie、sessionStorage、localStorage"></a>cookie、sessionStorage、localStorage</h4><ul><li><p>cookie 数据大小不能超过 4K，sessionStorage、localStorage 的存储大，5M+</p></li><li><p>cookie 设置的过期时间之前一直有效； localStorage 永久存储，浏览器关闭后数据不丢失，除非主动删除；sessionStorage 数据在当前浏览器关闭窗口后自动删除</p></li><li><p>cookie 数据会自动传递到服务器；sessionStorage、localStorage 数据保存在本地</p></li></ul><h3 id="粘包问题分析、对策"><a href="#粘包问题分析、对策" class="headerlink" title="粘包问题分析、对策"></a>粘包问题分析、对策</h3><p>TCP 是面向流的协议，粘包问题主要是因为接收方不知道消息之间的界限，不知道一次提取多少字节的数据造成的。而 UDP 是面向消息的协议，每个 UDP 都是一条消息，应用程序必须以消息为单位提取数据，不能一次提取任意字节的数据。<br>TCP 为了提高传输效率，发送方往往要收集到足够多的数据后才发送一个 TCP 段。TCP 会使用优化方法，将多次间隔较小且数据量小的数据，合并成一个大的数据块发送出去，这样接收方就难于分辨。</p><ul><li>发送方需要等待缓冲区满才发送，造成粘包</li><li>接收方不及时接收缓冲区的包，造成多个包接收<br>粘包有两中情况：<strong>粘在一起的包都是完整的数据包</strong>，<strong>粘在一起的包有不完整的包</strong><br>比较周全的对策：<strong>接收方创建一预处理线程，对接收到的数据包进行预处理，将粘连的包分开</strong></li></ul><h3 id="从输入-URL-到页面加载的全过程"><a href="#从输入-URL-到页面加载的全过程" class="headerlink" title="从输入 URL 到页面加载的全过程"></a>从输入 URL 到页面加载的全过程</h3><p>传送门 <a href="https://juejin.cn/post/7005468491067162655"># DNS 域名解析过程</a>, <a href="https://juejin.cn/post/6992597760935460901"># 浏览器的工作原理</a></p><ol><li>浏览器输入 url</li><li>查找缓存：浏览器先查看浏览器缓存-&gt;系统缓存-&gt;路由缓存中是否有该地址页面，如果有则显示该页面内容，没有，进行域名解析，也是先查看缓存<ol><li>浏览器缓存：浏览器会记录 DNS 一段时间</li><li>操作系统缓存：如果浏览器缓存中不包含这个记录，则会获取操作系统的记录（其保存最近的 DNS 查询缓存）</li><li>路由器缓存：如果上述两步均不能成功获取 DNS 记录，则继续搜索路由器缓存</li><li>ISP 缓存： 若上述都失败，继续向 ISP 搜索</li></ol></li><li>DNS 域名解析：浏览器向 DNS 服务器发送请求，解析该 URL 中域名对应的 IP 地址。<strong>使用 UDP 协议</strong></li><li>建立 TCP 连接： 解析出 IP 地址，和服务器建立 TCP 连接（3 次握手）</li><li>发起 HTTP 请求： 浏览器发送 http 请求</li><li>服务器响应： 服务器对浏览器请求做出响应，并把对应 html 文件发送给浏览器</li><li>关闭 TCP 连接：4 次挥手</li><li>浏览器渲染：浏览器解析 html 内容并渲染<ol><li>构建 DOM 树: 词法分析然后解析成 dom 树</li><li>构建 CSS 规则树</li><li>构建 render 树： web 浏览器将 DOM 和 CSSOM 结合，并构建出渲染树</li><li>布局（Layout）：计算每个节点在屏幕中的位置</li><li>绘制（Painting)：变量 render 树，并使用 UI 后端层绘制每个节点</li></ol></li><li>JS 引擎解析：调用 js 引擎执行 js 代码（js 解释阶段、预处理阶段、执行阶段生成执行上下文，VO，作用域链，回收机制）<ol><li>创建 window 对象： window 对象（全局执行环境），当页面产生时就被创建，所有的全局变量和函数都属于 window 的属性和方法，而 DOM 树 会映射到 window 的 document 对象上。关闭网页时，全局执行对环境被销毁</li><li>加载文件： js 引擎分析语法、词法是否合法，合法进入预编译</li><li>预编译：在预编译过程中，浏览器会寻找全局变量声明，把它作为 window 的属性加入到 window 对象，并给变量赋值为“undefined”；寻找全局函数声明，把它作为 window 的方法加入到 window 对象，并将函数体赋值给它。</li><li>解释执行： 执行到变量就赋值，如果变量没有被定义（即没有别预编译就直接赋值），在 es5 非严格模式下此变量会成为 window 的一个属性。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交互给之前的环境。</li></ol></li></ol><h3 id="浏览器重排、重绘"><a href="#浏览器重排、重绘" class="headerlink" title="浏览器重排、重绘"></a>浏览器重排、重绘</h3><h5 id="重排、重绘区别？"><a href="#重排、重绘区别？" class="headerlink" title="重排、重绘区别？"></a>重排、重绘区别？</h5><ul><li>重排/回流(Reflow)， 当 DOM 的变化影响到了元素的的几何信息，浏览器需要重新计算元素的集合属性，在将其摆放在页面正确的位置，这一过程即使重排。<strong>重新生成布局，重新排列元素</strong>。</li><li>重绘(Repaint), 元素的外观属性发生变化，但没有改变布局，即重新将元素外观绘制出来的过程。</li></ul><h5 id="如何触发重排、重绘？"><a href="#如何触发重排、重绘？" class="headerlink" title="如何触发重排、重绘？"></a>如何触发重排、重绘？</h5><p>任何改变用来构建渲染树的信息都会导致一次重排或重绘</p><ul><li>添加、删除、更新 DOM 节点</li><li><code>display:none</code>，触发重排和重绘</li><li><code>display:hidden</code>, 只触发重绘，因为无几何变化</li><li>移动或给 DOM 节点添加动画</li><li>添加一个样式表、调整样式属性</li><li>用户行为，调整窗口大小、改变字号、滚动</li></ul><h5 id="如何避免重排、重绘？"><a href="#如何避免重排、重绘？" class="headerlink" title="如何避免重排、重绘？"></a>如何避免重排、重绘？</h5><ul><li><strong>集中改变样式</strong>，而非一条条地修改 DOM 样式</li><li>万万不可把 DOM 节点的属性值放置于循环中当作变量</li><li>为动画的元素 设置<code>position</code> 为 <code>fixed</code>或<code>absolute</code>, 这样修改其 CSS 不会重复 reflow</li><li>尽量只修改 <code>position</code>为<code>fixed</code>或<code>absolute</code>的元素，这对其它元素影响不大</li><li>尽量不使用 table 布局，因为一个很小的变动可能造成整个 table 的 reflow</li><li>动画开始 GPU 加速，translate 使用 3D</li><li>提示为<strong>合成层</strong><ul><li>合成层的位图，会交由 GPU 合成，比 CPU 处理的要快</li><li>当需要 repaint 时，只需要 repaint 本身，不会影响到其他层</li><li>对于 transform 和 opacity 效果，不会触发 layout 和 paint</li><li>使用 CSS 的 <code>will-change</code>属性</li></ul></li></ul><h3 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h3><h5 id="缓存过程分析"><a href="#缓存过程分析" class="headerlink" title="缓存过程分析"></a>缓存过程分析</h5><p>浏览器和服务器通信的方式 为<strong>应答模式</strong>，即浏览器发送 http 请求 - 服务器响响应请求。</p><p>浏览器第一次向服务器发送请求并得到响应结果，会根据响应报文中 http 头中的<strong>缓存标识</strong>，决定<strong>是否缓存响应结果</strong>，是否将响应结果和缓存标识存入浏览器缓存中。</p><ul><li>浏览器每次请求，都会 <strong>先在浏览器缓存中查找该请求的结果和缓存标识</strong></li><li>浏览器每次拿到返回的请求结果都会 <strong>将该结果和缓存标识存入浏览器缓存中</strong></li></ul><h5 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h5><p>向<strong>浏览器缓存</strong>查询请求结果，并根据该结果的缓存规则来决定是否使用，3 中情况</p><ul><li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求</li><li>存在该缓存结果和 缓存标识，但结果失效，强制缓存失效，则使用<strong>协商缓存（携带该资源的缓存标识、发起 http 请求）</strong></li><li>存在改缓存结果和缓存标识，且结果尚未失效，强制缓存生效，直接返回该缓存结果</li></ul><p><strong>控制强制缓存的字段 Expires(http1.0) 和 Cache-Control (http 1.1)， 其中 Cache-Control 优先级较高</strong></p><ul><li>Expires , 缓存的到期时间，小于此时间，直接使用缓存结果， (<strong>客户端、服务端时间不一致</strong>)</li><li>Cache-Control,主要取值<ul><li>public， 所有内容都将被缓存(客户端、<strong>代理服务器</strong>都可缓存)</li><li>private, <strong>默认值</strong> 所有内容 只有客户端缓存</li><li>no-cache, 客户端缓存内容，是否使用缓存，需要经过协商缓存来验证决定</li><li>no-store,所有内容都不被缓存</li><li>max-age=xxx, 缓存内容将在 xxx<strong>秒</strong>后失效</li></ul></li></ul><p><strong>强制缓存存放的位置</strong></p><ul><li>from memory cache (内存缓存)， <strong>快速读取、时效性</strong>。 将编译解析后的文件，直接存入该<strong>进程的内存</strong>中，占据该进程一定的内存资源，一旦进程关闭，则改进程的内存会清空。</li><li>from disk cache (硬盘缓存)， 将缓存写入硬盘文件，读取缓存时需要对进行 I/O 操作，然后重新解析该内容，速度比内存缓存慢。</li></ul><h5 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h5><p><strong>在强制缓存失效后</strong>，浏览器<strong>携带缓存标识</strong>向服务器发起请求，由<strong>服务器根据缓存标识决定</strong>是否使用缓存的过程， 2 中情况</p><ul><li><p>协商缓存生效，返回 304</p><p><img src="/image/image-20220623091006866.png" alt="image-20220623091006866"></p></li><li><p>协商缓存失效，返回 200 和请求结果</p><p><img src="/image/image-20220623091035378.png" alt="image-20220623091035378"></p></li></ul><p><strong>控制协商缓存字段 <code>Last-Modified / If-Modified-Since</code> 和 <code>Etag / If-None-Match</code>, 其中 <code>Etag / If-None-Match</code> 优先级较高</strong></p><ul><li>Last-Modified / If-Modified-Since<ul><li>Last-Modified, 服务器响应请求时，返回该资源文件在服务器最后被修改的时间</li><li>If-Modified-Since, 客户端再次发起请求时，携带上次请求返回的 Last-Modified 值，通过此字段告诉服务器该资源上次请求返回的最后修改时间。服务器收到该请求，会根据 If-Modified-Since 字段值与该资源在服务器的最后修改时间做对比，若服务器的资源最后修改时间大于 If-Modified-Since 字段值，则重新返回资源，状态码 200; 否则返回 304，<strong>代表资源无更新，继续使用缓存文件</strong></li></ul></li><li>Etag / If-None-Match<ul><li>Etag， 服务器响应请求是，返回当前资源文件的唯一标识( <strong>由服务器生产</strong>)</li><li>If-None-Match,客户端再次发起请求时，携带上一次请求返回的唯一标识 Etag 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，会与该资源在服务器的 Etag 值做对比，一致则返回 304 Not Modified，代表资源无更新，可继续使用缓存文件；不一致则重新返回资源文件，状态码 200</li></ul></li></ul><p><strong>总结</strong></p><ul><li>浏览器缓存分为强制缓存和协商缓存，强制缓存优先于协商缓存</li><li>若强制缓存生效（Expires 和 Cache-Control,Cache-Control 优先级高），直接使用缓存</li><li>若强制缓存不生效，则进行协商缓存（Last-Modified/If-Modified-Since, Etag/If-None-Match, Etag/If-None-Match 优先级高）， <strong>协商缓存由服务器决定</strong>是否使用缓存</li><li>若协商缓存失效，代表请求的缓存失效，重新换取请求资源，返回 200，在存入浏览器缓存；</li><li>若协商缓存生效，返回 304， 可继续使用缓存</li></ul><p><img src="/image/image-20220623093036557.png" alt="image-20220623093036557"></p><h3 id="BFC-块级格式上下文"><a href="#BFC-块级格式上下文" class="headerlink" title="BFC(块级格式上下文)"></a>BFC(块级格式上下文)</h3><p>BFC 是 Block Formatting Context 的缩写，即块级格式化上下文。BFC 是 CSS 布局的一个概念，是一个<strong>独立的渲染区域</strong>，规定了内部 box 如何布局，并且这个区域的子元素不会影响到外面的元素。布局规则：</p><ul><li>BFC 是一个独立容器，容器里面的子元素不会影响到外面的元素</li><li>内部 Box 会在垂直方向，一个接一个地放置</li><li>Box 垂直方向的距离由 margin 决定，<strong>同一个 BFC 的两个相邻 Box 的 margin 会重叠</strong></li><li>每个元素的 margin box，与<strong>包含块</strong>border box 的左边相接触</li><li><strong>BFC 的区域不会与 float box 重叠</strong></li><li><strong>计算 BFC 的高度时，浮动元素也参与计算高度</strong></li><li>元素的<strong>类型和 display 属性</strong> 决定了此 box 的类型，<strong>不同 box 类型有不同的 formatting context</strong></li></ul><h5 id="如何创建-BFC？"><a href="#如何创建-BFC？" class="headerlink" title="如何创建 BFC？"></a>如何创建 BFC？</h5><ul><li>根元素，</li><li>float 的值不为 none</li><li>position 为 absolute 或 fixed</li><li>display 的值 为 inline-bloc， table-cell， table-caption</li><li>overflow 的值 不为 visible</li></ul><h3 id="元素水平垂直居中"><a href="#元素水平垂直居中" class="headerlink" title="元素水平垂直居中?"></a>元素水平垂直居中?</h3><h5 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h5><ul><li>行内元素，<code>text-align:center</code></li><li>确定宽度的块级元素<ul><li>width 和 margin 实现， <code>margin: 0 auto</code></li><li>绝对定位和 margin-left：(父 width - 子 width) / 2 ,父元素 position: relative</li></ul></li><li>宽度未知的块级元素<ul><li><code>display:table</code> + margin 左右 auto</li><li><code>display:Inline-block</code> + <code>text-aligin:center</code></li><li>绝对定位+ transform， translateX 移动本身元素的 50%</li><li>flex 布局 使用 <code>justify-content:center</code></li></ul></li></ul><h5 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h5><ul><li>line-height， 适合纯文字类</li><li>父容器 相对定位，子级设置 绝对定位，通过 margin 实现或者 通过 位移 transform</li><li>flex，</li><li>table 布局，父级 display：table, 子级 <code>vertical-align</code></li></ul><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><h5 id="FLex-布局"><a href="#FLex-布局" class="headerlink" title="FLex 布局"></a>FLex 布局</h5><p>容器的属性</p><ul><li>flex-direction,主轴方向</li><li>flex-wrap, 换行规则</li><li>flex-flow, flex-direction 和 flex-wrap 的复合属性， <code>flex-flow: row-reverse wrap;</code></li><li>justify-content, 水平主轴方向的对齐方式</li><li>align-item, 竖直侧轴方向 的对齐方式</li><li>align-content, 容器有多行项目时，垂直方向的对齐方式</li></ul><p>元素/项目的属性</p><ul><li>order, 项目的排列顺序，越小越靠前</li><li>flex-grow, 放大比例</li><li>flex-shrink,缩小比例，为 0， 则不缩小</li><li>flex-basis, 设置伸缩基准值(初始长度)</li><li>flex, flex-grow ,flex-shrink, flex-basis 的复合属性， 默认值 0 1 auto</li><li>align-items, 默认 auto,继承父元素</li></ul><h5 id="Rem-布局"><a href="#Rem-布局" class="headerlink" title="Rem 布局"></a>Rem 布局</h5><p>Rem 是相对于 根元素(html) 的 font-size 大小来计算，其本质是具基于<strong>宽度</strong>的<strong>等比缩放</strong>。 缺点：</p><ul><li>改动多，所有盒子都需要我们去给一个准确的值，才能保证不同机型的适配</li><li>在响应布局中，必须通过 js 来动态的控制根元素 font-size 大小。<strong>css 与 js 有一定的耦合性</strong>，且必须将改变 font-size 的代码放在 css 样式之前</li></ul><h5 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h5><p>子元素的百分比<strong>并非完全相对于直接父元素的 height、width。</strong></p><p>padding、border、margin 等属性不论是水平 ，还是垂直方向都<strong>相对于直接父元素 width</strong></p><p>border-width, translate、background-size <strong>则相对于自身</strong></p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ul><li><p>添加标签，设置 clear:both 属性</p></li><li><p>父级添加 overflow 属性，或设置高度</p></li><li><p>建立 伪元素 选择器 清除浮动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.parent::after &#123;</span><br><span class="line">content: &quot;&quot;;</span><br><span class="line">display: block;</span><br><span class="line">height: 0;</span><br><span class="line">visibility:hidden;</span><br><span class="line">clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="JS-垃圾回收机制"><a href="#JS-垃圾回收机制" class="headerlink" title="JS 垃圾回收机制"></a>JS 垃圾回收机制</h3><p>如果存在大量不被释放的内存(堆、栈、上下文)，页面性能会变的很慢。当某些代码操作不能别合理释放，就会造成内存泄露</p><p><strong>浏览器垃圾回收机制</strong>：浏览器的 js 具有自动垃圾回收机制，垃圾收集器会定期的找出那些不在继续使用的变量，然后释放其内存。</p><ul><li><p>标记清除（mark-and-sweep）：当变量进入上下文，会被加上存在于上下文的标记。当变量离开上下文时，会被加上离开上下文的标记。 垃圾回收程序运行的时候，会标记内存中存储的所有变量，然后将所有上下文中的变量，以及被上下文中的变量引用的变量的<strong>标记去掉</strong>，之后<strong>再有标记的变量就是待删除的（任何在上下文中的变量都访问不到它们了）</strong>，随后垃圾回收程序做一次内存清理，销毁带标记的所有值并回收它们的内存。</p></li><li><p>引用计数：记录每个变量被引用的次数，当一个值的引用数减为 0 时，就会被回收</p></li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>在 js 中变量的作用域属于函数作用域，在函数执行完毕后，作用域就会被清理，内存也随之被回收。但是由于闭包函数是建立在函数内部的子函数，<strong>由于其可访问上级作用域，即使上级函数执行完，作用域也不会随之销毁</strong>，这时的子函数（即闭包），便拥有了访问上级作用域中变量的权限。</p><h5 id="闭包形成的条件"><a href="#闭包形成的条件" class="headerlink" title="闭包形成的条件"></a>闭包形成的条件</h5><ul><li>函数的嵌套</li><li>内部函数引用外部函数的局部变量，延长外部函数的变量生命周期</li></ul><h5 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h5><ul><li>模仿块级作用域</li><li>保护外部函数的变量（阻止其被回收）</li><li>封装私有变量</li><li>创建模块</li></ul><h3 id="JS-中-this-的五种情况"><a href="#JS-中-this-的五种情况" class="headerlink" title="JS 中 this 的五种情况"></a>JS 中 this 的五种情况</h3><ul><li>作为普通函数执行时，this 执行 window</li><li>当函数作为对象的方法被调用时，this 指向该对象</li><li>当使用 new 来实例化一个构造函数时，this 指向实例</li><li>箭头函数中 this 是在定义时绑定的，指向它的<strong>父级作用域</strong></li><li>基于 Function.prototype 上的 apply、call、bind 调用，这三个方法都可以显示的指定调用函数的 this 指向</li></ul><h3 id="原型-amp-amp-原型链"><a href="#原型-amp-amp-原型链" class="headerlink" title="原型&amp;&amp; 原型链"></a>原型&amp;&amp; 原型链</h3><ul><li>每个构造函数都有原型<code>prototype</code></li><li>每个实例都有隐式原型<code>__proto__</code></li><li>实例的<code>__proto__</code>指向构造函数的<code>prototype</code></li></ul><h3 id="new运算符的实现机制"><a href="#new运算符的实现机制" class="headerlink" title="new运算符的实现机制"></a>new运算符的实现机制</h3><ol><li>创建一个新的空对象</li><li><strong>设置原型</strong>，将对象的原型设置为函数的prototype对象</li><li><strong>让函数的this指向该对象</strong>， 执行构造函数代码(为这个新对象添加属性)</li><li>如果无返回值或返回一个非对象值，则返回该对象，否则会将返回值作为新对象返回</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Animal(&#x27;cat&#x27;) = &#123;</span><br><span class="line">var obj = &#123;&#125;</span><br><span class="line">obj.__proto__ = Amimal.prototype</span><br><span class="line">var result = Animal.call(obj,&#x27;cat&#x27;)</span><br><span class="line">return typeof result == &#x27;object&#x27; ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;https-协议的工作原理&quot;&gt;&lt;a href=&quot;#https-协议的工作原理&quot; class=&quot;headerlink&quot; title=&quot;https 协议的工作原理&quot;&gt;&lt;/a&gt;https 协议的工作原理&lt;/h3&gt;&lt;p&gt;传送门 &lt;a href=&quot;https://jueji</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>人际交往之困</title>
    <link href="https://better-jiang.github.io/2022/06/14/%E4%BA%BA%E9%99%85%E4%BA%A4%E5%BE%80%E4%B9%8B%E5%9B%B0/"/>
    <id>https://better-jiang.github.io/2022/06/14/%E4%BA%BA%E9%99%85%E4%BA%A4%E5%BE%80%E4%B9%8B%E5%9B%B0/</id>
    <published>2022-06-14T01:01:20.000Z</published>
    <updated>2023-02-03T12:14:22.423Z</updated>
    
    <content type="html"><![CDATA[<p>最近有两件事情，让我开始也必须去真正的去思考，要如何处理人际关系？并越发的认识到自己以前的方式是有问题的,事实上也被证明了。<br>内向，不善社交，更不愿社交。每每面对他人时，会紧张，会回避，从而被感觉态度冰冷且无趣。即使如此，却没能保持如一至终，大不了孤渡残生，不能同好友开心相处，也不应去变扭局促的，不自然，不愉快的让其他人适应如此的自己。<br>一味的将不喜社交作为种种借口，其实无非是害怕失败，害怕被鄙夷轻视，改变很难，这是我人生一大坎，如何迈过，我在它面前，犹豫徘徊了 20 多年。仿佛深陷泥泽，四周无人，无助且痛苦的挣扎着，煎熬着。反反复复的幻想着，有朝一日能克服心魔，战胜社恐，于亲朋好友间嬉笑而谈，自然舒适相处。抱着如此幻想，好似有了希望与支撑，日子一点一点过着，不知自己还能坚持多久？更担心现在自己周边的朋友还能对我宽容、理解多久？总有一天，它们会厌倦，会失去耐心，会选择离开。为什么这么久了，你都不去改变？<br>X，不管了，我不做人了，要去改变，大不了不做朋友，如果以后还有机会相识，在尽力补偿吧。不断试错，总结，调整，再尝试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近有两件事情，让我开始也必须去真正的去思考，要如何处理人际关系？并越发的认识到自己以前的方式是有问题的,事实上也被证明了。&lt;br&gt;内向，不善社交，更不愿社交。每每面对他人时，会紧张，会回避，从而被感觉态度冰冷且无趣。即使如此，却没能保持如一至终，大不了孤渡残生，不能同好友</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="反思怪" scheme="https://better-jiang.github.io/tags/%E5%8F%8D%E6%80%9D%E6%80%AA/"/>
    
  </entry>
  
  <entry>
    <title>小白笔记-微前端</title>
    <link href="https://better-jiang.github.io/2022/06/13/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    <id>https://better-jiang.github.io/2022/06/13/%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0-%E5%BE%AE%E5%89%8D%E7%AB%AF/</id>
    <published>2022-06-13T03:43:12.000Z</published>
    <updated>2023-02-03T12:14:22.423Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是微前端？"><a href="#什么是微前端？" class="headerlink" title="什么是微前端？"></a>什么是微前端？</h3><p>微前端提供了一种技术可以将多个独立的 web 应用聚合到一起，提供统一的访问入口。</p><p>微前端的思路把后端微服务的架构引入到前端，其核心是能够已业务为单位构建端到端的垂直架构，使等单个的团队能够独立自主的进行相关的开发。</p><p>微前端的核心思路 是 <strong>远程应用程序</strong>，包含组件/模块/包的<strong>运行时加载</strong>。对于用户而言，访问的是一个微前端的容器，容器加载运行在远程服务器上的应用，把这些远程应用作为 组件/模块/包 在 本地浏览器中加载。</p><ul><li>组件是底层 UI 库的构建单元</li><li>模块是相应运行时的构建单元</li><li>包 是 依赖性解析器的构建单元</li><li>微前端 是 所提出的<strong>应用程序的构建快</strong></li></ul><p><strong>微服务主要思路：</strong></p><ul><li>将应用分解为小的、互相连接的微服务，一个微服务完成某个特定功能</li><li>每个微服务都有自己的业务逻辑和适配器，不同的微服务，可以使用<strong>不同的技术去实现</strong>。</li><li>使用<strong>统一的网关</strong>进行配置</li></ul><h3 id="为什么需要微前端，优势？"><a href="#为什么需要微前端，优势？" class="headerlink" title="为什么需要微前端，优势？"></a>为什么需要微前端，优势？</h3><p>随着业务复制度的上升，保体积越来越大，每个版本小需求功能都会导致项目的全量部署，测试，上线，费时费力，加剧了出错风险。</p><p>在微前端中，web 应用被拆分为多个模块，每个模块可独立开发、测试、部署。更改一个模块不会影响到其他模块。</p><p>拆分大应用为小应用，方便迭代更新，且兼容历史应用，实现增量开发</p><p><strong>特点/优势</strong></p><ul><li>松耦合代码、独立部署</li><li>增量开发</li><li>团队自洽</li><li>通过<strong>路由</strong>进行<strong>跨应用程序通信</strong></li><li>解决大型项目迭代问题</li><li>解决多团队<strong>技术栈不同的问题</strong></li></ul><h3 id="如何实现微前端架构？"><a href="#如何实现微前端架构？" class="headerlink" title="如何实现微前端架构？"></a>如何实现微前端架构？</h3><p>从<strong>构建</strong>的角度来看有两种，<strong>编译时</strong>构建、<strong>运行时</strong>构建</p><ul><li><strong>编译时微前端</strong>，通查将第三方库中的组件作为包，在构建时引入依赖。这种实现引入新的微前端需要<strong>重新编译</strong>，不够灵活。编译时的微前端可以通过<strong>webComponents，Monorepo</strong>实现。</li><li><strong>运行时微前端，</strong> 一次加载或延迟加载 <strong>按需动态</strong>将微型前端注入到容器应用程序中。不需要构建，可以动态在代码中定义加载。</li><li><strong>Module Federation (webkpack5)中的新特性</strong>，主要用来解决多个应用之间代码共享问题。</li></ul><h3 id="具体实现方式？"><a href="#具体实现方式？" class="headerlink" title="具体实现方式？"></a>具体实现方式？</h3><h5 id="基于-iframe-完全隔离的方案"><a href="#基于-iframe-完全隔离的方案" class="headerlink" title="基于 iframe 完全隔离的方案"></a>基于 iframe 完全隔离的方案</h5><ul><li>简单，无需改造</li><li>完美隔离，js、css 都是独立的运行环境</li><li>无法保证路由状态，刷新后路由状态丢失</li><li>完全的隔离导致与子应用的交互变的困难</li><li>整个应用全量资源加载，性能差</li></ul><h5 id="基于-single-spa-路由劫持方案"><a href="#基于-single-spa-路由劫持方案" class="headerlink" title="基于 single-spa 路由劫持方案"></a>基于 single-spa 路由劫持方案</h5><ul><li>通过劫持路由的方式来做子应用直接的切换，但计入方式需要融合自身路由，有一定的局限性</li><li><strong>qiankun</strong> 是对 <code>single-spa</code> 做了一层封装，通过 <code>import-html-entry</code> 包 解析 HTML 获取资源路径，然后对资源进行解析、加载。</li></ul><h5 id="京东-micro-app-方案"><a href="#京东-micro-app-方案" class="headerlink" title="京东 micro-app 方案"></a>京东 micro-app 方案</h5><ul><li>借鉴 <code>WebComponet</code> 的思想，通过 <code>CustonmElement</code>结合 自定义的 <code>ShadowDom</code>， 将微前端封装成一个类 <code>webComponent</code> 组件，从而实现微前端的组件化渲染</li></ul><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><ul><li>single-spa， 第一个微前端框架，其提供较为基础的 api，应用在实际项目中 需要进行大量封装且入侵性强，使用不方便。</li><li>qiankun，阿里开源的，基于 single-spa 的上层封装，在国内生态较好，有先行者铺路</li><li>EMP， 基于 module federation 实现的一套可以跨应用共享资源的框架，处理具备微前端的能力外，还实现了跨应用状态共享、跨框架组件调用的能力。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是微前端？&quot;&gt;&lt;a href=&quot;#什么是微前端？&quot; class=&quot;headerlink&quot; title=&quot;什么是微前端？&quot;&gt;&lt;/a&gt;什么是微前端？&lt;/h3&gt;&lt;p&gt;微前端提供了一种技术可以将多个独立的 web 应用聚合到一起，提供统一的访问入口。&lt;/p&gt;
&lt;p&gt;微</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/tags/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>vite入门笔记</title>
    <link href="https://better-jiang.github.io/2022/06/06/vite%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://better-jiang.github.io/2022/06/06/vite%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2022-06-06T01:42:39.000Z</published>
    <updated>2023-02-03T12:14:22.423Z</updated>
    
    <content type="html"><![CDATA[<p>vite 由两部分组成：</p><ul><li><p>开发服务器，支持原生ES模块，服务器启动，热更新（HRM）的速度更快。</p><ul><li>vite 通过将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong>两类。<ul><li>对于依赖，大多是不会变动的纯js，vite 是会使用<strong>esbuild 预构建依赖（它使用Go编写，速度快）</strong></li><li>对于源码，通常是一些需要转换的非js文件（如 JSX，CSS，Vue等），时长被编辑。vite 以 <strong>原生ESM</strong>方式提供源码，只需要在浏览器请求源码时进行<strong>转换并按需提供源码。</strong></li></ul></li><li>在vite中，HMR 是在原生ESM上执行的，当编辑一个文件时，vite 只需使已编辑的模块与其最近的HRM边界之间的链 失活，所有无论应用大小如何，HMR 始终能保持快速更新。</li><li>vite 也会使用http头来加速整个页面的重新加载。<ul><li>源码模块的请求，会 根据 <code>304 Not Modified</code> 进行<strong>协商缓存</strong>。</li><li>依赖模块请求，则 设置请求头<code>Cache-Control:max-age=31536000,immutable</code> 进行 <strong>强制缓存。</strong></li></ul></li></ul></li><li><p>一套构建指令，使用Rollup打包代码，可输出用于生产环境的高度优化过的静态资源。</p></li></ul><p><strong>服务器启动，更新 为什么缓慢？</strong></p><p>在浏览器支持ES模块之前，需要我们对源码进行”打包”，使用工具抓取、处理并将源码模块串联成可以<strong>在浏览器运行的文件</strong>。所有随着项目体积的增长，每次”打包”时间也越来越久，更新的时间也随之增长。</p><h5 id="npm依赖解析和预构建"><a href="#npm依赖解析和预构建" class="headerlink" title="npm依赖解析和预构建"></a>npm依赖解析和预构建</h5><p>原生ES导入不支持<strong>裸模块</strong>导入<code>import &#123; someMethod &#125; from &#39;some-dep&#39;</code>, 在浏览器中会抛出一个错误。vite 会检测到所有被加载的源文件中此类裸模块导入，并执行如下操作：</p><ul><li><strong>预构建</strong>，将 CommonJS / UMD 转换为ESM格式</li><li><strong>重写导入为合法的URL</strong>， 如<code>/node_modules/.vite/some-dep.js?v=f2123d223</code>,以便浏览器能够正确导入它们</li></ul><h5 id="模块热重载-HMR"><a href="#模块热重载-HMR" class="headerlink" title="模块热重载 HMR"></a>模块热重载 HMR</h5><p>vite 提供已一套 原生 ESM 的HRM API，具有HRM 功能的框架可以利用该API提供即使更新，而无需重新加载页面。vite 内置了HMR 到  Vue 单文件组件和 React Fast Refresh中</p><h5 id="Tyscript"><a href="#Tyscript" class="headerlink" title="Tyscript"></a>Tyscript</h5><ul><li>vite 天然支持引入 <code>.ts</code>文件，但 vite 仅执行<code>.ts</code>文件的转义工作，<strong>并不执行或任何类型检查</strong>，需要IDE或在构建过程中进行类型检查。如在构建脚本中 使用 <code>tsc --noEmit</code></li><li>vite 使用 esbuild 将 ts 转义到 js，比 <code>tsc</code>快很多</li></ul><h5 id="客户端类型"><a href="#客户端类型" class="headerlink" title="客户端类型"></a>客户端类型</h5><p>vite 默认的类型定义是写给它的Node.js API的，要将其补充到一个 vite 应用客户端代码环境中，添加一个<code>d.ts</code>声明文件，可提供以下类型定义补充：</p><ul><li>资源导入 (例如，导入一个<code>.vue</code>、<code>.svg</code>文件)</li><li><code>import.meta.env</code> 上 vite 注入的环境变量的类型定义</li><li><code>import.meta.hot</code>上的 HMR API 类型定义</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span><br><span class="line"></span><br><span class="line">declare module &quot;*.vue&quot; &#123;</span><br><span class="line">  import type &#123; DefineComponent &#125; from &quot;vue&quot;;</span><br><span class="line">  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types</span><br><span class="line">  const component: DefineComponent&lt;&#123;&#125;, &#123;&#125;, any&gt;;</span><br><span class="line">  export default component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><ul><li>导入<code>.css</code>文件其内容会被插入到<code>&lt;style&gt;</code>标签中，同时也带有HRM支持。</li><li><strong>@import  内联和变基</strong>，vite 通过 <code>postcss-import</code> 预配置支持了CSS<code>@import</code>内联， vite 的路径别名也遵从css <code>@import</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vite 由两部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;开发服务器，支持原生ES模块，服务器启动，热更新（HRM）的速度更快。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vite 通过将应用中的模块区分为 &lt;strong&gt;依赖&lt;/strong&gt; 和 &lt;strong&gt;源码&lt;/strong&gt;</summary>
      
    
    
    
    <category term="烂笔头" scheme="https://better-jiang.github.io/categories/%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
    <category term="vite" scheme="https://better-jiang.github.io/tags/vite/"/>
    
  </entry>
  
  <entry>
    <title>晋升答辩(凉了)</title>
    <link href="https://better-jiang.github.io/2022/05/30/%E6%99%8B%E5%8D%87%E7%AD%94%E8%BE%A9-%E5%87%89%E4%BA%86/"/>
    <id>https://better-jiang.github.io/2022/05/30/%E6%99%8B%E5%8D%87%E7%AD%94%E8%BE%A9-%E5%87%89%E4%BA%86/</id>
    <published>2022-05-30T09:33:27.000Z</published>
    <updated>2023-02-03T12:14:22.423Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，我是来好车主保险开发组 网销非车项目的刘振江 ，是一名前端工程师。我们项目主要负责维护微信保险商城官网，支付宝小程序平安产险，以及对 ITS 电销录单的支持，本人负责组内前端需求评审、任务分配，也做常规需求开发，支持营销活动，组织我们组内代码评审，技术分享。</p><p>我是 20 年 7 月份入职的，当时组内仅我一个内编，所有自然成了组内的前端负责人。那时候我们项目组 人多活也多，需求变动频繁，要快速上线，为此大家熟悉什么技术，就用什么，没有一个统一的技术栈，老的有 shtml、jQ，jsp，新的有 vue2、react，同时部署发版也没用神兵流水线进行管理，使用的是 EasyOps，手动上传资源，特麻烦，容易出错。</p><p>对于以上问题，借助一次做迁移核心报价需求的机会，我统一了技术栈，选择了最常见也是大家易上手 vue 套件，element ui 组件库。接着逐步的梳理代码，业务逻辑，拆分功能，进行模块化改造。然后在功能封装的基础上，又封装进了 UI、业务逻辑，实现了组件化。后来在代码评审中，又发现大家写代码的风格各异，质量良莠不齐，为此一点一点的制定了些约束规范，例如目录结构规范，命名规范、编码规范，vue 组件开发规范。为了支持产品快速开发，上线，动态的变更，我们逐步搭建了管理平台，来管理产品的配置，上下架，营销活动，以及项目素材等</p><p>正因为做了 3 点上面，我们也产生了价值贡献。首先因为升级了报价系统，构建了管理平台，间接提升系统是稳定性，以及能及时响应市场变化的能力。组件化 + 可配置的开发模式，缩短了标准产品上线周期，从 1 周到 1-2 天。一页流式的报价页面，最小化的信息填写，使得报价速度更快，缩短了用户询价、支付的时间，同时提升了电销坐席录/出单效率。统一的技术栈，逐步完善的开发规范，使得组员间协作更高效，同时这也确保了开发质量。另外，在我做常规宠物险类开发需求时，也挖掘并成功申请一项外观专利。</p><p>未来我还最想的事情有 4 件，</p><ul><li>第一个 是做接口的规范化，能引入一个接口管理平台来维护，因为现在前后端分工明确，接口在前后端联调、对接过程中其启关键作用，规范化能够避免沟通时产生不必要问题。</li><li>其次，是能细化部署，每条流水线负责单一功能模块，按需部署，而非现在 每次仅改动一点需求，都要全量部署，做全量的回归测试，既增加了测试同事工作量，又无形中提高了出问题风险。</li><li>第 3 个，技术在上升一个台阶，能将 vue2 升级到 vue3，并引入 TS，工程化，重要功能模块，能有单元测试覆盖。</li><li>最后，我希望能把我们项目组用的技术、踩的坑，收获的经验教训，能够沉淀整理出来，给分享给新同事或其他需要的团队。再一个梳理组内已开发的组件，对其再做一层抽象，使其能更通用，并搭建出一个小的组件库。</li></ul><p>最后，我要感谢我的领导焜哥、伍总，对我的信任，对我想法的支持，给予我充分自主决策的空间，放手让我去做事情。同时 感谢同事对我的包容和支持，能和他们一起愉快工作，共同成长，并作出一些成绩，我自己也挺有成就感的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大家好，我是来好车主保险开发组 网销非车项目的刘振江 ，是一名前端工程师。我们项目主要负责维护微信保险商城官网，支付宝小程序平安产险，以及对 ITS 电销录单的支持，本人负责组内前端需求评审、任务分配，也做常规需求开发，支持营销活动，组织我们组内代码评审，技术分享。&lt;/p&gt;</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>ESLint原理理解</title>
    <link href="https://better-jiang.github.io/2022/05/30/ESLint%E5%8E%9F%E7%90%86%E7%90%86%E8%A7%A3/"/>
    <id>https://better-jiang.github.io/2022/05/30/ESLint%E5%8E%9F%E7%90%86%E7%90%86%E8%A7%A3/</id>
    <published>2022-05-30T02:16:07.000Z</published>
    <updated>2023-02-03T12:14:22.423Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为啥要用ESLint"><a href="#为啥要用ESLint" class="headerlink" title="为啥要用ESLint?"></a>为啥要用ESLint?</h4><p>团队成员代码风格不同，水平各异。如果允许成员任意发挥，随意coding，不做任何约束的话，随着项目规模慢慢变大，项目代码将很有可能成为难以维护的屎山。所有对于代码的基本写法需要有约束，当代码编写不合约束时能给出提醒，同时能自动修复，这些正是ESLint 要做的事情。</p><ul><li>找出代码中不符合规范的地方，报出异常或错误，给出提示</li><li>能自动修复 不合规的代码</li><li>自定义规则</li></ul><h4 id="ESLint-如何工作？"><a href="#ESLint-如何工作？" class="headerlink" title="ESLint 如何工作？"></a>ESLint 如何工作？</h4><p>ESLint 是如何读懂代码，甚至自动修复不合规代码呢？关键是<strong>AST（抽象语法树）</strong>，其中 ESLint 是使用<strong>espree</strong>来生成 AST 的。</p><p>ESLint 会遍历 AST，然后在遍历到<strong>不同的节点</strong>或<strong>特定的时机</strong>的时候，触发相应的处理函数，在处理函数中抛出错误、提示。</p><p>ESLint 流程大致分为 <strong>读取配置、加载配置、检验、修复</strong>。</p><h5 id="读取配置"><a href="#读取配置" class="headerlink" title="读取配置"></a>读取配置</h5><p>ESLint 首先会从各种配置文件中读取配置，例如 <code>eslintrc</code> 或<code>package.json</code>中的<code>eslintConfig</code>字段中，或使用命令行执行 eslint 时指定任意一个配置文件</p><ul><li><p>先读取<strong>给定目录下最近的</strong>配置文件</p></li><li><p>相同目录存在多个配置文件，仅有一个配置文件会被读取，<code>.eslintrc</code> 优先级的配置文件会高于<code>package.json</code>配置</p></li><li><p>内层目录没有，会默认向外层文件夹<strong>逐层读取</strong>配置文件， 可通过在配置文件添加<code>root:true</code>来阻止逐层读取</p></li><li><p>如果多个配置文件里都配置了重复字段的话，离给定目录<strong>最近的配置会生效</strong></p></li></ul><h5 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h5><p>ESLint会依次加载配置里的<code>extends</code>,<code>parser</code>,<code>plugin</code>等，其中</p><ul><li> <code>extends</code> 是其他配置文件，可以复用<strong>插件中的配置</strong>或者<strong>第三方模块中的配置</strong> </li></ul><p>  ESLint 会递归地去读取配置文件中的<code>extends</code>,最终各个配置对象的顺序是[{内层配置}，{内层配置的extends}，{外层配置}，{外层配置中的extends}]，之后会进行合并操作，具体合并逻辑</p><ul><li><p>对于 parser、processor字段，后面的配置会覆盖前面的配置</p></li><li><p>对应 env、globals、parserOptions,settings 字段会合并在一起，但只有当后面的配置存在，而前面的没有该字段时，这个字段才会被合并进来，如果前面有，那么后面的相同自读会被摒弃</p></li><li><p>对应 rules，前面的配置优先级高，如果存在的rule里有参数，参数会被合并</p></li><li><p><code>parser</code> 用于解析AST</p></li><li><p><code>plugin</code> 是用户自定义的插件，可映入自定义规则，以及对非js文件的检查和处理等 </p></li></ul><h5 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h5><p>当获得所有需要的配置后，接下来就会进入检验流程，大致执行顺序</p><ul><li><p>处理 processor</p><ul><li><p>processor 是在插件上定义的处理器，并针对特定后缀文件定义preprocess 和 postprocess 两个方法。</p></li><li><p>preprocess方法接受文件源码和文件名作为参数，返回需要被检测的代码或文件的数组。</p></li><li><p>postprocess 在文件被检验完后，对所有的lint problem 进行统一处理</p></li></ul></li><li><p>解析代码， 获取AST 和 节点 数组，没有指定parser时，默认使用 espress</p></li><li><p>跑规则  runRules</p><p>ESLint 的核心就是处理一条一条的规则，如何处理？</p><ul><li>收集AST所有的节点</li><li>遍历所有配置中的rule，并通过rule的名称找到对应的rule对象。ESLint 会为rule对象里的<strong>AST节点</strong>添加相应的监听函数，以便在后面遍历AST节点时可以出发相应的处理函数</li><li>再次遍历收集的AST节点，出发相应的节点监听函数，在监听函数中调用方法收集所有的eslint 问题</li></ul></li></ul><h5 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h5><p>ESLint 的 rule 对AST进行检查，并报错。fixer 则根据 AST节点中保留的 range 信息(源码的下标范围)来修改代码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;为啥要用ESLint&quot;&gt;&lt;a href=&quot;#为啥要用ESLint&quot; class=&quot;headerlink&quot; title=&quot;为啥要用ESLint?&quot;&gt;&lt;/a&gt;为啥要用ESLint?&lt;/h4&gt;&lt;p&gt;团队成员代码风格不同，水平各异。如果允许成员任意发挥，随意coding，</summary>
      
    
    
    
    <category term="技术总结" scheme="https://better-jiang.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="eslint" scheme="https://better-jiang.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>九龙山飞盘交流赛</title>
    <link href="https://better-jiang.github.io/2022/05/23/%E4%B9%9D%E9%BE%99%E5%B1%B1%E9%A3%9E%E7%9B%98%E4%BA%A4%E6%B5%81%E8%B5%9B/"/>
    <id>https://better-jiang.github.io/2022/05/23/%E4%B9%9D%E9%BE%99%E5%B1%B1%E9%A3%9E%E7%9B%98%E4%BA%A4%E6%B5%81%E8%B5%9B/</id>
    <published>2022-05-23T00:37:36.000Z</published>
    <updated>2023-02-03T12:14:22.423Z</updated>
    
    <content type="html"><![CDATA[<p>已经是赛后第 3 日了，照片、视频也在微信群中发完，讨论比赛的声音渐少渐弱。而我却不太愿参入其中，只是希望赶快遗忘，毕竟羞辱与失落，带着伤与痛，除了令我不好受，更多的是不理解。为何大家能自然的去指责队友，能理所当然的批评他人，而忘记交流和谅解。</p><p>失误，配合不畅本就是常态，真没必要过多指责。我们都太高估自己了，自诩高质量训练局，自认为是老鸟，玩盘多年，技术经验兼具，队伍实力比较强。不能输，必须要打出理想的效果，几个教练多少有如此想法。所有我们输不起，不接受失误，打的效果差会感到耻辱，且需要立即调整改变。如此一来，评判、指责多了，没有克制的肆意表现出。无效的惩罚来了，再失误下去，别打了。传盘趋于保守，以至于需要按规定动作执行。有了规定，也就有了指责挑错的依据，渐渐的势头也不对了，每个人都莫名其妙的有了压力，心里上也有了负担，没了乐趣可言。</p><p>没有人并非玻璃心，仅是被太理解，也不被理解。为什么平时愉快相处，其乐融融的队友会如此苛责，不能好好交流吗？比赛输赢真的比我们之间的友情更重要吗？我们到底是好友吗？掉盘，没配合好，不能如你所愿的跑位，阻挡你了，真的令你如此气愤而需找人发泄吗？</p><p>玩飞盘，首要是收获乐趣，如果不能，我必然离开。</p><p>惩罚只能告诉我们做错了什么，什么又是对的呢？不知道。相反，鼓励告诉我们什么事情做对了，下次还这样做就好了。成功就是做对了几件事，其他千万情况下都是错，错是常态，错是不可预知的。鼓励代替指责，多鼓励队友，能同队友舒适、自然相处，多听听队友的想法，听听他为啥会那要做后，你会理解他的行为，或者你会更无语了，无语就无语吧，别去任意指责他们。没有调研就没有发言权，没有设身处地，就没有感同身受，就会有自我的无法理解而产生的疑惑，气愤。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;已经是赛后第 3 日了，照片、视频也在微信群中发完，讨论比赛的声音渐少渐弱。而我却不太愿参入其中，只是希望赶快遗忘，毕竟羞辱与失落，带着伤与痛，除了令我不好受，更多的是不理解。为何大家能自然的去指责队友，能理所当然的批评他人，而忘记交流和谅解。&lt;/p&gt;
&lt;p&gt;失误，配合不畅</summary>
      
    
    
    
    <category term="随笔感悟" scheme="https://better-jiang.github.io/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="飞盘" scheme="https://better-jiang.github.io/tags/%E9%A3%9E%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>萌新飞盘教练的点滴认知</title>
    <link href="https://better-jiang.github.io/2022/05/05/%E8%90%8C%E6%96%B0%E9%A3%9E%E7%9B%98%E6%95%99%E7%BB%83%E7%9A%84%E7%82%B9%E6%BB%B4%E8%AE%A4%E7%9F%A5/"/>
    <id>https://better-jiang.github.io/2022/05/05/%E8%90%8C%E6%96%B0%E9%A3%9E%E7%9B%98%E6%95%99%E7%BB%83%E7%9A%84%E7%82%B9%E6%BB%B4%E8%AE%A4%E7%9F%A5/</id>
    <published>2022-05-05T02:48:35.000Z</published>
    <updated>2023-02-03T12:14:22.423Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学弟（嘉伟）组织的飞盘局中做了几次新手教练，讲真挺有压力的，毕竟学员交了钱，且带着对飞盘的热爱和学习的欲望而来，我希望自己能好好的教学，让学员能学到飞盘技术，也能玩的开心，体验到玩飞盘的快乐。</p><p>对于一个中度社恐、慢热、不善言辞，也非圈中大牛的我来说，教新人飞盘，其实我挺不自信的，尤其是面对妹子，更会慌张不安。但是，这一切都在好转，我在慢慢改变，通过总结复盘，向其他老师学习，并刻意去练习后，我紧张有所缓解，讲解规则也更清晰有条理，同时也认识一些新朋友。</p><p>对于新手而言，最容易犯的错误有下面几点：</p><ul><li>传盘时，慌张着急传盘、重心不稳时传盘、不看队友传盘、双腿站定传盘、传盘质量差(高飘，无方向，传盘手势不对)</li><li>接盘时，站立等盘、距持盘人太进，拥挤成团、接盘手势不对、无变向甩不开防守人</li><li>防守时，看盘不看人、失误转换时漏人</li></ul><p>cut-dump-deep 练习 需要讲解地方</p><ul><li>cut，变向后 冲向 handler，接盘， （<strong>变向摆脱</strong>防守人，<strong>不要等</strong>，防守人会跟上）</li><li>接盘后，向前传盘有防守，受阻，dump 回 handler (dump 时 <strong>迈步</strong>，将防守人移身后， <strong>盘要旋转</strong>，有<strong>提前量</strong>，<strong>高度 在 handler 身躯中间</strong>部分)</li><li>go deep 者，注意时机 (可设置<strong>目标区域</strong>，handler 向目标区域 传，cutter 也向目标区域跑 )</li></ul><p>后面可要讲些简单的<strong>横排战术</strong></p><ul><li>cutter、handler 站位</li><li>cut 、清开 路线</li><li>dump、 swing</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在学弟（嘉伟）组织的飞盘局中做了几次新手教练，讲真挺有压力的，毕竟学员交了钱，且带着对飞盘的热爱和学习的欲望而来，我希望自己能好好的教学，让学员能学到飞盘技术，也能玩的开心，体验到玩飞盘的快乐。&lt;/p&gt;
&lt;p&gt;对于一个中度社恐、慢热、不善言辞，也非圈中大牛的我来说，教新</summary>
      
    
    
    
    <category term="随笔感悟" scheme="https://better-jiang.github.io/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="飞盘" scheme="https://better-jiang.github.io/tags/%E9%A3%9E%E7%9B%98/"/>
    
  </entry>
  
</feed>
